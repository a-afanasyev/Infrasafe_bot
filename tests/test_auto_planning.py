"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω
"""

import os
import sys
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uk_management_bot.database.session import SessionLocal
from uk_management_bot.services.shift_planning_service import ShiftPlanningService
from uk_management_bot.database.models.shift import Shift
from uk_management_bot.database.models.shift_template import ShiftTemplate
from sqlalchemy import func

def test_auto_planning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    db = SessionLocal()
    try:
        planning_service = ShiftPlanningService(db)
        
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–æ–≤
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤...")
        templates = db.query(ShiftTemplate).filter(ShiftTemplate.auto_create == True).all()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for template in templates:
            print(f"  üìã {template.name}: –¥–Ω–∏ {template.days_of_week}, {template.min_executors}-{template.max_executors} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        
        if not templates:
            print("‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç '–°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞'...")
        tomorrow = date.today() + timedelta(days=1)
        weekday_tomorrow = tomorrow.weekday() + 1
        print(f"–ó–∞–≤—Ç—Ä–∞: {tomorrow} (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday_tomorrow})")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        db.query(Shift).filter(func.date(Shift.planned_start_time) == tomorrow).delete()
        db.commit()
        
        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        applicable_templates = [t for t in templates if t.is_day_included(weekday_tomorrow)]
        print(f"–ü—Ä–∏–º–µ–Ω–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∑–∞–≤—Ç—Ä–∞: {len(applicable_templates)}")
        for template in applicable_templates:
            print(f"  - {template.name} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {template.min_executors}-{template.max_executors} —Å–º–µ–Ω)")
        
        # –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã
        total_shifts = 0
        created_by_template = {}
        errors = []
        
        for template in applicable_templates:
            try:
                shifts = planning_service.create_shift_from_template(template.id, tomorrow)
                if shifts:
                    total_shifts += len(shifts)
                    created_by_template[template.name] = len(shifts)
                    print(f"  ‚úÖ {template.name}: —Å–æ–∑–¥–∞–Ω–æ {len(shifts)} —Å–º–µ–Ω")
                else:
                    print(f"  ‚ùå {template.name}: —Å–º–µ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            except Exception as e:
                errors.append(f"{template.name}: {str(e)}")
                print(f"  ‚ùå {template.name}: –æ—à–∏–±–∫–∞ - {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
        print(f"  –°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω: {total_shifts}")
        print(f"  –ü–æ —à–∞–±–ª–æ–Ω–∞–º: {created_by_template}")
        if errors:
            print(f"  –û—à–∏–±–∫–∏: {errors}")
        
        # 3. –¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        today = date.today()
        monday = today - timedelta(days=today.weekday())
        next_monday = monday + timedelta(days=7)  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
        
        print(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é —Å {next_monday}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–º–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        week_end = next_monday + timedelta(days=6)
        db.query(Shift).filter(
            func.date(Shift.planned_start_time) >= next_monday,
            func.date(Shift.planned_start_time) <= week_end
        ).delete()
        db.commit()
        
        results = planning_service.plan_weekly_schedule(next_monday)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  –ü–µ—Ä–∏–æ–¥: {results['week_start']} - {results['week_start'] + timedelta(days=6)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω: {results['statistics']['total_shifts']}")
        print(f"  –ü–æ –¥–Ω—è–º: {results['statistics']['shifts_by_day']}")
        print(f"  –ü–æ —à–∞–±–ª–æ–Ω–∞–º: {results['statistics']['shifts_by_template']}")
        if results['errors']:
            print(f"  –û—à–∏–±–∫–∏: {results['errors']}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω –≤ –±–∞–∑–µ...")
        all_planned_shifts = db.query(Shift).filter(
            Shift.status == 'planned',
            Shift.planned_start_time >= datetime.now()
        ).all()
        
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω –≤ –±—É–¥—É—â–µ–º: {len(all_planned_shifts)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        shifts_by_date = {}
        for shift in all_planned_shifts:
            if shift.planned_start_time:
                shift_date = shift.planned_start_time.date()
                if shift_date not in shifts_by_date:
                    shifts_by_date[shift_date] = 0
                shifts_by_date[shift_date] += 1
        
        print(f"–°–º–µ–Ω—ã –ø–æ –¥–∞—Ç–∞–º:")
        for shift_date in sorted(shifts_by_date.keys())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–Ω–µ–π
            count = shifts_by_date[shift_date]
            weekday = shift_date.weekday() + 1
            print(f"  üìÖ {shift_date} (–¥–µ–Ω—å {weekday}): {count} —Å–º–µ–Ω")
        
        print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"‚úÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìà –°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω –≤—Å–µ–≥–æ: {len(all_planned_shifts)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_auto_planning()