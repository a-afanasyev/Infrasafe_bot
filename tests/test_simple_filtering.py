#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
"""

import sys
import os
sys.path.append('/app')

from uk_management_bot.database.session import engine
from sqlalchemy import text
from datetime import datetime

def test_simple_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    
    with engine.connect() as connection:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
            result = connection.execute(text("""
                SELECT id, telegram_id, specialization, active_role
                FROM users 
                WHERE specialization = 'plumber' 
                AND active_role = 'executor'
                LIMIT 1
            """))
            
            executor = result.fetchone()
            if not executor:
                print("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            executor_id = executor[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫: ID {executor_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            connection.execute(text("""
                INSERT INTO requests 
                (user_id, category, status, address, description, urgency, created_at, updated_at)
                VALUES (:user_id, :category, :status, :address, '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞', '–û–±—ã—á–Ω–∞—è', :created_at, :updated_at)
            """), {
                "user_id": 2,
                "category": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
                "status": "–í —Ä–∞–±–æ—Ç–µ",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω—ã–π",
                "created_at": datetime.now(),
                "updated_at": datetime.now()
            })
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
            result = connection.execute(text("""
                SELECT id FROM requests 
                WHERE address = '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω—ã–π'
                ORDER BY created_at DESC 
                LIMIT 1
            """))
            
            request = result.fetchone()
            if not request:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É!")
                return False
            
            request_id = request[0]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ID {request_id}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏
            connection.execute(text("""
                INSERT INTO request_assignments 
                (request_id, assignment_type, group_specialization, status, created_by)
                VALUES (:request_id, 'group', 'plumber', 'active', :created_by)
            """), {
                "request_id": request_id,
                "created_by": executor_id
            })
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            
            connection.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤–∏–¥–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            result = connection.execute(text("""
                SELECT r.id, r.category, r.status, r.address
                FROM requests r
                JOIN request_assignments ra ON r.id = ra.request_id
                WHERE ra.status = 'active'
                AND (
                    ra.executor_id = :executor_id 
                    OR (ra.assignment_type = 'group' AND ra.group_specialization = 'plumber')
                )
                AND r.status IN ('–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–∫—É–ø', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ')
                AND r.address = '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω—ã–π'
            """), {"executor_id": executor_id})
            
            active_requests = result.fetchall()
            print(f"\nüëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å –∞–¥—Ä–µ—Å–æ–º '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω—ã–π':")
            
            for req in active_requests:
                print(f"   - ID: {req[0]}, –°—Ç–∞—Ç—É—Å: {req[2]}, –ê–¥—Ä–µ—Å: {req[3]}")
            
            if len(active_requests) == 1:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(active_requests)} –∑–∞—è–≤–æ–∫ –≤–º–µ—Å—Ç–æ 1")
                return False
            
            # –¢–µ–ø–µ—Ä—å –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            connection.execute(text("""
                UPDATE requests 
                SET status = '–ü—Ä–∏–Ω—è—Ç–æ', updated_at = :updated_at
                WHERE id = :request_id
            """), {
                "request_id": request_id,
                "updated_at": datetime.now()
            })
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ü—Ä–∏–Ω—è—Ç–æ'")
            
            connection.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ù–ï –≤–∏–¥–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            result = connection.execute(text("""
                SELECT r.id, r.category, r.status, r.address
                FROM requests r
                JOIN request_assignments ra ON r.id = ra.request_id
                WHERE ra.status = 'active'
                AND (
                    ra.executor_id = :executor_id 
                    OR (ra.assignment_type = 'group' AND ra.group_specialization = 'plumber')
                )
                AND r.status IN ('–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–∫—É–ø', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ')
                AND r.address = '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω—ã–π'
            """), {"executor_id": executor_id})
            
            active_requests_after = result.fetchall()
            print(f"\nüëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:")
            
            for req in active_requests_after:
                print(f"   - ID: {req[0]}, –°—Ç–∞—Ç—É—Å: {req[2]}, –ê–¥—Ä–µ—Å: {req[3]}")
            
            if len(active_requests_after) == 0:
                print("‚úÖ –ó–∞—è–≤–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –≤–∏–¥–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                return False
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            connection.execute(text("DELETE FROM request_assignments WHERE request_id = :request_id"), {"request_id": request_id})
            connection.execute(text("DELETE FROM requests WHERE id = :request_id"), {"request_id": request_id})
            
            connection.commit()
            print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            connection.rollback()
            return False

if __name__ == "__main__":
    success = test_simple_filtering()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
