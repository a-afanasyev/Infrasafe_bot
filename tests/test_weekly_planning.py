"""
–¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uk_management_bot.database.session import SessionLocal
from uk_management_bot.database.models.shift import Shift
from sqlalchemy import func

def test_weekly_planning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–º–µ–Ω –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    
    db = SessionLocal()
    try:
        tomorrow = date.today() + timedelta(days=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω –Ω–∞ {tomorrow}...")
        shifts_on_date = db.query(Shift).filter(
            func.date(Shift.planned_start_time) == tomorrow
        ).all()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(shifts_on_date)} —Å–º–µ–Ω –Ω–∞ {tomorrow}:")
        for shift in shifts_on_date:
            print(f"  üìÖ –°–º–µ–Ω–∞ ID {shift.id}:")
            print(f"     –í—Ä–µ–º—è: {shift.planned_start_time} - {shift.planned_end_time}")
            print(f"     –°—Ç–∞—Ç—É—Å: {shift.status}")
            print(f"     –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {shift.user_id}")
            print(f"     –®–∞–±–ª–æ–Ω: {shift.shift_template_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–º–µ–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'planned'
        print(f"\nüîç –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã:")
        planned_shifts = db.query(Shift).filter(Shift.status == 'planned').all()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(planned_shifts)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω:")
        for shift in planned_shifts:
            print(f"  üìÖ –°–º–µ–Ω–∞ ID {shift.id} –Ω–∞ {shift.planned_start_time.date() if shift.planned_start_time else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
            
        if len(shifts_on_date) > 0:
            print(f"\nüéâ –°–º–µ–Ω—ã –Ω–∞ {tomorrow} –Ω–∞–π–¥–µ–Ω—ã! –ù–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å {len(shifts_on_date)} —Å–º–µ–Ω.")
        else:
            print(f"\n‚ùå –ù–µ—Ç —Å–º–µ–Ω –Ω–∞ {tomorrow}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_weekly_planning()