#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É SimpleSheetsSync —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã.
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "uk_management_bot"))

from integrations.simple_sheets_sync import SimpleSheetsSync
from database.session import get_db
from database.models.request import Request
from database.models.user import User
from sqlalchemy.orm import Session


async def test_real_data_export():
    """–¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    print("üß™ –¢–µ—Å—Ç 1: –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync = SimpleSheetsSync("", "test_real_data.csv")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        requests = db.query(Request).all()
        
        print(f"   - –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ: {len(requests)}")
        
        if not requests:
            print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            await create_test_data(db)
            requests = db.query(Request).all()
            print(f"   - –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(requests)}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for request in requests:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∏—Ç–µ–ª–µ
            applicant = db.query(User).filter(User.id == request.user_id).first()
            if applicant:
                applicant_name = f"{applicant.first_name or ''} {applicant.last_name or ''}".strip()
                if not applicant_name:
                    applicant_name = f"User_{request.user_id}"
            else:
                applicant_name = f"User_{request.user_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
            executor_name = ""
            if request.executor_id:
                executor = db.query(User).filter(User.id == request.executor_id).first()
                if executor:
                    executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
                    if not executor_name:
                        executor_name = f"User_{request.executor_id}"
                else:
                    executor_name = f"User_{request.executor_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            request_data = {
                'request_number': request.request_number,
                'created_at': request.created_at.strftime("%Y-%m-%d %H:%M:%S") if request.created_at else '',
                'status': request.status,
                'category': request.category,
                'address': request.address,
                'description': request.description,
                'urgency': request.urgency,
                'applicant_id': request.user_id,
                'applicant_name': applicant_name,
                'executor_id': request.executor_id,
                'executor_name': executor_name,
                'assigned_at': '',  # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
                'completed_at': request.completed_at.strftime("%Y-%m-%d %H:%M:%S") if request.completed_at else '',
                'comments': request.notes or '',
                'photo_urls': ','.join(request.media_files) if request.media_files else ''
            }
            
            export_data.append(request_data)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        success = await sync.export_requests_to_csv(export_data)
        
        if success:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            csv_path = Path("test_real_data.csv")
            if csv_path.exists():
                print(f"   - –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_path}")
                print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {csv_path.stat().st_size} –±–∞–π—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                with open(csv_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    print(f"   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
                    
                    if len(lines) > 0:
                        print(f"   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0].strip()}")
                    
                    if len(lines) > 1:
                        print(f"   - –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞: {lines[1].strip()}")
                    
                    if len(lines) > 2:
                        print(f"   - –í—Ç–æ—Ä–∞—è –∑–∞—è–≤–∫–∞: {lines[2].strip()}")
                
                return True
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
        else:
            print(f"‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def create_test_data(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for i in range(1, 4):
            user = User(
                id=i,
                telegram_id=1000 + i,
                first_name=f"–¢–µ—Å—Ç",
                last_name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
                phone=f"+7 999 123-45-{i:02d}",
                status="approved",
                role="applicant"
            )
            users.append(user)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É
        for user in users:
            db.add(user)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
        requests = [
            Request(
                id=1,
                user_id=1,
                category="–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
                address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
                description="–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ –≤ –ø–æ–¥—ä–µ–∑–¥–µ",
                urgency="–°—Ä–æ—á–Ω–∞—è",
                status="–ù–æ–≤–∞—è",
                created_at=datetime.now()
            ),
            Request(
                id=2,
                user_id=2,
                category="–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
                address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 2",
                description="–ü—Ä–æ—Ç–µ–∫–∞–µ—Ç –∫—Ä–∞–Ω –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ",
                urgency="–û–±—ã—á–Ω–∞—è",
                status="–í —Ä–∞–±–æ—Ç–µ",
                executor_id=3,
                created_at=datetime.now()
            ),
            Request(
                id=3,
                user_id=3,
                category="–û—Ç–æ–ø–ª–µ–Ω–∏–µ",
                address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 3",
                description="–•–æ–ª–æ–¥–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏",
                urgency="–°—Ä–æ—á–Ω–∞—è",
                status="–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
                executor_id=2,
                completed_at=datetime.now(),
                notes="–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                created_at=datetime.now()
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É
        for request in requests:
            db.add(request)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        print(f"   - –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"   - –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(requests)}")
        
    except Exception as e:
        print(f"   - –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()


async def test_statistics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏")
    
    try:
        sync = SimpleSheetsSync("", "test_real_data.csv")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await sync.get_statistics()
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
        print(f"   - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ CSV: {stats['total_requests']}")
        print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats['file_size']} –±–∞–π—Ç")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['last_modified']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


async def test_backup():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 3: –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
    
    try:
        sync = SimpleSheetsSync("", "test_real_data.csv")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = await sync.create_backup()
        
        if backup_path:
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            print(f"   - –ü—É—Ç—å –∫ backup: {backup_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            backup_file = Path(backup_path)
            if backup_file.exists():
                print(f"   - Backup —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print(f"   - –†–∞–∑–º–µ—Ä backup: {backup_file.stat().st_size} –±–∞–π—Ç")
                return True
            else:
                print(f"   - Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ backup –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
        return False


async def show_csv_content():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV —Ñ–∞–π–ª–∞"""
    print("\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV —Ñ–∞–π–ª–∞:")
    print("=" * 80)
    
    try:
        csv_path = Path("test_real_data.csv")
        if csv_path.exists():
            with open(csv_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
                for i, line in enumerate(lines):
                    if i == 0:
                        print(f"üìã –ó–ê–ì–û–õ–û–í–ö–ò: {line.strip()}")
                    else:
                        print(f"üìù –ó–∞—è–≤–∫–∞ {i}: {line.strip()}")
                        
                    if i >= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                        print(f"... –∏ –µ—â–µ {len(lines) - 5} —Å—Ç—Ä–æ–∫")
                        break
        else:
            print("‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")


async def cleanup_test_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    test_files = [
        "test_real_data.csv"
    ]
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    for file_name in test_files:
        file_path = Path(file_name)
        if file_path.exists():
            file_path.unlink()
            print(f"   - –£–¥–∞–ª–µ–Ω: {file_name}")
    
    # –£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª—ã
    for file_path in Path(".").glob("test_real_data_backup_*.csv"):
        file_path.unlink()
        print(f"   - –£–¥–∞–ª–µ–Ω backup: {file_path.name}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ UK Management Bot")
    print("=" * 60)
    
    tests = [
        test_real_data_export,
        test_statistics,
        test_backup
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV
    await show_csv_content()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    await cleanup_test_files()
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   - –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
        print("   - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç")
        print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets —Ç–∞–±–ª–∏—Ü—É")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –≤ Google Sheets")
        print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    return passed == total


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
