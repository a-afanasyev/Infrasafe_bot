#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω (–≠–¢–ê–ü 5)
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

import sys
import os
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

def test_handlers_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–º–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from uk_management_bot.handlers.shift_management import router as shift_mgmt_router
        print("  ‚úÖ shift_management: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        from uk_management_bot.handlers.my_shifts import router as my_shifts_router
        print("  ‚úÖ my_shifts: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        return True
        
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False


def test_keyboards_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚å®Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏
        from uk_management_bot.keyboards.shift_management import (
            get_main_shift_menu,
            get_planning_menu,
            get_analytics_menu
        )
        print("  ‚úÖ shift_management keyboards: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        from uk_management_bot.keyboards.my_shifts import (
            get_my_shifts_menu,
            get_shift_actions_keyboard
        )
        print("  ‚úÖ my_shifts keyboards: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        return True
        
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False


def test_states_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏
        from uk_management_bot.states.shift_management import (
            ShiftManagementStates,
            TemplateManagementStates,
            AutoPlanningStates
        )
        print("  ‚úÖ shift_management states: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        from uk_management_bot.states.my_shifts import (
            MyShiftsStates,
            ShiftTimeTrackingStates,
            ShiftEmergencyStates
        )
        print("  ‚úÖ my_shifts states: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        return True
        
    except ImportError as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False


def test_keyboards_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from uk_management_bot.keyboards.shift_management import get_main_shift_menu
        from uk_management_bot.keyboards.my_shifts import get_my_shifts_menu
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        mgmt_keyboard = get_main_shift_menu("ru")
        shifts_keyboard = get_my_shifts_menu("ru")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã
        if mgmt_keyboard and hasattr(mgmt_keyboard, 'inline_keyboard'):
            print("  ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏")
            return False
            
        if shifts_keyboard and hasattr(shifts_keyboard, 'inline_keyboard'):
            print("  ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∏—Ö —Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–∏—Ö —Å–º–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        mgmt_buttons = len(mgmt_keyboard.inline_keyboard)
        shifts_buttons = len(shifts_keyboard.inline_keyboard)
        
        print(f"  üìä –ö–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {mgmt_buttons}")
        print(f"  üìä –ö–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {shifts_buttons}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False


def test_localization_keys():
    """–¢–µ—Å—Ç –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        import json
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        with open('uk_management_bot/config/locales/ru.json', 'r', encoding='utf-8') as f:
            locale_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω
        required_sections = [
            'shift_management',
            'shift_analytics', 
            'my_shifts'
        ]
        
        missing_sections = []
        for section in required_sections:
            if section not in locale_data:
                missing_sections.append(section)
            else:
                keys_count = len(locale_data[section])
                print(f"  ‚úÖ {section}: {keys_count} –∫–ª—é—á–µ–π")
        
        if missing_sections:
            print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        mgmt_keys = locale_data.get('shift_management', {})
        analytics_keys = locale_data.get('shift_analytics', {})
        shifts_keys = locale_data.get('my_shifts', {})
        
        essential_mgmt_keys = ['title', 'planning', 'analytics', 'templates']
        essential_shifts_keys = ['title', 'current_shifts', 'week_schedule', 'history']
        
        mgmt_missing = [key for key in essential_mgmt_keys if key not in mgmt_keys]
        shifts_missing = [key for key in essential_shifts_keys if key not in shifts_keys]
        
        if mgmt_missing:
            print(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ shift_management: {mgmt_missing}")
        
        if shifts_missing:
            print(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ my_shifts: {shifts_missing}")
        
        if not mgmt_missing and not shifts_missing:
            print("  ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return len(missing_sections) == 0
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_states_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        from uk_management_bot.states.shift_management import ShiftManagementStates
        from uk_management_bot.states.my_shifts import MyShiftsStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        mgmt_states = [
            'main_menu', 'planning_menu', 'analytics_menu',
            'selecting_template', 'selecting_date'
        ]
        
        missing_mgmt_states = []
        for state_name in mgmt_states:
            if not hasattr(ShiftManagementStates, state_name):
                missing_mgmt_states.append(state_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        shifts_states = [
            'main_menu', 'viewing_shifts', 'viewing_shift_details',
            'time_tracking_menu'
        ]
        
        missing_shifts_states = []
        for state_name in shifts_states:
            if not hasattr(MyShiftsStates, state_name):
                missing_shifts_states.append(state_name)
        
        if missing_mgmt_states:
            print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ShiftManagementStates: {missing_mgmt_states}")
        else:
            print("  ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ShiftManagementStates –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        if missing_shifts_states:
            print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è MyShiftsStates: {missing_shifts_states}")
        else:
            print("  ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è MyShiftsStates –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return len(missing_mgmt_states) == 0 and len(missing_shifts_states) == 0
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False


def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'uk_management_bot/handlers/shift_management.py',
        'uk_management_bot/handlers/my_shifts.py',
        'uk_management_bot/keyboards/shift_management.py',
        'uk_management_bot/keyboards/my_shifts.py',
        'uk_management_bot/states/shift_management.py',
        'uk_management_bot/states/my_shifts.py'
    ]
    
    missing_files = []
    file_stats = {}
    
    for file_path in required_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            file_stats[file_path] = size
            print(f"  ‚úÖ {file_path}: {size} –±–∞–π—Ç")
        else:
            missing_files.append(file_path)
            print(f"  ‚ùå {file_path}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {len(missing_files)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –ø—É—Å—Ç—ã–µ
    empty_files = [f for f, size in file_stats.items() if size < 100]
    if empty_files:
        print(f"  ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã: {empty_files}")
    
    total_size = sum(file_stats.values())
    print(f"\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_size} –±–∞–π—Ç")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–æ—Ü–µ–Ω–∫–∞): {total_size // 30}")
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í –°–ò–°–¢–ï–ú–´ –°–ú–ï–ù (–≠–¢–ê–ü 5)")
    print("=" * 80)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", test_handlers_import),
        ("–ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä", test_keyboards_import),
        ("–ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π", test_states_import),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä", test_keyboards_functionality),
        ("–ö–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏", test_localization_keys),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π", test_states_structure)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name.upper()}:")
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"  üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 5")
    print("=" * 80)
    
    passed_tests = sum(1 for r in results if r)
    total_tests = len(results)
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if results[i] else "‚ùå –ù–ï–£–î–ê–ß–ê"
        print(f"  {test_name}: {status}")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate >= 85:
        print("\nüéâ –≠–¢–ê–ü 5: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ - –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    elif success_rate >= 70:
        print("\nüëç –≠–¢–ê–ü 5: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ - –ß–ê–°–¢–ò–ß–ù–û –ó–ê–í–ï–†–®–ï–ù")
        print("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
        return 0
    else:
        print("\n‚ö†Ô∏è –≠–¢–ê–ü 5: –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò")
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return 1


if __name__ == "__main__":
    sys.exit(main())