#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç SimpleSheetsSync —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ UK Management Bot.
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "uk_management_bot"))

from integrations.simple_sheets_sync import SimpleSheetsSync
from database.session import get_db
from database.models.request import Request
from database.models.user import User


async def demo_data_export():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–´–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync = SimpleSheetsSync("", "demo_export.csv")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests = db.query(Request).all()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ: {len(requests)}")
    
    if not requests:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = []
    
    for request in requests:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∏—Ç–µ–ª–µ
        applicant = db.query(User).filter(User.id == request.user_id).first()
        if applicant:
            applicant_name = f"{applicant.first_name or ''} {applicant.last_name or ''}".strip()
            if not applicant_name:
                applicant_name = f"User_{request.user_id}"
        else:
            applicant_name = f"User_{request.user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        executor_name = ""
        if request.executor_id:
            executor = db.query(User).filter(User.id == request.executor_id).first()
            if executor:
                executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
                if not executor_name:
                    executor_name = f"User_{request.executor_id}"
            else:
                executor_name = f"User_{request.executor_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        request_data = {
            'request_number': request.request_number,
            'created_at': request.created_at.strftime("%Y-%m-%d %H:%M:%S") if request.created_at else '',
            'status': request.status,
            'category': request.category,
            'address': request.address,
            'description': request.description,
            'urgency': request.urgency,
            'applicant_id': request.user_id,
            'applicant_name': applicant_name,
            'executor_id': request.executor_id,
            'executor_name': executor_name,
            'assigned_at': '',  # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
            'completed_at': request.completed_at.strftime("%Y-%m-%d %H:%M:%S") if request.completed_at else '',
            'comments': request.notes or '',
            'photo_urls': ','.join(request.media_files) if request.media_files else ''
        }
        
        export_data.append(request_data)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(export_data)} –∑–∞—è–≤–æ–∫ –≤ CSV...")
    success = await sync.export_requests_to_csv(export_data)
    
    if success:
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await sync.get_statistics()
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_requests']}")
        print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats['file_size']} –±–∞–π—Ç")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['last_modified']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:")
        csv_path = Path("demo_export.csv")
        if csv_path.exists():
            with open(csv_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(lines) > 0:
                    print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0].strip()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
                for i in range(1, min(4, len(lines))):
                    line = lines[i].strip()
                    print(f"   üìù –ó–∞—è–≤–∫–∞ {i}: {line[:100]}...")
                
                if len(lines) > 4:
                    print(f"   ... –∏ –µ—â–µ {len(lines) - 4} –∑–∞—è–≤–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        print(f"\nüíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        backup_path = await sync.create_backup()
        if backup_path:
            print(f"   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        print(f"\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: demo_export.csv")
        print(f"üìä –ì–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É –≤ Google Sheets")
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")


async def demo_add_request():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    print(f"\nüÜï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò")
    print("=" * 40)
    
    sync = SimpleSheetsSync("", "demo_export.csv")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
    new_request = {
        'id': 999,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'status': '–ù–æ–≤–∞—è',
        'category': '–î–µ–º–æ',
        'address': '—É–ª. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è, 1',
        'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        'urgency': '–û–±—ã—á–Ω–∞—è',
        'applicant_id': 999,
        'applicant_name': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'executor_id': None,
        'executor_name': '',
        'assigned_at': '',
        'completed_at': '',
        'comments': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞',
        'photo_urls': ''
    }
    
    print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É ID {new_request['id']}...")
    success = await sync.add_request_to_csv(new_request)
    
    if success:
        print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await sync.get_statistics()
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_requests']} –∑–∞—è–≤–æ–∫")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


async def demo_update_request():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    print(f"\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò")
    print("=" * 40)
    
    sync = SimpleSheetsSync("", "demo_export.csv")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    changes = {
        'status': '–í —Ä–∞–±–æ—Ç–µ',
        'executor_id': 1,
        'executor_name': '–î–µ–º–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'comments': '–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É (–¥–µ–º–æ)'
    }
    
    print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É ID 999...")
    success = await sync.update_request_in_csv(999, changes)
    
    if success:
        print("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: {list(changes.keys())}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


async def cleanup_demo_files():
    """–û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    demo_files = [
        "demo_export.csv"
    ]
    
    for file_name in demo_files:
        file_path = Path(file_name)
        if file_path.exists():
            file_path.unlink()
            print(f"   - –£–¥–∞–ª–µ–Ω: {file_name}")
    
    # –£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª—ã
    for file_path in Path(".").glob("demo_export_backup_*.csv"):
        file_path.unlink()
        print(f"   - –£–¥–∞–ª–µ–Ω backup: {file_path.name}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        await demo_data_export()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        await demo_add_request()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        await demo_update_request()
        
        print(f"\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print(f"   - –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
        print(f"   - –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç")
        print(f"   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
        print(f"   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫")
        print(f"   - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        print(f"   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        await cleanup_demo_files()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(main())
