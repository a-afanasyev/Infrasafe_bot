#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
"""

import sys
import os
sys.path.append('/app')

from uk_management_bot.database.session import engine
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.request_assignment import RequestAssignment
from sqlalchemy import text
from datetime import datetime

def test_executor_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
    
    with engine.connect() as connection:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞
            result = connection.execute(text("""
                SELECT id, telegram_id, specialization, active_role
                FROM users 
                WHERE specialization = 'plumber' 
                AND active_role = 'executor'
                LIMIT 1
            """))
            
            executor = result.fetchone()
            if not executor:
                print("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            executor_id = executor[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å-—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫: ID {executor_id}, Telegram ID {executor[1]}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            test_requests = [
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–í —Ä–∞–±–æ—Ç–µ", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 1"),
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–ó–∞–∫—É–ø", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 2"),
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 3"),
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 4"),
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–ü—Ä–∏–Ω—è—Ç–æ", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 5"),
                ("–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å 6"),
            ]
            
            created_requests = []
            for category, status, address in test_requests:
                # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                connection.execute(text("""
                    INSERT INTO requests 
                    (user_id, category, status, address, description, urgency, created_at, updated_at)
                    VALUES (:user_id, :category, :status, :address, '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞', '–û–±—ã—á–Ω–∞—è', :created_at, :updated_at)
                """), {
                    "user_id": 2,
                    "category": category,
                    "status": status,
                    "address": address,
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                })
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
                result = connection.execute(text("""
                    SELECT id FROM requests 
                    WHERE category = :category 
                    AND status = :status 
                    AND address = :address
                    ORDER BY created_at DESC 
                    LIMIT 1
                """), {
                    "category": category,
                    "status": status,
                    "address": address
                })
                
                request = result.fetchone()
                if request:
                    created_requests.append((request[0], category, status, address))
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: ID {request[0]}, –°—Ç–∞—Ç—É—Å: {status}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
            for request_id, category, status, address in created_requests:
                connection.execute(text("""
                    INSERT INTO request_assignments 
                    (request_id, assignment_type, group_specialization, status, created_by)
                    VALUES (:request_id, 'group', 'plumber', 'active', :created_by)
                """), {
                    "request_id": request_id,
                    "created_by": executor_id
                })
                print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}")
            
            connection.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –≤–∏–¥–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            result = connection.execute(text("""
                SELECT r.id, r.category, r.status, r.address
                FROM requests r
                JOIN request_assignments ra ON r.id = ra.request_id
                WHERE ra.status = 'active'
                AND (
                    ra.executor_id = :executor_id 
                    OR (ra.assignment_type = 'group' AND ra.group_specialization = 'plumber')
                )
                AND r.status IN ('–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–∫—É–ø', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ')
                ORDER BY r.created_at DESC
            """), {"executor_id": executor_id})
            
            active_requests = result.fetchall()
            print(f"\nüëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:")
            
            expected_active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
            actual_statuses = [req[2] for req in active_requests]
            
            for req in active_requests:
                print(f"   - ID: {req[0]}, –°—Ç–∞—Ç—É—Å: {req[2]}, –ê–¥—Ä–µ—Å: {req[3]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if set(actual_statuses) == set(expected_active_statuses):
                print(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏: {actual_statuses}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å—Ç–∞—Ç—É—Å—ã {actual_statuses}, –æ–∂–∏–¥–∞–ª–∏—Å—å {expected_active_statuses}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            # –≠—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ show_my_requests –¥–ª—è active_status = "active"
            result = connection.execute(text("""
                SELECT r.id, r.category, r.status, r.address
                FROM requests r
                JOIN request_assignments ra ON r.id = ra.request_id
                WHERE ra.status = 'active'
                AND (
                    ra.executor_id = :executor_id 
                    OR (ra.assignment_type = 'group' AND ra.group_specialization = 'plumber')
                )
                AND r.status IN ('–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–∫—É–ø', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ')
                ORDER BY r.created_at DESC
            """), {"executor_id": executor_id})
            
            active_requests_final = result.fetchall()
            print(f"\nüëÅÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞):")
            
            for req in active_requests_final:
                print(f"   - ID: {req[0]}, –°—Ç–∞—Ç—É—Å: {req[2]}, –ê–¥—Ä–µ—Å: {req[3]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            actual_statuses = [req[2] for req in active_requests_final]
            expected_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –≤ —Å–ø–∏—Å–∫–µ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            unexpected_statuses = [status for status in actual_statuses if status not in expected_statuses]
            
            if len(unexpected_statuses) == 0:
                print("‚úÖ –í –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö –µ—Å—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {unexpected_statuses}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            found_statuses = set(actual_statuses)
            missing_statuses = set(expected_statuses) - found_statuses
            
            if len(missing_statuses) == 0:
                print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã: {missing_statuses}")
                # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            for request_id, category, status, address in created_requests:
                connection.execute(text("DELETE FROM request_assignments WHERE request_id = :request_id"), {"request_id": request_id})
                connection.execute(text("DELETE FROM requests WHERE id = :request_id"), {"request_id": request_id})
            
            connection.commit()
            print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            connection.rollback()
            return False

if __name__ == "__main__":
    success = test_executor_filtering()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        sys.exit(1)
