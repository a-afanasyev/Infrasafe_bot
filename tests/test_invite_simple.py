"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è InviteService –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –ë–î
"""
import pytest
import time
import json
import hmac
import hashlib
import base64
from datetime import datetime, timedelta
from unittest.mock import MagicMock, patch


class MockSettings:
    """–ú–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    INVITE_SECRET = "test_secret_key_for_testing_purposes_only"
    JOIN_RATE_LIMIT_WINDOW = 600
    JOIN_RATE_LIMIT_MAX = 3


class MockAuditLog:
    """–ú–æ–∫ –º–æ–¥–µ–ª–∏ AuditLog"""
    def __init__(self, action, user_id, details):
        self.action = action
        self.user_id = user_id
        self.details = details


class MockSession:
    """–ú–æ–∫ —Å–µ—Å—Å–∏–∏ –ë–î"""
    def __init__(self):
        self.audit_logs = []
        self.committed = False
        
    def add(self, obj):
        if hasattr(obj, 'action'):
            self.audit_logs.append(obj)
    
    def commit(self):
        self.committed = True
        
    def rollback(self):
        pass
    
    def query(self, model):
        return MockQuery(self.audit_logs)


class MockQuery:
    """–ú–æ–∫ –∑–∞–ø—Ä–æ—Å–∞"""
    def __init__(self, data):
        self.data = data
        
    def filter(self, *args):
        return self
        
    def first(self):
        return None  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


def test_invite_token_generation_and_validation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –ë–î"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥ inline —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –º–æ–¥–µ–ª—è–º–∏
    import hmac
    import hashlib
    import json
    import base64
    import secrets
    from datetime import datetime, timedelta
    
    def generate_nonce():
        return secrets.token_urlsafe(16)
    
    def generate_invite(role: str, created_by: int, specialization: str = None, hours: int = 24):
        secret = "test_secret_key_for_testing_purposes_only".encode('utf-8')
        
        payload = {
            "role": role,
            "expires_at": int((datetime.utcnow() + timedelta(hours=hours)).timestamp()),
            "nonce": generate_nonce(),
            "created_by": created_by
        }
        
        if role == "executor" and specialization:
            payload["specialization"] = specialization.strip()
            
        payload_json = json.dumps(payload, separators=(',', ':'), sort_keys=True)
        payload_b64 = base64.urlsafe_b64encode(payload_json.encode()).decode().rstrip('=')
        
        signature = hmac.new(
            secret, 
            payload_b64.encode(), 
            hashlib.sha256
        ).hexdigest()
        
        return f"invite_v1:{payload_b64}.{signature}"
    
    def validate_invite(token: str):
        secret = "test_secret_key_for_testing_purposes_only".encode('utf-8')
        
        if not token.startswith('invite_v1:'):
            raise ValueError("Invalid token format")
            
        token_body = token[10:]
        if '.' not in token_body:
            raise ValueError("Invalid token structure")
            
        payload_b64, signature = token_body.rsplit('.', 1)
        
        expected_signature = hmac.new(
            secret,
            payload_b64.encode(),
            hashlib.sha256
        ).hexdigest()
        
        if not hmac.compare_digest(signature, expected_signature):
            raise ValueError("Invalid token signature")
        
        # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        missing_padding = len(payload_b64) % 4
        if missing_padding:
            payload_b64 += '=' * (4 - missing_padding)
            
        payload_json = base64.urlsafe_b64decode(payload_b64.encode()).decode()
        payload = json.loads(payload_json)
        
        if payload.get('expires_at', 0) < time.time():
            raise ValueError("Token has expired")
        
        return payload
    
    # –¢–µ—Å—Ç—ã
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª—è
    token = generate_invite(role="applicant", created_by=123456789)
    assert token.startswith("invite_v1:")
    assert "." in token
    
    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    payload = validate_invite(token)
    assert payload["role"] == "applicant"
    assert payload["created_by"] == 123456789
    assert "nonce" in payload
    assert "expires_at" in payload
    
    # –¢–µ—Å—Ç 3: –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    executor_token = generate_invite(
        role="executor", 
        created_by=987654321,
        specialization="plumber,electrician"
    )
    executor_payload = validate_invite(executor_token)
    assert executor_payload["role"] == "executor"
    assert executor_payload["specialization"] == "plumber,electrician"
    assert executor_payload["created_by"] == 987654321
    
    # –¢–µ—Å—Ç 4: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    corrupted_token = token[:-1] + ("a" if token[-1] != "a" else "b")
    with pytest.raises(ValueError, match="Invalid token signature"):
        validate_invite(corrupted_token)
    
    # –¢–µ—Å—Ç 5: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    with pytest.raises(ValueError, match="Invalid token format"):
        validate_invite("invalid_token")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_rate_limiter():
    """–¢–µ—Å—Ç rate limiter"""
    
    class SimpleRateLimiter:
        _storage = {}
        
        @classmethod
        def is_allowed(cls, user_id: int, window: int = 600, max_attempts: int = 3) -> bool:
            now = time.time()
            key = f"join_{user_id}"
            attempts = cls._storage.get(key, [])
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            attempts = [t for t in attempts if now - t < window]
            
            if len(attempts) >= max_attempts:
                return False
            
            attempts.append(now)
            cls._storage[key] = attempts
            return True
        
        @classmethod
        def clear(cls):
            cls._storage.clear()
    
    # –û—á–∏—â–∞–µ–º storage
    SimpleRateLimiter.clear()
    
    user_id = 123456789
    
    # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    assert SimpleRateLimiter.is_allowed(user_id) == True
    assert SimpleRateLimiter.is_allowed(user_id) == True  
    assert SimpleRateLimiter.is_allowed(user_id) == True
    
    # 4-–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    assert SimpleRateLimiter.is_allowed(user_id) == False
    
    # –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π –ª–∏–º–∏—Ç
    other_user = 987654321
    assert SimpleRateLimiter.is_allowed(other_user) == True
    
    print("‚úÖ –¢–µ—Å—Ç—ã rate limiter –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    test_invite_token_generation_and_validation()
    test_rate_limiter()
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã InviteService –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
