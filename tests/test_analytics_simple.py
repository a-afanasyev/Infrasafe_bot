#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os
from datetime import datetime, date, timedelta
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from uk_management_bot.database.session import get_db


async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    
    try:
        db = next(get_db())
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = db.execute(text("SELECT 1 as test_value")).fetchone()
        
        if result and result[0] == 1:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            tables_to_check = ['shifts', 'users', 'requests']
            existing_tables = []
            
            for table_name in tables_to_check:
                try:
                    db.execute(text(f"SELECT 1 FROM {table_name} LIMIT 1"))
                    existing_tables.append(table_name)
                    print(f"  ‚úì –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–∞–π–¥–µ–Ω–∞")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}/{len(tables_to_check)}")
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            for table in existing_tables:
                try:
                    count_result = db.execute(text(f"SELECT COUNT(*) FROM {table}")).fetchone()
                    count = count_result[0] if count_result else 0
                    print(f"  üìà {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª—è {table}: {e}")
            
            db.close()
            return True
            
        else:
            print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


async def test_analytics_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    files_to_check = [
        'uk_management_bot/services/shift_analytics.py',
        'uk_management_bot/services/metrics_manager.py',
        'uk_management_bot/services/recommendation_engine.py'
    ]
    
    existing_files = []
    
    for file_path in files_to_check:
        if os.path.exists(f'/app/{file_path}'):
            existing_files.append(file_path)
            print(f"  ‚úÖ {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                size = os.path.getsize(f'/app/{file_path}')
                print(f"    üì¶ –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
        else:
            print(f"  ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(existing_files)}/{len(files_to_check)}")
    return len(existing_files) == len(files_to_check)


async def test_import_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    import_results = {}
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        from uk_management_bot.database.session import SessionLocal, Base
        import_results['database_session'] = True
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SessionLocal, Base")
    except Exception as e:
        import_results['database_session'] = False
        print(f"  ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    try:
        from uk_management_bot.database.models.shift import Shift
        from uk_management_bot.database.models.user import User
        import_results['models'] = True
        print("  ‚úÖ –ú–æ–¥–µ–ª–∏: Shift, User")
    except Exception as e:
        import_results['models'] = False
        print(f"  ‚ùå –ú–æ–¥–µ–ª–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        from uk_management_bot.services.shift_planning_service import ShiftPlanningService
        import_results['shift_planning'] = True
        print("  ‚úÖ ShiftPlanningService")
    except Exception as e:
        import_results['shift_planning'] = False
        print(f"  ‚ùå ShiftPlanningService: {e}")
    
    successful_imports = sum(1 for result in import_results.values() if result)
    total_imports = len(import_results)
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}/{total_imports}")
    return successful_imports >= total_imports - 1  # –î–æ–ø—É—Å–∫–∞–µ–º 1 –Ω–µ—É–¥–∞—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç


async def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω
        from uk_management_bot.database.models.shift import Shift
        shifts_count = db.query(Shift).count()
        print(f"  üìä –í—Å–µ–≥–æ —Å–º–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {shifts_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from uk_management_bot.database.models.user import User
        users_count = db.query(User).count()
        print(f"  üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–º–µ–Ω
        from uk_management_bot.services.shift_planning_service import ShiftPlanningService
        planner = ShiftPlanningService(db)
        print("  ‚úÖ ShiftPlanningService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è
        gaps = planner.get_coverage_gaps(
            start_date=date.today() - timedelta(days=7),
            end_date=date.today()
        )
        print(f"  üìà –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–æ–∫—Ä—ã—Ç–∏–∏: {len(gaps)}")
        
        db.close()
        
        print("  ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    test_results = {}
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    test_results['database'] = await test_database_connection()
    
    # –¢–µ—Å—Ç 2: –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    test_results['files'] = await test_analytics_files()
    
    # –¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç—ã
    test_results['imports'] = await test_import_basic()
    
    # –¢–µ—Å—Ç 4: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_results['functionality'] = await test_basic_functionality()
    
    # –°–≤–æ–¥–∫–∞
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    successful_tests = sum(1 for result in test_results.values() if result)
    total_tests = len(test_results)
    
    for test_name, result in test_results.items():
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –ù–ï–£–î–ê–ß–ê"
        print(f"  {test_name.upper()}: {status}")
    
    success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    if success_rate >= 75:
        print("  üéâ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return 0
    elif success_rate >= 50:
        print("  üëç –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        return 0
    else:
        print("  ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))