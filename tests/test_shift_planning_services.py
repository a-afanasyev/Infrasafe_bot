#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω
"""

import sys
import os
from datetime import date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/andreyafanasyev/Library/Mobile Documents/com~apple~CloudDocs/Code/UK')

def test_services():
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from uk_management_bot.services.shift_planning_service import ShiftPlanningService
        from uk_management_bot.services.template_manager import TemplateManager
        from uk_management_bot.services.workload_predictor import WorkloadPredictor
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º mock —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockDB:
            def query(self, *args): 
                return MockQuery()
            def add(self, *args): 
                pass
            def commit(self): 
                pass
            def rollback(self): 
                pass
            def refresh(self, *args): 
                pass
        
        class MockQuery:
            def filter(self, *args): 
                return self
            def first(self): 
                return None
            def all(self): 
                return []
            def count(self): 
                return 0
            def order_by(self, *args): 
                return self
            def with_entities(self, *args): 
                return self
            def scalar(self): 
                return 0
        
        mock_db = MockDB()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        planning_service = ShiftPlanningService(mock_db)
        template_manager = TemplateManager(mock_db)
        workload_predictor = WorkloadPredictor(mock_db)
        
        print("‚úÖ ShiftPlanningService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ TemplateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω") 
        print("‚úÖ WorkloadPredictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
        predefined = template_manager.get_predefined_templates()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(predefined)} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:")
        for key, template in predefined.items():
            print(f"  - {key}: {template['name']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
        tomorrow = date.today() + timedelta(days=1)
        prediction = workload_predictor.predict_daily_requests(tomorrow)
        
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {tomorrow}:")
        print(f"  - –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—è–≤–∫–∏: {prediction.predicted_requests}")
        print(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.confidence_level}")
        print(f"  - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–º–µ–Ω—ã: {prediction.recommended_shifts}")
        print(f"  - –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã: {prediction.peak_hours}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        print("\nüå§Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫...")
        adjusted, factors = workload_predictor.seasonal_adjustments(10, tomorrow)
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ 10:")
        print(f"  - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {adjusted}")
        print(f"  - –§–∞–∫—Ç–æ—Ä—ã: {factors}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        patterns = workload_predictor.analyze_historical_patterns(30)
        print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞ 30 –¥–Ω–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–º–µ–Ω–∞–º
        print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–º–µ–Ω–∞–º...")
        recommendations = workload_predictor.recommend_shift_count(tomorrow)
        if 'error' not in recommendations:
            print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ {tomorrow}:")
            rec = recommendations.get('recommendations', {})
            print(f"  - –ú–∏–Ω–∏–º—É–º —Å–º–µ–Ω: {rec.get('minimum_shifts', 0)}")
            print(f"  - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ —Å–º–µ–Ω: {rec.get('optimal_shifts', 0)}")
            print(f"  - –ú–∞–∫—Å–∏–º—É–º —Å–º–µ–Ω: {rec.get('maximum_shifts', 0)}")
        
        print("\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
        print("  - ShiftPlanningService: 430 —Å—Ç—Ä–æ–∫")
        print("  - TemplateManager: 560 —Å—Ç—Ä–æ–∫") 
        print("  - WorkloadPredictor: 730 —Å—Ç—Ä–æ–∫")
        print("  - –û–±—â–∏–π –æ–±—ä–µ–º: 1720 —Å—Ç—Ä–æ–∫")
        print("\n‚ú® –≠–¢–ê–ü 2 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_services()
    sys.exit(0 if success else 1)