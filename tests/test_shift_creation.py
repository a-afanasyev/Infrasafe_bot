"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
"""

import os
import sys
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uk_management_bot.database.session import SessionLocal
from uk_management_bot.services.shift_planning_service import ShiftPlanningService

def test_shift_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    
    db = SessionLocal()
    try:
        shift_service = ShiftPlanningService(db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É –∏–∑ —à–∞–±–ª–æ–Ω–∞ "–¥–Ω–µ–≤–Ω–æ–π" (id=2) –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        print(f"üß™ –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É –∏–∑ —à–∞–±–ª–æ–Ω–∞ '–¥–Ω–µ–≤–Ω–æ–π' (id=2) –Ω–∞ {tomorrow}...")
        
        created_shifts = shift_service.create_shift_from_template(
            template_id=2,
            target_date=tomorrow,
            executor_ids=None  # –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        )
        
        if created_shifts:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_shifts)} —Å–º–µ–Ω:")
            for shift in created_shifts:
                print(f"  - –°–º–µ–Ω–∞ ID {shift.id}: {shift.planned_start_time} - {shift.planned_end_time}")
                print(f"    –°—Ç–∞—Ç—É—Å: {shift.status}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {shift.user_id}")
        else:
            print("‚ùå –°–º–µ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã –≤ –±–∞–∑–µ...")
        
        from uk_management_bot.database.models.shift import Shift
        from sqlalchemy import func
        
        shifts_on_date = db.query(Shift).filter(
            func.date(Shift.planned_start_time) == tomorrow
        ).all()
        
        print(f"–°–º–µ–Ω—ã –Ω–∞ {tomorrow}: {len(shifts_on_date)}")
        for shift in shifts_on_date:
            print(f"  üìÖ –°–º–µ–Ω–∞ ID {shift.id}: {shift.planned_start_time} - {shift.planned_end_time}")
            print(f"    –°—Ç–∞—Ç—É—Å: {shift.status}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {shift.user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_shift_creation()