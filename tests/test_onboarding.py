"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import pytest
import json
from unittest.mock import AsyncMock, MagicMock
from aiogram.types import Message, Contact, User as TelegramUser
from aiogram.fsm.context import FSMContext
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from uk_management_bot.database.session import Base
from uk_management_bot.database.models.user import User
from uk_management_bot.handlers.onboarding import (
    start_phone_input, process_contact, process_manual_phone, 
    process_home_address, complete_onboarding, OnboardingStates
)

# –°–æ–∑–¥–∞–µ–º in-memory –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
engine = create_engine("sqlite:///:memory:")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture
def db_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    Base.metadata.create_all(bind=engine)
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        Base.metadata.drop_all(bind=engine)

@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç Message"""
    user = TelegramUser(id=123456789, is_bot=False, first_name="Test", language_code="ru")
    message = MagicMock(spec=Message)
    message.from_user = user
    message.text = None
    message.contact = None
    message.answer = AsyncMock()
    return message

@pytest.fixture
def mock_state():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç FSMContext"""
    state = MagicMock(spec=FSMContext)
    state.set_state = AsyncMock()
    state.clear = AsyncMock()
    state.update_data = AsyncMock()
    return state

@pytest.fixture
def sample_user(db_session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="Test",
        last_name="User",
        status="pending"
    )
    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)
    return user

@pytest.mark.asyncio
async def test_start_phone_input(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
    
    await start_phone_input(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    assert "—Ç–µ–ª–µ—Ñ–æ–Ω–∞" in call_args[0][0] or "telefon" in call_args[0][0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    mock_state.set_state.assert_called_once_with(OnboardingStates.waiting_for_phone)

@pytest.mark.asyncio
async def test_process_contact(mock_message, mock_state, db_session, sample_user):
    """
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã.
    """
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact = MagicMock(spec=Contact)
    contact.phone_number = "998901234567"
    mock_message.contact = contact

    await process_contact(mock_message, mock_state, db_session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone == "+998901234567"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    assert mock_message.answer.call_count >= 1  # –û–ë–ù–û–í–õ–ï–ù–û: –º–∏–Ω–∏–º—É–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏–ª–∏ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    # –ù–æ–≤—ã–π flow –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ waiting_for_document_type –∏–ª–∏ waiting_for_yard_selection
    if mock_state.set_state.called:
        state_arg = mock_state.set_state.call_args[0][0]
        assert state_arg in [OnboardingStates.waiting_for_document_type, OnboardingStates.waiting_for_yard_selection]

@pytest.mark.asyncio
async def test_process_manual_phone_valid(mock_message, mock_state, db_session, sample_user):
    """
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã.
    """
    mock_message.text = "+998901234567"

    await process_manual_phone(mock_message, mock_state, db_session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone == "+998901234567"

    # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏–ª–∏ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã
    if mock_state.set_state.called:
        state_arg = mock_state.set_state.call_args[0][0]
        assert state_arg in [OnboardingStates.waiting_for_document_type, OnboardingStates.waiting_for_yard_selection]

@pytest.mark.asyncio
async def test_process_manual_phone_invalid(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "123"

    await process_manual_phone(mock_message, mock_state, db_session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone is None

    # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    error_text = call_args[0][0].lower()
    assert "—Ñ–æ—Ä–º–∞—Ç" in error_text or "format" in error_text or "invalid" in error_text or "phone" in error_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    mock_state.set_state.assert_not_called()

@pytest.mark.asyncio
async def test_process_manual_phone_cancel(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "‚ùå –û—Ç–º–µ–Ω–∞"
    
    await process_manual_phone(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()

@pytest.mark.asyncio
async def test_process_home_address_deprecated(mock_message, mock_state, db_session, sample_user):
    """
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ—Å—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–¥—Ä–µ—Å–∞.
    –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä, —Å—Ç–∞—Ä—ã–π handler –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    """
    sample_user.phone = "+998901234567"
    db_session.commit()

    mock_message.text = "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123"

    await process_home_address(mock_message, mock_state, db_session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ deprecated
    mock_message.answer.assert_called()
    call_args = mock_message.answer.call_args[0][0]
    assert "–æ–±–Ω–æ–≤–ª–µ–Ω–∞" in call_args.lower() or "—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫" in call_args.lower()

@pytest.mark.asyncio
async def test_apartment_selection_flow(mock_message, mock_state, db_session):
    """
    –ù–û–í–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∞–¥—Ä–µ—Å–æ–≤.
    """
    from uk_management_bot.database.models.yard import Yard
    from uk_management_bot.database.models.building import Building
    from uk_management_bot.database.models.apartment import Apartment

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="Test",
        phone="+998901234567",
        status="pending"
    )
    db_session.add(user)
    db_session.flush()

    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    yard = Yard(name="–¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–æ—Ä", is_active=True, created_by=user.id)
    db_session.add(yard)
    db_session.flush()

    building = Building(
        yard_id=yard.id,
        address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
        is_active=True,
        created_by=user.id
    )
    db_session.add(building)
    db_session.flush()

    apartment = Apartment(
        building_id=building.id,
        apartment_number="10",
        is_active=True,
        created_by=user.id
    )
    db_session.add(apartment)
    db_session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    assert apartment.id is not None
    assert apartment.full_address is not None

@pytest.mark.asyncio
async def test_complete_onboarding(mock_message, mock_state, db_session):
    """
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    from uk_management_bot.database.models.yard import Yard
    from uk_management_bot.database.models.building import Building
    from uk_management_bot.database.models.apartment import Apartment
    from uk_management_bot.database.models.user_apartment import UserApartment

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ legacy –ø–æ–ª–µ–π)
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="Test",
        last_name="User",
        phone="+998901234567",
        status="pending"
    )
    db_session.add(user)
    db_session.flush()

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    yard = Yard(name="–¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–æ—Ä", is_active=True, created_by=user.id)
    db_session.add(yard)
    db_session.flush()

    building = Building(
        yard_id=yard.id,
        address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123",
        is_active=True,
        created_by=user.id
    )
    db_session.add(building)
    db_session.flush()

    apartment = Apartment(
        building_id=building.id,
        apartment_number="10",
        is_active=True,
        created_by=user.id
    )
    db_session.add(apartment)
    db_session.flush()

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ (–æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è)
    user_apartment = UserApartment(
        user_id=user.id,
        apartment_id=apartment.id,
        status='approved',
        is_owner=True,
        is_primary=True
    )
    db_session.add(user_apartment)
    db_session.commit()
    db_session.refresh(user)

    await complete_onboarding(mock_message, mock_state, db_session, user)

    # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    message_text = call_args[0][0].lower()
    # –ú–æ–∂–µ—Ç –±—ã—Ç—å "–∑–∞–≤–µ—Ä—à–µ–Ω", "–∑–∞–ø–æ–ª–Ω–µ–Ω", "tugallandi" –∏–ª–∏ "completed"
    assert any(word in message_text for word in ["–∑–∞–≤–µ—Ä—à–µ–Ω", "–∑–∞–ø–æ–ª–Ω–µ–Ω", "tugallandi", "completed", "–ø—Ä–æ—Ñ–∏–ª—å"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
