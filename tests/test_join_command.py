"""
–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /join
"""
import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
import json

# –ú–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMessage:
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, text: str, user_id: int = 123456789):
        self.text = text
        self.from_user = MagicMock()
        self.from_user.id = user_id
        self.from_user.username = "testuser"
        self.from_user.first_name = "Test"
        self.from_user.last_name = "User"
        self.from_user.language_code = "ru"
        self.answer = AsyncMock()

class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self, telegram_id: int, roles: str = None, active_role: str = None):
        self.telegram_id = telegram_id
        self.roles = roles or '["applicant"]'
        self.active_role = active_role or "applicant"
        self.status = "pending"
        self.specialization = None

class MockInviteService:
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–≤–∞–π—Ç–æ–≤"""
    def __init__(self, db):
        self.db = db
        
    def validate_invite(self, token: str):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if token == "valid_token":
            return {
                "role": "executor",
                "created_by": 987654321,
                "specialization": "plumber,electrician",
                "nonce": "test_nonce_123",
                "expires_at": 9999999999
            }
        elif token == "expired_token":
            raise ValueError("Token has expired")
        elif token == "used_token":
            raise ValueError("Token already used")
        else:
            raise ValueError("Invalid token signature")
    
    def mark_nonce_used(self, nonce: str, user_id: int, invite_data: dict):
        """–û—Ç–º–µ—á–∞–µ—Ç nonce –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        pass

class MockAuthService:
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    def __init__(self, db):
        self.db = db
        
    async def process_invite_join(self, telegram_id: int, invite_data: dict, **kwargs):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∏–Ω–≤–∞–π—Ç—É"""
        return MockUser(
            telegram_id=telegram_id, 
            roles=f'["{invite_data["role"]}"]',
            active_role=invite_data["role"]
        )

class MockRateLimiter:
    """–ú–æ–∫ rate limiter"""
    @staticmethod
    def is_allowed(user_id: int):
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ user_id
        return user_id != 999999999  # —ç—Ç–æ—Ç ID –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    
    @staticmethod
    def get_remaining_time(user_id: int):
        return 300  # 5 –º–∏–Ω—É—Ç


def mock_get_text(key: str, language: str = "ru", **kwargs):
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    texts = {
        "invites.usage_help": "üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/join <—Ç–æ–∫–µ–Ω_–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è>`",
        "invites.invalid_token": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
        "invites.expired_token": "‚è∞ –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫",
        "invites.used_token": "üîí –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "invites.success_joined": "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–†–æ–ª—å: {role}\n–°—Ç–∞—Ç—É—Å: –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        "invites.rate_limited": "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.",
        "roles.executor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        "roles.applicant": "–ó–∞—è–≤–∏—Ç–µ–ª—å", 
        "roles.manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "specializations.plumber": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
        "specializations.electrician": "–≠–ª–µ–∫—Ç—Ä–∏–∫",
        "errors.unknown_error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }
    
    text = texts.get(key, key)
    if kwargs:
        return text.format(**kwargs)
    return text


def mock_get_main_keyboard_for_role(role: str, roles: list):
    """–ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    return f"keyboard_for_{role}"


@pytest.mark.asyncio
async def test_join_command_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /join"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏
    message = MockMessage("/join valid_token")
    db = MagicMock()
    
    # –ü–∞—Ç—á–∏–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with patch('uk_management_bot.handlers.auth.InviteService', MockInviteService), \
         patch('uk_management_bot.handlers.auth.AuthService', MockAuthService), \
         patch('uk_management_bot.handlers.auth.InviteRateLimiter', MockRateLimiter), \
         patch('uk_management_bot.handlers.auth.get_text', mock_get_text), \
         patch('uk_management_bot.handlers.auth.get_main_keyboard_for_role', mock_get_main_keyboard_for_role):
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        from uk_management_bot.handlers.auth import join_with_invite
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await join_with_invite(message, db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!" in call_args
        assert "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" in call_args
        assert "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" in call_args


@pytest.mark.asyncio
async def test_join_command_invalid_token():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    
    message = MockMessage("/join invalid_token")
    db = MagicMock()
    
    with patch('uk_management_bot.handlers.auth.InviteService', MockInviteService), \
         patch('uk_management_bot.handlers.auth.InviteRateLimiter', MockRateLimiter), \
         patch('uk_management_bot.handlers.auth.get_text', mock_get_text):
        
        from uk_management_bot.handlers.auth import join_with_invite
        
        await join_with_invite(message, db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω" in call_args


@pytest.mark.asyncio
async def test_join_command_expired_token():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    
    message = MockMessage("/join expired_token")
    db = MagicMock()
    
    with patch('uk_management_bot.handlers.auth.InviteService', MockInviteService), \
         patch('uk_management_bot.handlers.auth.InviteRateLimiter', MockRateLimiter), \
         patch('uk_management_bot.handlers.auth.get_text', mock_get_text):
        
        from uk_management_bot.handlers.auth import join_with_invite
        
        await join_with_invite(message, db)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "‚è∞ –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫" in call_args


@pytest.mark.asyncio
async def test_join_command_used_token():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    
    message = MockMessage("/join used_token")
    db = MagicMock()
    
    with patch('uk_management_bot.handlers.auth.InviteService', MockInviteService), \
         patch('uk_management_bot.handlers.auth.InviteRateLimiter', MockRateLimiter), \
         patch('uk_management_bot.handlers.auth.get_text', mock_get_text):
        
        from uk_management_bot.handlers.auth import join_with_invite
        
        await join_with_invite(message, db)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "üîí –¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" in call_args


@pytest.mark.asyncio
async def test_join_command_rate_limited():
    """–¢–µ—Å—Ç rate limiting"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π user_id –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    message = MockMessage("/join valid_token", user_id=999999999)
    db = MagicMock()
    
    with patch('uk_management_bot.handlers.auth.InviteRateLimiter', MockRateLimiter), \
         patch('uk_management_bot.handlers.auth.get_text', mock_get_text):
        
        from uk_management_bot.handlers.auth import join_with_invite
        
        await join_with_invite(message, db)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫" in call_args


@pytest.mark.asyncio
async def test_join_command_no_token():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
    
    message = MockMessage("/join")
    db = MagicMock()
    
    with patch('uk_management_bot.handlers.auth.get_text', mock_get_text):
        
        from uk_management_bot.handlers.auth import join_with_invite
        
        await join_with_invite(message, db)
        
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        
        assert "üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" in call_args


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    async def run_tests():
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /join...")
        
        await test_join_command_success()
        print("‚úÖ test_join_command_success - PASSED")
        
        await test_join_command_invalid_token()
        print("‚úÖ test_join_command_invalid_token - PASSED")
        
        await test_join_command_expired_token()
        print("‚úÖ test_join_command_expired_token - PASSED")
        
        await test_join_command_used_token()
        print("‚úÖ test_join_command_used_token - PASSED")
        
        await test_join_command_rate_limited()
        print("‚úÖ test_join_command_rate_limited - PASSED")
        
        await test_join_command_no_token()
        print("‚úÖ test_join_command_no_token - PASSED")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥—ã /join –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    
    asyncio.run(run_tests())
