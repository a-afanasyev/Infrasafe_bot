#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∫ –∏–º–ø–æ—Ä—Ç—É –≤ Google Sheets

–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª requests_export.csv –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "uk_management_bot"))

from integrations.simple_sheets_sync import SimpleSheetsSync
from database.session import get_db
from database.models.request import Request
from database.models.user import User


async def create_import_csv():
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Google Sheets")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    csv_file = "requests_export.csv"
    sync = SimpleSheetsSync("", csv_file)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    requests = db.query(Request).all()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ: {len(requests)}")
    
    if not requests:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = []
    
    for request in requests:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∏—Ç–µ–ª–µ
        applicant = db.query(User).filter(User.id == request.user_id).first()
        if applicant:
            applicant_name = f"{applicant.first_name or ''} {applicant.last_name or ''}".strip()
            if not applicant_name:
                applicant_name = f"User_{request.user_id}"
        else:
            applicant_name = f"User_{request.user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        executor_name = ""
        if request.executor_id:
            executor = db.query(User).filter(User.id == request.executor_id).first()
            if executor:
                executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
                if not executor_name:
                    executor_name = f"User_{request.executor_id}"
            else:
                executor_name = f"User_{request.executor_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        request_data = {
            'id': request.id,
            'created_at': request.created_at.strftime("%Y-%m-%d %H:%M:%S") if request.created_at else '',
            'status': request.status,
            'category': request.category,
            'address': request.address,
            'description': request.description,
            'urgency': request.urgency,
            'applicant_id': request.user_id,
            'applicant_name': applicant_name,
            'executor_id': request.executor_id,
            'executor_name': executor_name,
            'assigned_at': '',  # –ü–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
            'completed_at': request.completed_at.strftime("%Y-%m-%d %H:%M:%S") if request.completed_at else '',
            'comments': request.notes or '',
            'photo_urls': ','.join(request.media_files) if request.media_files else ''
        }
        
        export_data.append(request_data)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(export_data)} –∑–∞—è–≤–æ–∫ –≤ CSV...")
    success = await sync.export_requests_to_csv(export_data)
    
    if success:
        print("‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        csv_path = Path(csv_file)
        if csv_path.exists():
            file_size = csv_path.stat().st_size
            print(f"\nüìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
            print(f"   - –ò–º—è —Ñ–∞–π–ª–∞: {csv_file}")
            print(f"   - –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            print(f"   - –ü—É—Ç—å: {csv_path.absolute()}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            with open(csv_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                print(f"   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
                
                if len(lines) > 0:
                    print(f"   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0].strip()}")
                
                if len(lines) > 1:
                    print(f"   - –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞: {lines[1].strip()[:100]}...")
        
        print(f"\nüéØ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É!")
        print(f"üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets")
        print(f"   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        print(f"   3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª {csv_file}")
        print(f"   4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ GOOGLE_SHEETS_IMPORT_GUIDE.md")
        
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞")
        return False


async def show_import_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É"""
    print(f"\nüìã –ö–†–ê–¢–ö–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ú–ü–û–†–¢–£:")
    print("=" * 50)
    
    print(f"1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ Google Sheets")
    print(f"   https://sheets.google.com")
    
    print(f"\n2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
    print(f"   - –ù–∞–∂–º–∏—Ç–µ '+' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
    print(f"   - –ù–∞–∑–æ–≤–∏—Ç–µ: 'UK Management - –ó–∞—è–≤–∫–∏'")
    
    print(f"\n3Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV —Ñ–∞–π–ª")
    print(f"   - –§–∞–π–ª ‚Üí –ò–º–ø–æ—Ä—Ç ‚Üí –ó–∞–≥—Ä—É–∑–∏—Ç—å")
    print(f"   - –í—ã–±–µ—Ä–∏—Ç–µ: {Path('requests_export.csv').absolute()}")
    print(f"   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ó–∞–ø—è—Ç–∞—è, UTF-8")
    
    print(f"\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print(f"   - –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ")
    print(f"   - –î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞–µ–º—ã")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print(f"\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: GOOGLE_SHEETS_IMPORT_GUIDE.md")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        success = await create_import_csv()
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            await show_import_instructions()
            
            print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª {Path('requests_export.csv').absolute()} —Å–æ–∑–¥–∞–Ω")
            print(f"üìä –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ Google Sheets")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV —Ñ–∞–π–ª")
            print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ CSV
    asyncio.run(main())

