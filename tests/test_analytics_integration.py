#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É ShiftAnalytics, MetricsManager –∏ RecommendationEngine
"""

import asyncio
import sys
import os
from datetime import datetime, date, timedelta
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from uk_management_bot.database.session import get_db
from uk_management_bot.services.shift_analytics import ShiftAnalytics
from uk_management_bot.services.metrics_manager import MetricsManager
from uk_management_bot.services.recommendation_engine import RecommendationEngine
from uk_management_bot.services.shift_planning_service import ShiftPlanningService


class AnalyticsIntegrationTest:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.db = None
        self.analytics = None
        self.metrics = None
        self.recommendation_engine = None
        self.planning_service = None
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            self.db = next(get_db())
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            self.analytics = ShiftAnalytics(self.db)
            self.metrics = MetricsManager(self.db)
            self.recommendation_engine = RecommendationEngine(self.db)
            self.planning_service = ShiftPlanningService(self.db)
            
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_shift_analytics(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç ShiftAnalytics"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ShiftAnalytics...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–º–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from uk_management_bot.database.models.shift import Shift
            shifts = self.db.query(Shift).limit(5).all()
            
            if shifts:
                shift_scores = []
                for shift in shifts[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 3 —Å–º–µ–Ω–∞—Ö
                    try:
                        score = await self.analytics.calculate_shift_efficiency_score(shift.id)
                        if score:
                            shift_scores.append(score)
                            print(f"    ‚úì –°–º–µ–Ω–∞ {shift.id}: –æ—Ü–µ–Ω–∫–∞ {score.get('overall_score', 'N/A')}")
                    except Exception as e:
                        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã {shift.id}: {e}")
                
                results['shift_efficiency_tests'] = len(shift_scores)
                results['average_score'] = sum(s.get('overall_score', 0) for s in shift_scores) / len(shift_scores) if shift_scores else 0
            else:
                print("    ‚ö†Ô∏è –ù–µ—Ç —Å–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                results['shift_efficiency_tests'] = 0
            
            # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
            try:
                trends = await self.analytics.get_performance_trends(
                    start_date=date.today() - timedelta(days=30),
                    end_date=date.today()
                )
                results['trends_analysis'] = 'success' if trends else 'no_data'
                print(f"    ‚úì –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: {len(trends.get('daily_trends', []))} –¥–Ω–µ–π")
            except Exception as e:
                results['trends_analysis'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            
            # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç KPI
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ KPI")
            try:
                kpis = await self.analytics.calculate_kpis(
                    start_date=date.today() - timedelta(days=7),
                    end_date=date.today()
                )
                results['kpi_calculation'] = 'success' if kpis else 'no_data'
                print(f"    ‚úì KPI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(kpis.get('kpis', {}))} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            except Exception as e:
                results['kpi_calculation'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ KPI: {e}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ShiftAnalytics: {e}")
            return {'error': str(e)}
    
    async def test_metrics_manager(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç MetricsManager"""
        print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetricsManager...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
            try:
                period_metrics = await self.metrics.calculate_period_metrics(
                    start_date=date.today() - timedelta(days=7),
                    end_date=date.today()
                )
                results['period_metrics'] = 'success' if period_metrics else 'no_data'
                print(f"    ‚úì –ü–µ—Ä–∏–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {len(period_metrics.get('metrics', {}))} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            except Exception as e:
                results['period_metrics'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            
            # –¢–µ—Å—Ç 2: –î–∞—à–±–æ—Ä–¥ –º–µ—Ç—Ä–∏–∫
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –º–µ—Ç—Ä–∏–∫")
            try:
                dashboard = await self.metrics.get_metrics_dashboard()
                results['dashboard'] = 'success' if dashboard else 'no_data'
                print(f"    ‚úì –î–∞—à–±–æ—Ä–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(dashboard.get('sections', []))} —Å–µ–∫—Ü–∏–π")
            except Exception as e:
                results['dashboard'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            
            # –¢–µ—Å—Ç 3: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫")
            try:
                historical = await self.metrics.get_historical_metrics(
                    metric_names=['efficiency_score', 'completion_rate'],
                    days_back=14
                )
                results['historical_metrics'] = 'success' if historical else 'no_data'
                print(f"    ‚úì –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏: {len(historical.get('metrics', {}))} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            except Exception as e:
                results['historical_metrics'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MetricsManager: {e}")
            return {'error': str(e)}
    
    async def test_recommendation_engine(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç RecommendationEngine"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RecommendationEngine...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            try:
                recommendations = await self.recommendation_engine.generate_comprehensive_recommendations(
                    period_days=7
                )
                results['comprehensive_recommendations'] = 'success' if recommendations else 'no_data'
                print(f"    ‚úì –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations.get('recommendations', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                results['comprehensive_recommendations'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            
            # –¢–µ—Å—Ç 2: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–º–µ–Ω
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–º–µ–Ω")
            try:
                shift_recommendations = await self.recommendation_engine.get_shift_optimization_recommendations(
                    target_date=date.today()
                )
                results['shift_optimization'] = 'success' if shift_recommendations else 'no_data'
                print(f"    ‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(shift_recommendations.get('recommendations', []))} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            except Exception as e:
                results['shift_optimization'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            try:
                performance_forecast = await self.recommendation_engine.predict_performance_trends(
                    days_ahead=7
                )
                results['performance_forecast'] = 'success' if performance_forecast else 'no_data'
                print(f"    ‚úì –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(performance_forecast.get('predictions', []))} –¥–Ω–µ–π")
            except Exception as e:
                results['performance_forecast'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RecommendationEngine: {e}")
            return {'error': str(e)}
    
    async def test_planning_service_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ ShiftPlanningService"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ShiftPlanningService...")
        results = {}
        
        try:
            # –¢–µ—Å—Ç 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            try:
                analytics = await self.planning_service.get_comprehensive_analytics(
                    start_date=date.today() - timedelta(days=7),
                    end_date=date.today(),
                    include_recommendations=True
                )
                results['comprehensive_analytics'] = 'success' if analytics else 'no_data'
                print(f"    ‚úì –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {len(analytics.get('recommendations', []))} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            except Exception as e:
                results['comprehensive_analytics'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            
            # –¢–µ—Å—Ç 2: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            try:
                optimization = await self.planning_service.get_optimization_recommendations(
                    target_date=date.today()
                )
                results['optimization_recommendations'] = 'success' if optimization else 'no_data'
                print(f"    ‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(optimization.get('optimization_suggestions', []))} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            except Exception as e:
                results['optimization_recommendations'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            print("  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
            try:
                workload_prediction = await self.planning_service.predict_workload(
                    target_date=date.today() + timedelta(days=1),
                    days_ahead=5
                )
                results['workload_prediction'] = 'success' if workload_prediction else 'no_data'
                print(f"    ‚úì –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏: {len(workload_prediction.get('daily_predictions', []))} –¥–Ω–µ–π")
            except Exception as e:
                results['workload_prediction'] = f'error: {str(e)}'
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return {'error': str(e)}
    
    async def run_full_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("=" * 80)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.setup():
            return {'error': '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {}
        }
        
        try:
            # –¢–µ—Å—Ç 1: ShiftAnalytics
            results['tests']['shift_analytics'] = await self.test_shift_analytics()
            
            # –¢–µ—Å—Ç 2: MetricsManager
            results['tests']['metrics_manager'] = await self.test_metrics_manager()
            
            # –¢–µ—Å—Ç 3: RecommendationEngine
            results['tests']['recommendation_engine'] = await self.test_recommendation_engine()
            
            # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ShiftPlanningService
            results['tests']['planning_service_integration'] = await self.test_planning_service_integration()
            
            # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("\n" + "=" * 80)
            print("üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("=" * 80)
            
            total_tests = 0
            successful_tests = 0
            
            for service, test_results in results['tests'].items():
                print(f"\nüîß {service.upper()}:")
                for test_name, test_result in test_results.items():
                    total_tests += 1
                    if test_result == 'success':
                        successful_tests += 1
                        status = "‚úÖ –£–°–ü–ï–•"
                    elif 'error:' in str(test_result):
                        status = "‚ùå –û–®–ò–ë–ö–ê"
                    else:
                        status = "‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
                    
                    print(f"  ‚Ä¢ {test_name}: {status}")
                    if 'error:' in str(test_result):
                        print(f"    {test_result}")
            
            success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
            
            print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
            print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
            print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            
            if success_rate >= 80:
                print("  üéâ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            elif success_rate >= 60:
                print("  üëç –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")
            else:
                print("  ‚ö†Ô∏è  –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            
            results['summary'] = {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'success_rate': success_rate,
                'status': 'excellent' if success_rate >= 80 else 'good' if success_rate >= 60 else 'needs_work'
            }
            
            return results
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            results['critical_error'] = str(e)
            return results
        
        finally:
            if self.db:
                self.db.close()
                print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_runner = AnalyticsIntegrationTest()
    results = await test_runner.run_full_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'critical_error' in results:
        sys.exit(1)
    elif results.get('summary', {}).get('success_rate', 0) < 50:
        sys.exit(1)
    else:
        sys.exit(0)


if __name__ == "__main__":
    asyncio.run(main())