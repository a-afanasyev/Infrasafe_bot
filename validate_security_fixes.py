#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ pytest –∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import os
import sys
import tempfile
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'uk_management_bot'))

def test_admin_password_production():
    """–¢–µ—Å—Ç 1: –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω –≤ production"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
    
    try:
        with patch.dict(os.environ, {
            'DEBUG': 'false',
            'ADMIN_PASSWORD': '12345'
        }):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º settings
            if 'config.settings' in sys.modules:
                del sys.modules['config.settings']
            
            try:
                from config.settings import settings
                print("‚ùå –û–®–ò–ë–ö–ê: –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω –≤ production")
                return False
            except ValueError as e:
                if "Default ADMIN_PASSWORD '12345' is not allowed" in str(e):
                    print("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_invite_secret_production():
    """–¢–µ—Å—Ç 2: INVITE_SECRET –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ production"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å INVITE_SECRET...")
    
    try:
        with patch.dict(os.environ, {
            'DEBUG': 'false',
            'ADMIN_PASSWORD': 'secure_password'
        }, clear=True):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º settings
            if 'config.settings' in sys.modules:
                del sys.modules['config.settings']
            
            try:
                from config.settings import settings
                print("‚ùå –û–®–ò–ë–ö–ê: INVITE_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –≤ production")
                return False
            except ValueError as e:
                if "INVITE_SECRET must be set in production environment" in str(e):
                    print("‚úÖ INVITE_SECRET –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è")
                    return True
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_valid_production_config():
    """–¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–Ω–∞—è production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—É—é production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    try:
        with patch.dict(os.environ, {
            'DEBUG': 'false',
            'ADMIN_PASSWORD': 'secure_password_123',
            'INVITE_SECRET': 'very_long_secure_secret_key',
            'BOT_TOKEN': '123456789:ABCDEF'
        }):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º settings
            if 'config.settings' in sys.modules:
                del sys.modules['config.settings']
            
            from config.settings import settings
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            assert settings.ADMIN_PASSWORD == 'secure_password_123'
            assert settings.INVITE_SECRET == 'very_long_secure_secret_key'
            assert not settings.DEBUG
            
            print("‚úÖ –í–∞–ª–∏–¥–Ω–∞—è production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {e}")
        return False

def test_development_fallback():
    """–¢–µ—Å—Ç 4: Development fallback —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("üõ†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º development fallback...")
    
    try:
        with patch.dict(os.environ, {
            'DEBUG': 'true'
        }, clear=True):
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º settings
            if 'config.settings' in sys.modules:
                del sys.modules['config.settings']
            
            from config.settings import settings
            
            # –í development –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å fallback –ø–∞—Ä–æ–ª—å
            assert settings.ADMIN_PASSWORD == "dev_password_change_me"
            assert settings.DEBUG
            
            print("‚úÖ Development fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ development fallback: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π...")
    
    try:
        # Redis rate limiter
        from utils.redis_rate_limiter import is_rate_limited, InMemoryRateLimiter
        print("‚úÖ Redis rate limiter –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # Structured logger  
        from utils.structured_logger import get_logger, setup_structured_logging
        print("‚úÖ Structured logger –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # Health check
        from handlers.health import get_health_status, router
        print("‚úÖ Health check handlers –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_files_exist():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    files_to_check = [
        'uk_management_bot/production.env.example',
        'PRODUCTION_DEPLOYMENT.md',
        'uk_management_bot/utils/redis_rate_limiter.py',
        'uk_management_bot/utils/structured_logger.py',
        'uk_management_bot/handlers/health.py'
    ]
    
    all_exist = True
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} –ù–ï –ù–ê–ô–î–ï–ù")
            all_exist = False
    
    return all_exist

def test_requirements_updated():
    """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt"""
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt...")
    
    try:
        with open('requirements.txt', 'r') as f:
            content = f.read()
        
        if 'redis>=' in content and 'aioredis>=' in content:
            print("‚úÖ Redis –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ requirements.txt")
            return True
        else:
            print("‚ùå Redis –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ requirements.txt")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ requirements.txt: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üõ°Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    tests = [
        test_admin_password_production,
        test_invite_secret_production, 
        test_valid_production_config,
        test_development_fallback,
        test_imports,
        test_files_exist,
        test_requirements_updated
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            print()
    
    print("=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
