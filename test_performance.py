"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–∞–π—Ç–æ–≤
"""
import os
import sys
import time
import tempfile
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.test')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.abspath('.'))

from database.session import Base
from database.models.user import User
from database.models.audit import AuditLog
from services.invite_service import InviteService, InviteRateLimiter
from services.auth_service import AuthService
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


def test_invite_generation_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    db_fd, db_path = tempfile.mkstemp(suffix='.db')
    os.close(db_fd)
    
    try:
        engine = create_engine(f"sqlite:///{db_path}", echo=False)
        Base.metadata.create_all(engine)
        
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        invite_service = InviteService(db)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        tokens = []
        
        for i in range(100):
            token = invite_service.generate_invite(
                role="applicant",
                created_by=123456789,
                hours=24
            )
            tokens.append(token)
        
        generation_time = time.time() - start_time
        
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 100 —Ç–æ–∫–µ–Ω–æ–≤: {generation_time:.3f} —Å–µ–∫ ({100/generation_time:.1f} —Ç–æ–∫–µ–Ω/—Å–µ–∫)")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        for token in tokens:
            invite_data = invite_service.validate_invite(token)
            assert invite_data["role"] == "applicant"
        
        validation_time = time.time() - start_time
        
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 100 —Ç–æ–∫–µ–Ω–æ–≤: {validation_time:.3f} —Å–µ–∫ ({100/validation_time:.1f} —Ç–æ–∫–µ–Ω/—Å–µ–∫)")
        
        # –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        total_time = generation_time + validation_time
        print(f"‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –≤–∞–ª–∏–¥–∞—Ü–∏—è): {total_time:.3f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –±—ã—Å—Ç—Ä–æ
        assert generation_time < 5.0, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π"
        assert validation_time < 5.0, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ–π"
        
        db.close()
        
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


def test_rate_limiter_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ rate limiter"""
    
    # –û—á–∏—â–∞–µ–º storage
    InviteRateLimiter._storage.clear()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    start_time = time.time()
    
    for user_id in range(10000, 11000):  # 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ö–∞–∂–¥—ã–π –¥–µ–ª–∞–µ—Ç –ø–æ 2 –ø–æ–ø—ã—Ç–∫–∏
        InviteRateLimiter.is_allowed(user_id)
        InviteRateLimiter.is_allowed(user_id)
    
    rate_limit_time = time.time() - start_time
    
    print(f"‚úÖ Rate limiting –¥–ª—è 2000 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {rate_limit_time:.3f} —Å–µ–∫")
    print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {2000/rate_limit_time:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä storage
    storage_size = len(InviteRateLimiter._storage)
    print(f"‚úÖ –†–∞–∑–º–µ—Ä storage: {storage_size} –∑–∞–ø–∏—Å–µ–π")
    
    assert rate_limit_time < 2.0, "Rate limiting –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º"
    assert storage_size == 1000, "Storage –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"


async def test_database_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    db_fd, db_path = tempfile.mkstemp(suffix='.db')
    os.close(db_fd)
    
    try:
        engine = create_engine(f"sqlite:///{db_path}", echo=False)
        Base.metadata.create_all(engine)
        
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        invite_service = InviteService(db)
        auth_service = AuthService(db)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∏–Ω–≤–∞–π—Ç—ã
        start_time = time.time()
        
        for i in range(50):
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            token = invite_service.generate_invite(
                role="executor",
                created_by=999999999,
                specialization="plumber",
                hours=24
            )
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            invite_data = invite_service.validate_invite(token)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await auth_service.process_invite_join(
                telegram_id=1000000 + i,
                invite_data=invite_data,
                username=f"user{i}",
                first_name=f"User{i}",
                last_name="Test"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            invite_service.mark_nonce_used(
                invite_data["nonce"],
                user.telegram_id,
                invite_data
            )
        
        db_time = time.time() - start_time
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∏–Ω–≤–∞–π—Ç—ã: {db_time:.3f} —Å–µ–∫")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {50/db_time:.1f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        users_count = db.query(User).count()
        audit_count = db.query(AuditLog).count()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {audit_count}")
        
        assert users_count == 50, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        assert audit_count >= 100, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ + –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)"
        assert db_time < 30.0, "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–º–∏"
        
        db.close()
        
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


async def test_concurrent_operations():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    db_fd, db_path = tempfile.mkstemp(suffix='.db')
    os.close(db_fd)
    
    try:
        engine = create_engine(f"sqlite:///{db_path}", echo=False)
        Base.metadata.create_all(engine)
        
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        invite_service = InviteService(db)
        auth_service = AuthService(db)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º 10 —Ç–æ–∫–µ–Ω–æ–≤ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
        tokens = []
        for i in range(10):
            token = invite_service.generate_invite(
                role="applicant",
                created_by=888888888,
                hours=24
            )
            tokens.append(token)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
        for i, token in enumerate(tokens):
            invite_data = invite_service.validate_invite(token)
            user = await auth_service.process_invite_join(
                telegram_id=2000000 + i,
                invite_data=invite_data,
                username=f"fastuser{i}",
                first_name=f"Fast{i}",
                last_name="User"
            )
            invite_service.mark_nonce_used(
                invite_data["nonce"],
                user.telegram_id,
                invite_data
            )
        
        concurrent_time = time.time() - start_time
        
        print(f"‚úÖ 10 –±—ã—Å—Ç—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {concurrent_time:.3f} —Å–µ–∫")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {10/concurrent_time:.1f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º consistency
        users_count = db.query(User).count()
        assert users_count == 10, "–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        db.close()
        
    finally:
        if os.path.exists(db_path):
            os.unlink(db_path)


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–∞–π—Ç–æ–≤...")
    print("=" * 70)
    
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
    test_invite_generation_performance()
    
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ rate limiter...")
    test_rate_limiter_performance()
    
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î...")
    import asyncio
    asyncio.run(test_database_performance())
    
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    import asyncio
    asyncio.run(test_concurrent_operations())
    
    print("\n" + "=" * 70)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("\nüìä –í—ã–≤–æ–¥—ã:")
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤: –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤: –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å") 
    print("‚úÖ Rate limiting: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Ç—ã—Å—è—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚úÖ –†–∞–±–æ—Ç–∞ —Å –ë–î: –ø—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: stable performance")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –Ω–∞–≥—Ä—É–∑–∫–∞–º")
