#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

uk_bot_path = project_root / "uk_management_bot"
sys.path.append(str(uk_bot_path))

try:
    from uk_management_bot.database.session import SessionLocal
    from uk_management_bot.database.models.user import User
    from uk_management_bot.handlers.admin import open_admin_panel
    from uk_management_bot.keyboards.admin import get_manager_main_keyboard
    from uk_management_bot.utils.helpers import get_text
    import json
    
    def test_admin_panel_handler():
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == 48617336).first()
            
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} {user.last_name}")
            
            # –ü–∞—Ä—Å–∏—Ä—É–µ–º —Ä–æ–ª–∏
            roles = []
            if user.roles:
                try:
                    roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
                except:
                    roles = []
            
            active_role = user.active_role or "applicant"
            
            print(f"üìã –†–æ–ª–∏: {roles}")
            print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {active_role}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
            has_access = False
            if roles:
                has_access = any(role in ['admin', 'manager'] for role in roles)
            elif user.role in ['admin', 'manager']:
                has_access = True
            
            print(f"üîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                keyboard = get_manager_main_keyboard()
                print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            try:
                text = get_text("errors.permission_denied", language="ru")
                print(f"‚úÖ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
            print(f"roles = {roles}")
            print(f"active_role = {active_role}")
            print(f"has_access = {has_access}")
            
            if has_access:
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
            else:
                print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –¥–æ—Å—Ç—É–ø–∞")
            
            return has_access
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        finally:
            db.close()
    
    if __name__ == "__main__":
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        print("=" * 50)
        
        result = test_admin_panel_handler()
        
        print("=" * 50)
        if result:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å")
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç")
            
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
