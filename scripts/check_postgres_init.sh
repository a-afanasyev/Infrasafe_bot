#!/bin/bash

# UK Management Bot - PostgreSQL Initialization Check Script
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ PostgreSQL –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–π –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —á—Ç–æ –∏ SQLite

set -e

echo "üîç Checking PostgreSQL initialization for UK Management Bot..."

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
# =============================================================================

echo "‚è≥ Testing PostgreSQL connection..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
if ! pg_isready -U postgres -h localhost; then
    echo "‚ùå PostgreSQL is not ready"
    exit 1
fi

echo "‚úÖ PostgreSQL connection successful"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =============================================================================

echo "üîç Checking database..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö uk_management —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if ! psql -U postgres -lqt | cut -d \| -f 1 | grep -qw uk_management; then
    echo "‚ùå Database uk_management not found"
    exit 1
fi

echo "‚úÖ Database uk_management exists"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================================================================

echo "üë§ Checking user..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å uk_bot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if ! psql -U postgres -t -c "SELECT 1 FROM pg_roles WHERE rolname='uk_bot'" | grep -q 1; then
    echo "‚ùå User uk_bot not found"
    exit 1
fi

echo "‚úÖ User uk_bot exists"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================================================================

echo "üîê Testing user connection..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è uk_bot
if ! psql -U uk_bot -d uk_management -c "SELECT 'Connection test successful' as status;" > /dev/null 2>&1; then
    echo "‚ùå User uk_bot cannot connect to database"
    exit 1
fi

echo "‚úÖ User uk_bot can connect to database"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –†–ê–°–®–ò–†–ï–ù–ò–ô
# =============================================================================

echo "üîß Checking extensions..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
REQUIRED_EXTENSIONS=("uuid-ossp" "pg_trgm" "pg_stat_statements")

for ext in "${REQUIRED_EXTENSIONS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM pg_extension WHERE extname='$ext'" | grep -q 1; then
        echo "‚ùå Extension $ext not found"
        exit 1
    fi
    echo "‚úÖ Extension $ext is enabled"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –¢–ê–ë–õ–ò–¶ (–ö–ê–ö –í SQLITE)
# =============================================================================

echo "üìä Checking main tables (SQLite equivalent)..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (–∫–∞–∫ –≤ SQLite)
MAIN_TABLES=("users" "requests" "shifts" "ratings" "audit_logs")

for table in "${MAIN_TABLES[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.tables WHERE table_name='$table'" | grep -q 1; then
        echo "‚ùå Main table $table not found"
        exit 1
    fi
    echo "‚úÖ Main table $table exists"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ USERS
# =============================================================================

echo "üë• Checking users table structure..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã users (–∫–∞–∫ –≤ SQLite –º–æ–¥–µ–ª–∏)
REQUIRED_USER_COLUMNS=(
    "id" "telegram_id" "username" "first_name" "last_name" 
    "role" "roles" "active_role" "status" "language" 
    "phone" "address" "home_address" "apartment_address" 
    "yard_address" "address_type" "specialization" 
    "created_at" "updated_at"
)

for column in "${REQUIRED_USER_COLUMNS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.columns WHERE table_name='users' AND column_name='$column'" | grep -q 1; then
        echo "‚ùå Column $column not found in users table"
        exit 1
    fi
    echo "‚úÖ Column $column exists in users table"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ REQUESTS
# =============================================================================

echo "üìù Checking requests table structure..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã requests (–∫–∞–∫ –≤ SQLite –º–æ–¥–µ–ª–∏)
REQUIRED_REQUEST_COLUMNS=(
    "id" "user_id" "category" "status" "address" "description" 
    "apartment" "urgency" "media_files" "executor_id" 
    "notes" "completion_report" "completion_media" 
    "created_at" "updated_at" "completed_at"
)

for column in "${REQUIRED_REQUEST_COLUMNS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.columns WHERE table_name='requests' AND column_name='$column'" | grep -q 1; then
        echo "‚ùå Column $column not found in requests table"
        exit 1
    fi
    echo "‚úÖ Column $column exists in requests table"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ SHIFTS
# =============================================================================

echo "‚è∞ Checking shifts table structure..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã shifts (–∫–∞–∫ –≤ SQLite –º–æ–¥–µ–ª–∏)
REQUIRED_SHIFT_COLUMNS=(
    "id" "user_id" "start_time" "end_time" "status" 
    "notes" "created_at" "updated_at"
)

for column in "${REQUIRED_SHIFT_COLUMNS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.columns WHERE table_name='shifts' AND column_name='$column'" | grep -q 1; then
        echo "‚ùå Column $column not found in shifts table"
        exit 1
    fi
    echo "‚úÖ Column $column exists in shifts table"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ RATINGS
# =============================================================================

echo "‚≠ê Checking ratings table structure..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã ratings (–∫–∞–∫ –≤ SQLite –º–æ–¥–µ–ª–∏)
REQUIRED_RATING_COLUMNS=(
    "id" "request_id" "user_id" "rating" "review" "created_at"
)

for column in "${REQUIRED_RATING_COLUMNS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.columns WHERE table_name='ratings' AND column_name='$column'" | grep -q 1; then
        echo "‚ùå Column $column not found in ratings table"
        exit 1
    fi
    echo "‚úÖ Column $column exists in ratings table"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ AUDIT_LOGS
# =============================================================================

echo "üìã Checking audit_logs table structure..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã audit_logs (–∫–∞–∫ –≤ SQLite –º–æ–¥–µ–ª–∏)
REQUIRED_AUDIT_COLUMNS=(
    "id" "user_id" "action" "details" "ip_address" "created_at"
)

for column in "${REQUIRED_AUDIT_COLUMNS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.columns WHERE table_name='audit_logs' AND column_name='$column'" | grep -q 1; then
        echo "‚ùå Column $column not found in audit_logs table"
        exit 1
    fi
    echo "‚úÖ Column $column exists in audit_logs table"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í
# =============================================================================

echo "üîç Checking indexes..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
REQUIRED_INDEXES=(
    "idx_users_telegram_id" "idx_users_role" "idx_users_active_role" "idx_users_status"
    "idx_requests_user_id" "idx_requests_executor_id" "idx_requests_status" "idx_requests_category" "idx_requests_created_at"
    "idx_shifts_user_id" "idx_shifts_status" "idx_shifts_start_time"
    "idx_ratings_request_id" "idx_ratings_user_id" "idx_ratings_rating"
    "idx_audit_logs_user_id" "idx_audit_logs_action" "idx_audit_logs_created_at"
)

for index in "${REQUIRED_INDEXES[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM pg_indexes WHERE indexname='$index'" | grep -q 1; then
        echo "‚ùå Index $index not found"
        exit 1
    fi
    echo "‚úÖ Index $index exists"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –¢–†–ò–ì–ì–ï–†–û–í
# =============================================================================

echo "‚ö° Checking triggers..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è updated_at
REQUIRED_TRIGGERS=(
    "update_users_updated_at" "update_requests_updated_at" "update_shifts_updated_at"
)

for trigger in "${REQUIRED_TRIGGERS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.triggers WHERE trigger_name='$trigger'" | grep -q 1; then
        echo "‚ùå Trigger $trigger not found"
        exit 1
    fi
    echo "‚úÖ Trigger $trigger exists"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
# =============================================================================

echo "üîí Checking constraints..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
REQUIRED_CONSTRAINTS=(
    "check_rating_range" "check_request_status" "check_shift_status" 
    "check_user_status" "check_user_language"
)

for constraint in "${REQUIRED_CONSTRAINTS[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.check_constraints WHERE constraint_name='$constraint'" | grep -q 1; then
        echo "‚ùå Constraint $constraint not found"
        exit 1
    fi
    echo "‚úÖ Constraint $constraint exists"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
# =============================================================================

echo "üìä Checking monitoring tables..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω—ã
MONITORING_TABLES=("connection_log" "performance_stats")

for table in "${MONITORING_TABLES[@]}"; do
    if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.tables WHERE table_name='$table'" | grep -q 1; then
        echo "‚ùå Monitoring table $table not found"
        exit 1
    fi
    echo "‚úÖ Monitoring table $table exists"
done

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú
# =============================================================================

echo "üìÅ Checking schemas..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ö–µ–º–∞ audit —Å–æ–∑–¥–∞–Ω–∞
if ! psql -U postgres -d uk_management -t -c "SELECT 1 FROM information_schema.schemata WHERE schema_name='audit'" | grep -q 1; then
    echo "‚ùå Schema audit not found"
    exit 1
fi

echo "‚úÖ Schema audit exists"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê
# =============================================================================

echo "üîê Checking permissions..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è uk_bot
PERMISSIONS=$(psql -U postgres -d uk_management -t -c "
SELECT COUNT(*) FROM information_schema.table_privileges 
WHERE grantee='uk_bot' AND privilege_type='ALL PRIVILEGES'
")

if [ "$PERMISSIONS" -eq 0 ]; then
    echo "‚ùå User uk_bot has no table privileges"
    exit 1
fi

echo "‚úÖ User uk_bot has proper permissions"

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô
# =============================================================================

echo "üß™ Testing database operations..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
psql -U uk_bot -d uk_management -c "
CREATE TABLE IF NOT EXISTS test_table (
    id SERIAL PRIMARY KEY,
    name TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
psql -U uk_bot -d uk_management -c "
INSERT INTO test_table (name) VALUES ('test_data');
"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
RESULT=$(psql -U uk_bot -d uk_management -t -c "SELECT COUNT(*) FROM test_table;")

if [ "$RESULT" -eq 1 ]; then
    echo "‚úÖ Database operations test successful"
else
    echo "‚ùå Database operations test failed"
    exit 1
fi

# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
psql -U uk_bot -d uk_management -c "DROP TABLE test_table;"

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ô
# =============================================================================

echo "üîÑ Checking migrations..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (–±–µ–∫—Ñ–∏–ª–ª –¥–∞–Ω–Ω—ã—Ö)
ROLES_COUNT=$(psql -U postgres -d uk_management -t -c "SELECT COUNT(*) FROM users WHERE roles IS NOT NULL AND roles != '';")
ACTIVE_ROLE_COUNT=$(psql -U postgres -d uk_management -t -c "SELECT COUNT(*) FROM users WHERE active_role IS NOT NULL AND active_role != '';")

if [ "$ROLES_COUNT" -gt 0 ] || [ "$ACTIVE_ROLE_COUNT" -gt 0 ]; then
    echo "‚úÖ Migrations applied (roles and active_role fields populated)"
else
    echo "‚ö†Ô∏è  No users found with roles/active_role data (migrations will apply when users are added)"
fi

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# =============================================================================

echo "‚ö° Checking performance..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
CONNECTIONS=$(psql -U postgres -d uk_management -t -c "SELECT count(*) FROM pg_stat_activity WHERE datname='uk_management';")

echo "üìä Active connections: $CONNECTIONS"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_SIZE=$(psql -U postgres -d uk_management -t -c "
SELECT pg_size_pretty(pg_database_size('uk_management'));
")

echo "üìä Database size: $DB_SIZE"

# =============================================================================
# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
# =============================================================================

echo "üîç Final verification..."

# –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
psql -U postgres -d uk_management -c "
SELECT 
    'Database Summary' as info,
    current_database() as database_name,
    current_user as current_user,
    version() as postgres_version;
"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
echo "üìã Database tables:"
psql -U postgres -d uk_management -c "
SELECT 
    schemaname,
    tablename,
    tableowner
FROM pg_tables 
WHERE schemaname IN ('public', 'audit')
ORDER BY schemaname, tablename;
"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã
echo "üîç Database indexes:"
psql -U postgres -d uk_management -c "
SELECT 
    tablename,
    indexname,
    indexdef
FROM pg_indexes 
WHERE schemaname = 'public'
ORDER BY tablename, indexname;
"

# =============================================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï
# =============================================================================

echo ""
echo "üéâ PostgreSQL initialization check completed successfully!"
echo "‚úÖ All checks passed"
echo "üìä Database: uk_management"
echo "üë§ User: uk_bot"
echo "üîß Extensions: uuid-ossp, pg_trgm, pg_stat_statements"
echo "üìã Tables: users, requests, shifts, ratings, audit_logs (SQLite equivalent)"
echo "üìà Monitoring: connection_log, performance_stats tables"
echo "üîê Permissions: Properly configured"
echo "‚ö° Performance: Ready for production"
echo "üîÑ Migrations: Applied (add_user_addresses, add_user_roles_active_role)"
echo "üîí Constraints: Data validation enabled"
echo "‚ö° Triggers: updated_at fields automated"
echo ""
echo "üöÄ PostgreSQL is fully ready for UK Management Bot with SQLite-compatible structure!"
