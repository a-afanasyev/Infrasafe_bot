#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

uk_bot_path = project_root / "uk_management_bot"
sys.path.append(str(uk_bot_path))

try:
    from uk_management_bot.database.session import SessionLocal
    from uk_management_bot.database.models.user import User
    from uk_management_bot.middlewares.auth import auth_middleware, role_mode_middleware
    import json
    
    def test_middleware():
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç middleware –Ω–∞–ø—Ä—è–º—É—é"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == 48617336).first()
            
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
            print(f"üì± Telegram ID: {user.telegram_id}")
            print(f"üîë –†–æ–ª–∏: {user.roles}")
            print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {user.active_role}")
            
            # –ü–∞—Ä—Å–∏—Ä—É–µ–º —Ä–æ–ª–∏
            roles = []
            if user.roles:
                try:
                    roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
                except:
                    roles = []
            
            print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏: {roles}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º auth_middleware
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auth_middleware:")
            
            # –°–æ–∑–¥–∞–µ–º mock event
            class MockEvent:
                def __init__(self, user_id):
                    self.from_user = MockUser(user_id)
            
            class MockUser:
                def __init__(self, user_id):
                    self.id = user_id
                    self.language_code = "ru"
            
            mock_event = MockEvent(48617336)
            data = {"db": db}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º auth_middleware
            async def test_handler(event, data):
                print(f"‚úÖ auth_middleware: user={data.get('user')}")
                print(f"‚úÖ auth_middleware: user_status={data.get('user_status')}")
                return "OK"
            
            import asyncio
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            result = asyncio.run(auth_middleware(test_handler, mock_event, data))
            print(f"‚úÖ auth_middleware —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º role_mode_middleware
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ role_mode_middleware:")
            
            async def test_role_handler(event, data):
                print(f"‚úÖ role_mode_middleware: roles={data.get('roles')}")
                print(f"‚úÖ role_mode_middleware: active_role={data.get('active_role')}")
                return "OK"
            
            result = asyncio.run(role_mode_middleware(test_role_handler, mock_event, data))
            print(f"‚úÖ role_mode_middleware —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"user: {data.get('user')}")
            print(f"user_status: {data.get('user_status')}")
            print(f"roles: {data.get('roles')}")
            print(f"active_role: {data.get('active_role')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            roles = data.get('roles', [])
            has_access = any(role in ['admin', 'manager'] for role in roles)
            
            print(f"\nüîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
            
            return has_access
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        finally:
            db.close()
    
    if __name__ == "__main__":
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware")
        print("=" * 50)
        
        result = test_middleware()
        
        print("=" * 50)
        if result:
            print("‚úÖ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå Middleware –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
