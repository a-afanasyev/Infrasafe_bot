#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ uk_management_bot
uk_bot_path = project_root / "uk_management_bot"
sys.path.append(str(uk_bot_path))

from uk_management_bot.database.session import engine
from sqlalchemy import text

def check_verification_fields():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users...")
    
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                ORDER BY ordinal_position
            """))
            
            columns = [row[0] for row in result.fetchall()]
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_fields = [
                'verification_status',
                'verification_notes', 
                'verification_date',
                'verified_by',
                'passport_series',
                'passport_number',
                'birth_date'
            ]
            
            missing_fields = []
            for field in verification_fields:
                if field not in columns:
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                return False
            else:
                print("‚úÖ –í—Å–µ –ø–æ–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def add_verification_fields():
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        with engine.connect() as conn:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –æ–¥–Ω–æ–º—É
            fields_to_add = [
                ("verification_status", "VARCHAR(50) DEFAULT 'pending' NOT NULL"),
                ("verification_notes", "TEXT"),
                ("verification_date", "TIMESTAMP WITH TIME ZONE"),
                ("verified_by", "INTEGER"),
                ("passport_series", "VARCHAR(10)"),
                ("passport_number", "VARCHAR(10)"),
                ("birth_date", "TIMESTAMP WITH TIME ZONE")
            ]
            
            for field_name, field_type in fields_to_add:
                try:
                    conn.execute(text(f"ALTER TABLE users ADD COLUMN IF NOT EXISTS {field_name} {field_type}"))
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")
            
            conn.commit()
            print("‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π: {e}")
        return False

def check_verification_tables():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            tables_to_check = [
                'user_documents',
                'user_verifications', 
                'access_rights'
            ]
            
            missing_tables = []
            for table in tables_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = '{table}'
                    )
                """))
                
                if not result.scalar():
                    missing_tables.append(table)
                    print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {table}")
                else:
                    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table}")
            
            return len(missing_tables) == 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def create_verification_tables():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        with engine.connect() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_documents
            print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_documents...")
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS user_documents (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    document_type VARCHAR(50) NOT NULL,
                    file_id VARCHAR(255) NOT NULL,
                    file_name VARCHAR(255),
                    file_size INTEGER,
                    verification_status VARCHAR(50) DEFAULT 'pending',
                    verification_notes TEXT,
                    verified_by INTEGER REFERENCES users(id),
                    verified_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_verifications
            print("üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_verifications...")
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS user_verifications (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    status VARCHAR(50) DEFAULT 'pending',
                    requested_info JSONB DEFAULT '{}',
                    requested_at TIMESTAMP WITH TIME ZONE,
                    requested_by INTEGER REFERENCES users(id),
                    admin_notes TEXT,
                    verified_by INTEGER REFERENCES users(id),
                    verified_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                )
            """))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É access_rights
            print("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã access_rights...")
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS access_rights (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    access_level VARCHAR(50) NOT NULL,
                    apartment_number VARCHAR(20),
                    house_number VARCHAR(20),
                    yard_name VARCHAR(100),
                    is_active BOOLEAN DEFAULT TRUE,
                    expires_at TIMESTAMP WITH TIME ZONE,
                    granted_by INTEGER NOT NULL REFERENCES users(id),
                    granted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    notes TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                )
            """))
            
            conn.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    fields_ok = check_verification_fields()
    
    if not fields_ok:
        print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π...")
        add_verification_fields()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    tables_ok = check_verification_tables()
    
    if not tables_ok:
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
        create_verification_tables()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    final_fields_ok = check_verification_fields()
    final_tables_ok = check_verification_tables()
    
    if final_fields_ok and final_tables_ok:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–ª–∏—Å—å")

if __name__ == "__main__":
    main()
