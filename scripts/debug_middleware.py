#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç middleware
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

uk_bot_path = project_root / "uk_management_bot"
sys.path.append(str(uk_bot_path))

try:
    from uk_management_bot.database.session import SessionLocal
    from uk_management_bot.database.models.user import User
    import json
    
    def debug_middleware():
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç middleware"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
            user = db.query(User).filter(User.telegram_id == 48617336).first()
            
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
            print(f"üì± Telegram ID: {user.telegram_id}")
            print(f"üîë –†–æ–ª–∏ (—Å—ã—Ä—ã–µ): {user.roles}")
            print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {user.active_role}")
            
            # –ü–∞—Ä—Å–∏—Ä—É–µ–º —Ä–æ–ª–∏
            roles = []
            if user.roles:
                try:
                    if isinstance(user.roles, str):
                        roles = json.loads(user.roles)
                    else:
                        roles = user.roles
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π: {e}")
                    roles = []
            
            print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏: {roles}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            has_admin_role = any(role in ['admin', 'manager'] for role in roles)
            has_admin_active = user.active_role in ['admin', 'manager']
            
            print(f"üîß –ï—Å—Ç—å —Ä–æ–ª—å admin/manager: {'‚úÖ –î–∞' if has_admin_role else '‚ùå –ù–µ—Ç'}")
            print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å admin/manager: {'‚úÖ –î–∞' if has_admin_active else '‚ùå –ù–µ—Ç'}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É middleware
            print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è middleware:")
            
            # auth_middleware
            data = {"db": db}
            data["user"] = user
            data["user_status"] = user.status
            print(f"‚úÖ auth_middleware: user={data['user'] is not None}")
            print(f"‚úÖ auth_middleware: user_status={data['user_status']}")
            
            # role_mode_middleware
            roles_list = ["applicant"]
            active_role = "applicant"
            
            if user:
                if user.roles:
                    try:
                        parsed = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
                        if isinstance(parsed, list) and parsed:
                            roles_list = [str(r) for r in parsed if isinstance(r, str)] or roles_list
                    except Exception as parse_exc:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ roles: {parse_exc}")
                elif user.role:
                    roles_list = [user.role]
                
                if user.active_role:
                    active_role = user.active_role
                else:
                    active_role = roles_list[0] if roles_list else "applicant"
                
                if active_role not in roles_list:
                    active_role = roles_list[0] if roles_list else "applicant"
            
            data["roles"] = roles_list
            data["active_role"] = active_role
            
            print(f"‚úÖ role_mode_middleware: roles={data['roles']}")
            print(f"‚úÖ role_mode_middleware: active_role={data['active_role']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            has_access = any(role in ['admin', 'manager'] for role in data['roles'])
            
            print(f"\nüîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
            
            return has_access
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        finally:
            db.close()
    
    if __name__ == "__main__":
        print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç middleware")
        print("=" * 50)
        
        result = debug_middleware()
        
        print("=" * 50)
        if result:
            print("‚úÖ Middleware –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
        else:
            print("‚ùå Middleware –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
