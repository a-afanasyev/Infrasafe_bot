#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
1. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
2. –ü—Ä–æ–≤–µ—Ä–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from uk_management_bot.database.migrations.add_user_verification_tables import upgrade, downgrade
from uk_management_bot.database.session import engine
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_tables_exist():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables_to_check = [
                'user_documents',
                'user_verifications', 
                'access_rights'
            ]
            
            for table in tables_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '{table}'
                    );
                """))
                exists = result.scalar()
                
                if exists:
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
            fields_to_check = [
                'verification_status',
                'verification_notes',
                'verification_date',
                'verified_by',
                'passport_series',
                'passport_number',
                'birth_date'
            ]
            
            for field in fields_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.columns 
                        WHERE table_name = 'users' 
                        AND column_name = '{field}'
                    );
                """))
                exists = result.scalar()
                
                if exists:
                    logger.info(f"‚úÖ –ü–æ–ª–µ {field} –≤ —Ç–∞–±–ª–∏—Ü–µ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.error(f"‚ùå –ü–æ–ª–µ {field} –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return False
            
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def check_indexes_exist():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        with engine.connect() as conn:
            indexes_to_check = [
                'idx_user_documents_user_id',
                'idx_user_documents_status',
                'idx_user_verifications_user_id',
                'idx_user_verifications_status',
                'idx_access_rights_user_id',
                'idx_access_rights_level',
                'idx_access_rights_active'
            ]
            
            for index in indexes_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM pg_indexes 
                        WHERE indexname = '{index}'
                    );
                """))
                exists = result.scalar()
                
                if exists:
                    logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å {index} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å {index} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False


def check_triggers_exist():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    try:
        with engine.connect() as conn:
            triggers_to_check = [
                'update_user_documents_updated_at',
                'update_user_verifications_updated_at',
                'update_access_rights_updated_at'
            ]
            
            for trigger in triggers_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM pg_trigger 
                        WHERE tgname = '{trigger}'
                    );
                """))
                exists = result.scalar()
                
                if exists:
                    logger.info(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä {trigger} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä {trigger} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        logger.info("üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        upgrade()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
        if check_tables_exist():
            logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        check_indexes_exist()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...")
        check_triggers_exist()
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def rollback():
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    try:
        downgrade()
        logger.info("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    parser.add_argument(
        "--rollback", 
        action="store_true", 
        help="–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"
    )
    
    args = parser.parse_args()
    
    if args.rollback:
        success = rollback()
    else:
        success = main()
    
    sys.exit(0 if success else 1)
