"""
–¢–µ—Å—Ç—ã rate limiting –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /join
"""
import time
from unittest.mock import patch

def test_rate_limiting_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç rate limiting"""
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ InviteRateLimiter
    class TestRateLimiter:
        _storage = {}
        
        @classmethod
        def is_allowed(cls, telegram_id: int) -> bool:
            now = time.time()
            window = 600  # 10 –º–∏–Ω—É—Ç
            max_attempts = 3  # 3 –ø–æ–ø—ã—Ç–∫–∏
            
            key = f"join_{telegram_id}"
            attempts = cls._storage.get(key, [])
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–∫–Ω–∞
            attempts = [timestamp for timestamp in attempts if now - timestamp < window]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(attempts) >= max_attempts:
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
            attempts.append(now)
            cls._storage[key] = attempts
            
            return True
        
        @classmethod
        def get_remaining_time(cls, telegram_id: int) -> int:
            now = time.time()
            window = 600
            
            key = f"join_{telegram_id}"
            attempts = cls._storage.get(key, [])
            
            if not attempts:
                return 0
                
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –ø–æ–ø—ã—Ç–∫—É –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
            oldest_attempt = min(attempts)
            time_until_reset = window - (now - oldest_attempt)
            
            return max(0, int(time_until_reset))
        
        @classmethod
        def clear_storage(cls):
            cls._storage.clear()
    
    # –û—á–∏—â–∞–µ–º storage –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    TestRateLimiter.clear_storage()
    
    user_id = 123456789
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    assert TestRateLimiter.is_allowed(user_id) == True
    assert TestRateLimiter.is_allowed(user_id) == True
    assert TestRateLimiter.is_allowed(user_id) == True
    print("‚úÖ –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 2: 4-—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    assert TestRateLimiter.is_allowed(user_id) == False
    print("‚úÖ 4-—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç 3: –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    other_user = 987654321
    assert TestRateLimiter.is_allowed(other_user) == True
    assert TestRateLimiter.is_allowed(other_user) == True
    print("‚úÖ –†–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
    
    # –¢–µ—Å—Ç 4: –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    remaining = TestRateLimiter.get_remaining_time(user_id)
    assert 0 < remaining <= 600
    print(f"‚úÖ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞: {remaining} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∏–º–µ–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è = 0
    new_user = 555555555
    assert TestRateLimiter.get_remaining_time(new_user) == 0
    print("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")


def test_rate_limiting_window_cleanup():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ–∫–Ω–∞"""
    
    class MockTimeRateLimiter:
        _storage = {}
        
        @classmethod
        def is_allowed(cls, telegram_id: int, mock_time: float) -> bool:
            window = 10  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
            max_attempts = 2
            
            key = f"join_{telegram_id}"
            attempts = cls._storage.get(key, [])
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
            attempts = [t for t in attempts if mock_time - t < window]
            
            if len(attempts) >= max_attempts:
                return False
            
            attempts.append(mock_time)
            cls._storage[key] = attempts
            return True
        
        @classmethod
        def clear_storage(cls):
            cls._storage.clear()
    
    MockTimeRateLimiter.clear_storage()
    
    user_id = 123456789
    start_time = 1000000000.0
    
    # –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ø—ã—Ç–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ 0 –∏ 1
    assert MockTimeRateLimiter.is_allowed(user_id, start_time) == True
    assert MockTimeRateLimiter.is_allowed(user_id, start_time + 1) == True
    
    # 3-—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    assert MockTimeRateLimiter.is_allowed(user_id, start_time + 2) == False
    print("‚úÖ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
    
    # –ß–µ—Ä–µ–∑ 11 —Å–µ–∫—É–Ω–¥ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
    assert MockTimeRateLimiter.is_allowed(user_id, start_time + 11) == True
    print("‚úÖ –û–∫–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")


def test_rate_limiting_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ rate limiting"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    default_settings = {
        "JOIN_RATE_LIMIT_WINDOW": 600,  # 10 –º–∏–Ω—É—Ç
        "JOIN_RATE_LIMIT_MAX": 3        # 3 –ø–æ–ø—ã—Ç–∫–∏
    }
    
    # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º–∏ –¥–ª—è production
    assert default_settings["JOIN_RATE_LIMIT_WINDOW"] >= 300  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç
    assert default_settings["JOIN_RATE_LIMIT_MAX"] >= 1       # –ú–∏–Ω–∏–º—É–º 1 –ø–æ–ø—ã—Ç–∫–∞
    assert default_settings["JOIN_RATE_LIMIT_MAX"] <= 10      # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


def test_rate_limiting_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ rate limiting"""
    
    class EdgeCaseRateLimiter:
        _storage = {}
        
        @classmethod 
        def is_allowed(cls, telegram_id: int) -> bool:
            window = 60  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            max_attempts = 1  # –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç
            
            key = f"join_{telegram_id}"
            attempts = cls._storage.get(key, [])
            
            now = time.time()
            attempts = [t for t in attempts if now - t < window]
            
            if len(attempts) >= max_attempts:
                return False
            
            attempts.append(now)
            cls._storage[key] = attempts
            return True
        
        @classmethod
        def clear_storage(cls):
            cls._storage.clear()
    
    EdgeCaseRateLimiter.clear_storage()
    
    # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–º –ª–∏–º–∏—Ç–æ–º (1 –ø–æ–ø—ã—Ç–∫–∞ –≤ –º–∏–Ω—É—Ç—É)
    user_id = 123456789
    
    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç
    assert EdgeCaseRateLimiter.is_allowed(user_id) == True
    
    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ä–∞–∑—É –∂–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    assert EdgeCaseRateLimiter.is_allowed(user_id) == False
    
    print("‚úÖ –°—Ç—Ä–æ–≥–∏–π rate limit —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ rate limiting...")
    
    test_rate_limiting_comprehensive()
    print()
    
    test_rate_limiting_window_cleanup()
    print()
    
    test_rate_limiting_settings()
    print()
    
    test_rate_limiting_edge_cases()
    print()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã rate limiting –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å rate limiting")
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
    print("‚úÖ –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
