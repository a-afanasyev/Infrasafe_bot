#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uk_management_bot.database.session import SessionLocal, engine
from uk_management_bot.database.models.user import User
from uk_management_bot.utils.auth_helpers import has_admin_access, get_user_roles, get_active_role
import json

def test_auth_helpers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–¢–ò–õ–ò–¢–ê–†–ù–´–• –§–£–ù–ö–¶–ò–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        {
            "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)",
            "user": User(
                telegram_id=1001,
                role="admin",
                status="approved",
                roles=None,
                active_role=None
            )
        },
        {
            "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)",
            "user": User(
                telegram_id=1002,
                role="applicant",
                status="approved",
                roles='["applicant", "manager"]',
                active_role="manager"
            )
        },
        {
            "name": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å–º–µ—à–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)",
            "user": User(
                telegram_id=1003,
                role="executor",
                status="approved",
                roles='["applicant", "executor"]',
                active_role="executor"
            )
        },
        {
            "name": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "user": User(
                telegram_id=1004,
                role="applicant",
                status="approved",
                roles='["applicant"]',
                active_role="applicant"
            )
        },
        {
            "name": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "user": User(
                telegram_id=1005,
                role="applicant",
                status="blocked",
                roles='["applicant"]',
                active_role="applicant"
            )
        }
    ]
    
    for test_case in test_users:
        user = test_case["user"]
        print(f"\nüë§ {test_case['name']}:")
        print(f"   Telegram ID: {user.telegram_id}")
        print(f"   –°—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {user.role}")
        print(f"   –ù–æ–≤—ã–µ —Ä–æ–ª–∏: {user.roles}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {user.active_role}")
        print(f"   –°—Ç–∞—Ç—É—Å: {user.status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        roles_list = get_user_roles(user)
        active_role = get_active_role(user)
        has_admin = has_admin_access(user=user)
        
        print(f"   üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏: {roles_list}")
        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: {active_role}")
        print(f"   üîê –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_admin else '‚ùå –ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        expected_admin = user.role in ['admin', 'manager'] or (user.roles and 'admin' in json.loads(user.roles) or 'manager' in json.loads(user.roles))
        if has_admin == expected_admin:
            print(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_admin}, –ø–æ–ª—É—á–µ–Ω–æ {has_admin}")

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from uk_management_bot.database.models import user
        from uk_management_bot.database.session import Base
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_count = db.query(User).count()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {user_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            if user_count > 0:
                sample_user = db.query(User).first()
                print(f"   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                print(f"      - telegram_id: {sample_user.telegram_id}")
                print(f"      - role: {sample_user.role}")
                print(f"      - roles: {sample_user.roles}")
                print(f"      - active_role: {sample_user.active_role}")
                print(f"      - status: {sample_user.status}")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def test_middleware_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É middleware"""
    print("\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–ë–û–¢–´ MIDDLEWARE")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        telegram_id=9999,
        role="manager",
        status="approved",
        roles='["applicant", "manager"]',
        active_role="manager"
    )
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º data —Å–ª–æ–≤–∞—Ä—å middleware
    data = {
        "user": user,
        "user_status": user.status
    }
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º role_mode_middleware
    from uk_management_bot.utils.auth_helpers import get_user_roles, get_active_role
    
    roles_list = get_user_roles(user)
    active_role = get_active_role(user)
    
    data["roles"] = roles_list
    data["active_role"] = active_role
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
    print(f"üìã –†–æ–ª–∏ –≤ data: {data['roles']}")
    print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å –≤ data: {data['active_role']}")
    print(f"üîê –°—Ç–∞—Ç—É—Å –≤ data: {data['user_status']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    has_admin = has_admin_access(roles=data['roles'], user=data['user'])
    print(f"üîê –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_admin else '‚ùå –ù–µ—Ç'}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        test_auth_helpers()
        test_database_connection()
        test_middleware_simulation()
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –†–ï–ó–Æ–ú–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print("1. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ auth_middleware")
        print("2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è role")
        print("3. ‚úÖ –°–æ–∑–¥–∞–Ω—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
        print("4. ‚úÖ –í–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã")
        print("5. ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ role_mode_middleware")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
