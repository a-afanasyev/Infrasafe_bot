from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º. –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–æ–ª–∏.
    """
    return get_main_keyboard_for_role(active_role="applicant", roles=["applicant"])


def get_contextual_keyboard(roles: list = None, active_role: str = None) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    if not roles or not active_role:
        return get_main_keyboard()
    return get_main_keyboard_for_role(active_role=active_role, roles=roles)


def get_user_contextual_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≥—Ä—É–∑–∏–≤ –µ–≥–æ —Ä–æ–ª–∏ –∏–∑ –ë–î.
    
    –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    try:
        from database.session import SessionLocal
        from database.models.user import User
        import json
        
        db = SessionLocal()
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if user and user.roles:
            roles = json.loads(user.roles)
            active_role = user.active_role or (roles[0] if roles else "applicant")
            db.close()
            return get_main_keyboard_for_role(active_role=active_role, roles=roles)
        
        db.close()
        return get_main_keyboard()
        
    except Exception:
        return get_main_keyboard() 

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

def get_yes_no_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚úÖ –î–∞"))
    builder.add(KeyboardButton(text="‚ùå –ù–µ—Ç"))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_rating_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (1-5 –∑–≤–µ–∑–¥)"""
    builder = InlineKeyboardBuilder()
    
    for i in range(1, 6):
        builder.add(InlineKeyboardButton(
            text=f"{'‚≠ê' * i}",
            callback_data=f"rate_{i}"
        ))
    
    builder.adjust(5)
    return builder.as_markup()


def get_main_keyboard_for_role(active_role: str, roles: list[str], user_status: str = None) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á—ë—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π.

    –°—Ü–µ–Ω–∞—Ä–∏–∏:
    - applicant: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Å–æ–∑–¥–∞—Ç—å/–º–æ–∏ –∑–∞—è–≤–∫–∏, –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–º–æ—â—å)
    - executor: –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –∏ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    - manager: –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω‚Äë–∫–Ω–æ–ø–∫–∏
    - pending: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
    """
    builder = ReplyKeyboardBuilder()

    unique_roles: list[str] = []
    if roles:
        for r in roles:
            if isinstance(r, str) and r not in unique_roles:
                unique_roles.append(r)

    if active_role == "executor":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        builder.add(KeyboardButton(text="üõ† –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"))
        builder.add(KeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤"))
        builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–∞–º –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        builder.add(KeyboardButton(text="üîÑ –°–º–µ–Ω–∞"))
    else:
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª—è/–¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if user_status != "pending":
            builder.add(KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"))
        builder.add(KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"))
        builder.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
        builder.add(KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚â•2 —Ä–æ–ª–µ–π
    if len(unique_roles) > 1:
        builder.add(KeyboardButton(text="üîÄ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å"))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–ª–µ–π admin/manager)
    if active_role in ["admin", "manager"]:
        builder.add(KeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
        builder.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_role_switch_inline(roles: list[str], active_role: str) -> InlineKeyboardMarkup:
    """Inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏.

    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å –ø–æ–º–µ—á–∞–µ—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π
    """
    builder = InlineKeyboardBuilder()
    role_names = {
        "applicant": "–ñ–∏—Ç–µ–ª—å",
        "executor": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    }

    for role in roles or []:
        name = role_names.get(role, role)
        mark = " ‚úì" if role == active_role else ""
        builder.add(InlineKeyboardButton(text=f"{name}{mark}", callback_data=f"switch_role:{role}"))

    builder.adjust(3)
    return builder.as_markup()


def get_executor_suggestion_inline(yes_text: str, no_text: str) -> InlineKeyboardMarkup:
    """Inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–º–µ–Ω—ã.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - yes_text: –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    - no_text: –ü–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–∞–∑–∞ (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
    - –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí callback_data "switch_role:executor"
    - –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ ‚Üí callback_data "suggest_executor_skip"
    """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=yes_text, callback_data="switch_role:executor"))
    builder.add(InlineKeyboardButton(text=no_text, callback_data="suggest_executor_skip"))
    builder.adjust(1)
    return builder.as_markup()
