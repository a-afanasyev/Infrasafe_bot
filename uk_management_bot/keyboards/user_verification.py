"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–°–æ–¥–µ—Ä–∂–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è:
- –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
"""

from typing import Dict, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from uk_management_bot.utils.helpers import get_text
from uk_management_bot.database.models.user_verification import DocumentType


def get_verification_main_keyboard(stats: Dict[str, int], language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    """
    buttons = [
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        [InlineKeyboardButton(
            text=f"üìä {get_text('verification.stats', language)}",
            callback_data="verification_stats"
        )],
        
        # –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        [InlineKeyboardButton(
            text=f"‚è≥ {get_text('verification.pending_users', language)} ({stats.get('pending', 0)})",
            callback_data="verification_list_pending_1"
        )],
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('verification.verified_users', language)} ({stats.get('verified', 0)})",
            callback_data="verification_list_verified_1"
        )],
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('verification.rejected_users', language)} ({stats.get('rejected', 0)})",
            callback_data="verification_list_rejected_1"
        )],
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        [InlineKeyboardButton(
            text=f"üìÑ {get_text('verification.pending_documents', language)} ({stats.get('pending_documents', 0)})",
            callback_data="verification_documents_pending_1"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="user_management_panel"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_user_verification_keyboard(user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        # –î–µ–π—Å—Ç–≤–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('verification.approve_user', language)}",
            callback_data=f"verify_approve_{user_id}"
        )],
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('verification.reject_user', language)}",
            callback_data=f"verify_reject_{user_id}"
        )],
        
        # –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        [InlineKeyboardButton(
            text=f"üìù {get_text('verification.request_info', language)}",
            callback_data=f"verification_request_{user_id}"
        )],
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
        [InlineKeyboardButton(
            text=f"üîë {get_text('verification.access_rights', language)}",
            callback_data=f"access_rights_{user_id}"
        )],
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        [InlineKeyboardButton(
            text=f"üìÑ {get_text('verification.view_documents', language)}",
            callback_data=f"view_user_documents_{user_id}"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="user_verification_panel"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_verification_request_keyboard(user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å —Ç–∏–ø–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    buttons = [
        # –¢–∏–ø—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        [InlineKeyboardButton(
            text=f"üìç {get_text('verification.request_address', language)}",
            callback_data=f"request_info_{user_id}_address"
        )],
        [InlineKeyboardButton(
            text=f"üìÑ {get_text('verification.request_passport', language)}",
            callback_data=f"request_info_{user_id}_passport"
        )],
        [InlineKeyboardButton(
            text=f"üè† {get_text('verification.request_property_deed', language)}",
            callback_data=f"request_info_{user_id}_property_deed"
        )],
        [InlineKeyboardButton(
            text=f"üìã {get_text('verification.request_rental_agreement', language)}",
            callback_data=f"request_info_{user_id}_rental_agreement"
        )],
        [InlineKeyboardButton(
            text=f"üí° {get_text('verification.request_utility_bill', language)}",
            callback_data=f"request_info_{user_id}_utility_bill"
        )],
        [InlineKeyboardButton(
            text=f"üìù {get_text('verification.request_other', language)}",
            callback_data=f"request_info_{user_id}_other"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data=f"verification_user_{user_id}"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_document_verification_keyboard(document_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        document_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('verification.approve_document', language)}",
            callback_data=f"document_approve_{document_id}"
        )],
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('verification.reject_document', language)}",
            callback_data=f"document_reject_{document_id}"
        )],
        [InlineKeyboardButton(
            text=f"üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            callback_data=f"download_document_{document_id}"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="verification_user_documents"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_document_management_keyboard(user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        [InlineKeyboardButton(
            text=f"üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            callback_data=f"request_documents_{user_id}"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data=f"user_mgmt_user_{user_id}"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_access_rights_keyboard(user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        [InlineKeyboardButton(
            text=f"üè† {get_text('verification.grant_apartment', language)}",
            callback_data=f"grant_access_{user_id}_apartment"
        )],
        [InlineKeyboardButton(
            text=f"üè¢ {get_text('verification.grant_house', language)}",
            callback_data=f"grant_access_{user_id}_house"
        )],
        [InlineKeyboardButton(
            text=f"üèòÔ∏è {get_text('verification.grant_yard', language)}",
            callback_data=f"grant_access_{user_id}_yard"
        )],
        
        # –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        [InlineKeyboardButton(
            text=f"üö´ {get_text('verification.revoke_rights', language)}",
            callback_data=f"revoke_rights_{user_id}"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data=f"verification_user_{user_id}"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_verification_list_keyboard(users_data: Dict, list_type: str, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        users_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        list_type: –¢–∏–ø —Å–ø–∏—Å–∫–∞ (pending, verified, rejected)
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    buttons = []
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for user in users_data.get('users', []):
        user_name = _format_user_name(user)
        status_emoji = _get_verification_status_emoji(user.verification_status)
        
        buttons.append([InlineKeyboardButton(
            text=f"{status_emoji} {user_name}",
            callback_data=f"verification_user_{user.id}"
        )])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
    if not users_data.get('users'):
        buttons.append([InlineKeyboardButton(
            text=get_text('verification.no_users_found', language),
            callback_data="no_action"
        )])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    current_page = users_data.get('current_page', 1)
    total_pages = users_data.get('total_pages', 1)
    
    if current_page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"verification_list_{list_type}_{current_page - 1}"
        ))
    
    pagination_buttons.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}",
        callback_data="no_action"
    ))
    
    if current_page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"verification_list_{list_type}_{current_page + 1}"
        ))
    
    if pagination_buttons:
        buttons.append(pagination_buttons)
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="user_verification_panel"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_documents_list_keyboard(documents_data: Dict, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Args:
        documents_data: –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    buttons = []
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for document in documents_data.get('documents', []):
        document_name = f"{document.document_type.value}"
        status_emoji = _get_document_status_emoji(document.verification_status)
        
        buttons.append([InlineKeyboardButton(
            text=f"{status_emoji} {document_name}",
            callback_data=f"document_verify_{document.id}"
        )])
    
    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
    if not documents_data.get('documents'):
        buttons.append([InlineKeyboardButton(
            text=get_text('verification.no_documents_found', language),
            callback_data="no_action"
        )])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_buttons = []
    current_page = documents_data.get('current_page', 1)
    total_pages = documents_data.get('total_pages', 1)
    
    if current_page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"verification_documents_pending_{current_page - 1}"
        ))
    
    pagination_buttons.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}",
        callback_data="no_action"
    ))
    
    if current_page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"verification_documents_pending_{current_page + 1}"
        ))
    
    if pagination_buttons:
        buttons.append(pagination_buttons)
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="user_verification_panel"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cancel_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    buttons = [
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="cancel_action"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ‚ïê‚ïê‚ïê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ‚ïê‚ïê‚ïê

def _format_user_name(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if user.first_name and user.last_name:
        return f"{user.first_name} {user.last_name}"
    elif user.first_name:
        return user.first_name
    elif user.username:
        return f"@{user.username}"
    else:
        return f"User {user.id}"


def _get_verification_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    status_emojis = {
        'pending': '‚è≥',
        'verified': '‚úÖ',
        'rejected': '‚ùå',
        'requested': 'üìù'
    }
    return status_emojis.get(status, '‚ùì')


def _get_document_status_emoji(status) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    status_emojis = {
        'pending': '‚è≥',
        'approved': '‚úÖ',
        'rejected': '‚ùå'
    }
    return status_emojis.get(status.value, '‚ùì')


def get_document_request_keyboard(user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    buttons = []
    
    # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    document_types = [
        (DocumentType.PASSPORT, "passport"),
        (DocumentType.PROPERTY_DEED, "property_deed"),
        (DocumentType.RENTAL_AGREEMENT, "rental_agreement"),
        (DocumentType.UTILITY_BILL, "utility_bill"),
        (DocumentType.OTHER, "other")
    ]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(document_types), 2):
        row = []
        
        for j in range(2):
            if i + j < len(document_types):
                doc_type, key = document_types[i + j]
                doc_name = get_text(f"verification.document_types.{key}", language)
                
                row.append(InlineKeyboardButton(
                    text=f"üìÑ {doc_name}",
                    callback_data=f"request_document_{user_id}_{doc_type.value}"
                ))
        
        buttons.append(row)
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data=f"back_to_user_details_{user_id}"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_document_checklist_keyboard(user_id: int, selected_docs: list = None, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_docs: –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    """
    if selected_docs is None:
        selected_docs = []
    
    buttons = []
    
    # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    document_types = [
        (DocumentType.PASSPORT, "passport"),
        (DocumentType.PROPERTY_DEED, "property_deed"),
        (DocumentType.RENTAL_AGREEMENT, "rental_agreement"),
        (DocumentType.UTILITY_BILL, "utility_bill"),
        (DocumentType.OTHER, "other")
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    for doc_type, key in document_types:
        doc_name = get_text(f"verification.document_types.{key}", language)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üîç DOCUMENT_CHECKLIST: key={key}, doc_name={doc_name}, language={language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if doc_type.value in selected_docs:
            text = f"‚úÖ {doc_name}"
            callback_data = f"uncheck_document_{user_id}_{doc_type.value}"
        else:
            text = f"‚¨úÔ∏è {doc_name}"
            callback_data = f"check_document_{user_id}_{doc_type.value}"
        
        buttons.append([InlineKeyboardButton(
            text=text,
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = []
    
    if selected_docs:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
        docs_str = ','.join(selected_docs[:3])  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if len(selected_docs) > 3:
            docs_str += f"+{len(selected_docs)-3}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        
        action_buttons.append(InlineKeyboardButton(
            text=f"üì§ {get_text('verification.request_selected_documents', language)}",
            callback_data=f"req_docs_{user_id}_{docs_str}"
        ))
    
    action_buttons.append(InlineKeyboardButton(
        text=f"‚ùå {get_text('buttons.cancel', language)}",
        callback_data=f"cancel_document_selection_{user_id}"
    ))
    
    if action_buttons:
        buttons.append(action_buttons)
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data=f"back_to_user_details_{user_id}"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)
