"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è:
- –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –°–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
- –î–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –í—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
"""

from typing import Dict, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from uk_management_bot.utils.helpers import get_text
# from uk_management_bot.database.models.user import User  # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω


def get_user_management_main_keyboard(stats: Dict[str, int], language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    Args:
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    """
    buttons = [
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        [InlineKeyboardButton(
            text=f"üìä {get_text('user_management.stats', language)}",
            callback_data="user_mgmt_stats"
        )],
        
        # –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        [InlineKeyboardButton(
            text=f"üìù {get_text('user_management.new_users', language)} ({stats.get('pending', 0)})",
            callback_data="user_mgmt_list_pending_1"
        )],
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('user_management.approved_users', language)} ({stats.get('approved', 0)})",
            callback_data="user_mgmt_list_approved_1"
        )],
        [InlineKeyboardButton(
            text=f"üö´ {get_text('user_management.blocked_users', language)} ({stats.get('blocked', 0)})",
            callback_data="user_mgmt_list_blocked_1"
        )],
        [InlineKeyboardButton(
            text=f"üë∑ {get_text('user_management.staff_users', language)} ({stats.get('staff', 0)})",
            callback_data="user_mgmt_list_staff_1"
        )],
        
        # –ü–æ–∏—Å–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        [InlineKeyboardButton(
            text=f"üîç {get_text('user_management.search', language)}",
            callback_data="user_mgmt_search"
        )],
        [InlineKeyboardButton(
            text=f"üõ†Ô∏è {get_text('user_management.specializations', language)}",
            callback_data="user_mgmt_specializations"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="admin_panel"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_user_list_keyboard(users_data: Dict, list_type: str, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        users_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        list_type: –¢–∏–ø —Å–ø–∏—Å–∫–∞ (pending, approved, blocked, staff)
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    buttons = []
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for user in users_data.get('users', []):
        user_name = _format_user_name(user)
        status_emoji = _get_status_emoji(user.status)
        
        buttons.append([InlineKeyboardButton(
            text=f"{status_emoji} {user_name}",
            callback_data=f"user_mgmt_user_{user.id}"
        )])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
    if not users_data.get('users'):
        buttons.append([InlineKeyboardButton(
            text=get_text('user_management.no_users_found', language),
            callback_data="user_mgmt_nop"
        )])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if users_data.get('has_prev', False):
        pagination_row.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"user_mgmt_list_{list_type}_{users_data.get('page', 1) - 1}"
        ))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = users_data.get('page', 1)
    total_pages = users_data.get('total_pages', 1)
    pagination_row.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}",
        callback_data="user_mgmt_nop"
    ))
    
    if users_data.get('has_next', False):
        pagination_row.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"user_mgmt_list_{list_type}_{users_data.get('page', 1) + 1}"
        ))
    
    if pagination_row:
        buttons.append(pagination_row)
    
    # –û–±–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(
            text=f"üîÑ {get_text('buttons.refresh', language)}",
            callback_data=f"user_mgmt_list_{list_type}_{current_page}"
        )
    ])
    
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="user_mgmt_main"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_user_actions_keyboard(user, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = []
    
    # –î–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if user.status == 'pending':
        buttons.append([InlineKeyboardButton(
            text=f"‚úÖ {get_text('moderation.approve_user', language)}",
            callback_data=f"user_action_approve_{user.id}"
        )])
        buttons.append([InlineKeyboardButton(
            text=f"üö´ {get_text('moderation.block_user', language)}",
            callback_data=f"user_action_block_{user.id}"
        )])
    
    elif user.status == 'approved':
        buttons.append([InlineKeyboardButton(
            text=f"üö´ {get_text('moderation.block_user', language)}",
            callback_data=f"user_action_block_{user.id}"
        )])
    
    elif user.status == 'blocked':
        buttons.append([InlineKeyboardButton(
            text=f"üîì {get_text('moderation.unblock_user', language)}",
            callback_data=f"user_action_unblock_{user.id}"
        )])
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
    buttons.append([InlineKeyboardButton(
        text=f"üë• {get_text('moderation.manage_roles', language)}",
        callback_data=f"user_roles_{user.id}"
    )])
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
    if user.roles and 'executor' in user.roles:
        buttons.append([InlineKeyboardButton(
            text=f"üõ†Ô∏è {get_text('moderation.manage_specializations', language)}",
            callback_data=f"user_specializations_{user.id}"
        )])
    
    # –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
    buttons.append([InlineKeyboardButton(
        text=f"üìã {get_text('moderation.request_documents', language)}",
        callback_data=f"user_action_request_docs_{user.id}"
    )])
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)
    from uk_management_bot.services.user_verification_service import UserVerificationService
    from sqlalchemy.orm import Session
    from uk_management_bot.database.session import get_db
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        verification_service = UserVerificationService(db)
        documents_summary = verification_service.get_user_documents_summary(user.id)
        
        if documents_summary['total_documents'] > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            buttons.append([InlineKeyboardButton(
                text=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã ({documents_summary['total_documents']})",
                callback_data=f"user_action_view_documents_{user.id}"
            )])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ —Å—á–µ—Ç—á–∏–∫–∞
            buttons.append([InlineKeyboardButton(
                text=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã",
                callback_data=f"user_action_view_documents_{user.id}"
            )])
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        buttons.append([InlineKeyboardButton(
            text=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã",
            callback_data=f"user_action_view_documents_{user.id}"
        )])
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
    buttons.append([InlineKeyboardButton(
        text=f"üóëÔ∏è {get_text('moderation.delete_user', language)}",
        callback_data=f"user_action_delete_{user.id}"
    )])
    
    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="user_mgmt_back_to_list"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_roles_management_keyboard(user_roles: List[str], language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_roles: –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    """
    buttons = []
    
    available_roles = ['applicant', 'executor', 'manager']
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(available_roles), 2):
        row = []
        
        for j in range(2):
            if i + j < len(available_roles):
                role = available_roles[i + j]
                has_role = role in user_roles
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                checkbox = "‚òëÔ∏è" if has_role else "‚òê"
                role_name = get_text(f"roles.{role}", language)
                
                action = "remove" if has_role else "add"
                
                row.append(InlineKeyboardButton(
                    text=f"{checkbox} {role_name}",
                    callback_data=f"role_{action}_{role}"
                ))
        
        buttons.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton(
            text=f"üíæ {get_text('buttons.save', language)}",
            callback_data="roles_save"
        ),
        InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="roles_cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_specializations_selection_keyboard(user_specializations: List[str], language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
    
    Args:
        user_specializations: –¢–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    """
    buttons = []
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    from uk_management_bot.services.specialization_service import SpecializationService
    available = SpecializationService.AVAILABLE_SPECIALIZATIONS
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(available), 2):
        row = []
        
        for j in range(2):
            if i + j < len(available):
                spec = available[i + j]
                is_selected = spec in user_specializations
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                checkbox = "‚òëÔ∏è" if is_selected else "‚òê"
                spec_name = get_text(f"specializations.{spec}", language)
                
                row.append(InlineKeyboardButton(
                    text=f"{checkbox} {spec_name}",
                    callback_data=f"spec_toggle_{spec}"
                ))
        
        buttons.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.append([
        InlineKeyboardButton(
            text=f"üíæ {get_text('buttons.save', language)}",
            callback_data="spec_save"
        ),
        InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="spec_cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_search_filters_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    buttons = [
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        [InlineKeyboardButton(
            text=f"üìù {get_text('filters.by_status', language)}",
            callback_data="search_filter_status"
        )],
        [InlineKeyboardButton(
            text=f"üë• {get_text('filters.by_role', language)}",
            callback_data="search_filter_role"
        )],
        [InlineKeyboardButton(
            text=f"üõ†Ô∏è {get_text('filters.by_specialization', language)}",
            callback_data="search_filter_specialization"
        )],
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        [InlineKeyboardButton(
            text=f"üîç {get_text('search.by_name', language)}",
            callback_data="search_by_name"
        )],
        
        # –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –Ω–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"üîÑ {get_text('buttons.reset_filters', language)}",
            callback_data="search_reset_filters"
        )],
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="user_mgmt_main"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_confirmation_keyboard(action: str, user_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (approve, block, unblock)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    """
    buttons = [
        [
            InlineKeyboardButton(
                text=f"‚úÖ {get_text('buttons.confirm', language)}",
                callback_data=f"confirm_{action}_{user_id}"
            ),
            InlineKeyboardButton(
                text=f"‚ùå {get_text('buttons.cancel', language)}",
                callback_data=f"user_mgmt_user_{user_id}"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cancel_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
    
    Args:
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="user_mgmt_cancel"
        )]
    ])


def get_specialization_stats_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    
    Args:
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    """
    buttons = [
        [InlineKeyboardButton(
            text=f"üîç {get_text('specializations.search_by_spec', language)}",
            callback_data="spec_search"
        )],
        [InlineKeyboardButton(
            text=f"üìä {get_text('specializations.view_stats', language)}",
            callback_data="spec_stats"
        )],
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="user_mgmt_main"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ‚ïê‚ïê‚ïê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ‚ïê‚ïê‚ïê

def _format_user_name(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    if not name:
        name = user.username or f"ID{user.telegram_id}"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if len(name) > 25:
        name = name[:22] + "..."
    
    return name


def _get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    status_emojis = {
        "pending": "üìù",
        "approved": "‚úÖ",
        "blocked": "üö´"
    }
    return status_emojis.get(status, "‚ùì")


def get_pagination_info(page: int, total_pages: int, total_items: int, language: str = 'ru') -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_items: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    if total_items == 0:
        return get_text('pagination.no_items', language)
    
    return get_text('pagination.info', language).format(
        page=page,
        total_pages=total_pages,
        total_items=total_items
    )
