from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional, List


def get_shifts_main_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="üîÑ –ü—Ä–∏–Ω—è—Ç—å —Å–º–µ–Ω—É"), KeyboardButton(text="üîö –°–¥–∞—Ç—å —Å–º–µ–Ω—É")],
        [KeyboardButton(text="‚ÑπÔ∏è –ú–æ—è —Å–º–µ–Ω–∞"), KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


def get_end_shift_confirm_inline() -> InlineKeyboardMarkup:
    rows = [[
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="shift_end_confirm_yes"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="shift_end_confirm_no"),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_shifts_filters_inline(period: Optional[str] = None, status: Optional[str] = None) -> InlineKeyboardMarkup:
    period_rows: List[List[InlineKeyboardButton]] = []
    periods = [
        ("all", "–í—Å–µ –≤—Ä–µ–º—è"),
        ("today", "–°–µ–≥–æ–¥–Ω—è"),
        ("7d", "7 –¥–Ω–µ–π"),
        ("30d", "30 –¥–Ω–µ–π"),
        ("90d", "90 –¥–Ω–µ–π"),
    ]
    for value, label in periods:
        text = f"‚Ä¢ {label}" if period == value else label
        period_rows.append([InlineKeyboardButton(text=text, callback_data=f"shifts_period_{value}")])

    status_rows: List[List[InlineKeyboardButton]] = []
    statuses = [
        ("all", "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"),
        ("active", "–ê–∫—Ç–∏–≤–Ω—ã–µ"),
        ("completed", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"),
        ("cancelled", "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"),
    ]
    for value, label in statuses:
        text = f"‚Ä¢ {label}" if status == value else label
        status_rows.append([InlineKeyboardButton(text=text, callback_data=f"shifts_status_{value}")])

    reset_row = [[InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="shifts_filters_reset")]]
    return InlineKeyboardMarkup(inline_keyboard=period_rows + status_rows + reset_row)


def get_pagination_inline(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    buttons = []
    row = []
    if current_page > 1:
        row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"shifts_page_{current_page-1}"))
    row.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="shifts_page_current"))
    if current_page < total_pages:
        row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"shifts_page_{current_page+1}"))
    buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_manager_active_shifts_row(telegram_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùó –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data=f"force_end_shift_{telegram_id}")]]
    )


