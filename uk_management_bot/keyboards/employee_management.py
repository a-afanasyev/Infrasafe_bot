"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è:
- –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
- –°–ø–∏—Å–∫–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
- –î–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
- –í—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
"""

from typing import Dict, List
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from uk_management_bot.utils.helpers import get_text


def get_employee_management_main_keyboard(stats: Dict[str, int], language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    
    Args:
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    """
    buttons = [
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        [InlineKeyboardButton(
            text=f"üìä {get_text('employee_management.stats', language)}",
            callback_data="employee_mgmt_stats"
        )],
        
        # –°–ø–∏—Å–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        [InlineKeyboardButton(
            text=f"üìù {get_text('employee_management.pending_employees', language)} ({stats.get('pending', 0)})",
            callback_data="employee_mgmt_list_pending_1"
        )],
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('employee_management.active_employees', language)} ({stats.get('active', 0)})",
            callback_data="employee_mgmt_list_active_1"
        )],
        [InlineKeyboardButton(
            text=f"üö´ {get_text('employee_management.blocked_employees', language)} ({stats.get('blocked', 0)})",
            callback_data="employee_mgmt_list_blocked_1"
        )],
        [InlineKeyboardButton(
            text=f"üõ†Ô∏è {get_text('employee_management.executors', language)} ({stats.get('executors', 0)})",
            callback_data="employee_mgmt_list_executors_1"
        )],
        [InlineKeyboardButton(
            text=f"üë®‚Äçüíº {get_text('employee_management.managers', language)} ({stats.get('managers', 0)})",
            callback_data="employee_mgmt_list_managers_1"
        )],
        
        # –ü–æ–∏—Å–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        [InlineKeyboardButton(
            text=f"üîç {get_text('employee_management.search', language)}",
            callback_data="employee_mgmt_search"
        )],
        [InlineKeyboardButton(
            text=f"üõ†Ô∏è {get_text('employee_management.specializations', language)}",
            callback_data="employee_mgmt_specializations"
        )],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data="admin_panel"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_employee_list_keyboard(employees_data: Dict, list_type: str, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        employees_data: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        list_type: –¢–∏–ø —Å–ø–∏—Å–∫–∞ (pending, active, blocked, executors, managers)
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    buttons = []
    
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for employee in employees_data.get('employees', []):
        employee_name = _format_employee_name(employee)
        status_emoji = _get_status_emoji(employee.status)
        
        buttons.append([InlineKeyboardButton(
            text=f"{status_emoji} {employee_name}",
            callback_data=f"employee_mgmt_employee_{employee.id}"
        )])
    
    # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç
    if not employees_data.get('employees'):
        buttons.append([InlineKeyboardButton(
            text=get_text('employee_management.no_employees', language),
            callback_data="no_action"
        )])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    current_page = employees_data.get('current_page', 1)
    total_pages = employees_data.get('total_pages', 1)
    
    if total_pages > 1:
        nav_buttons = []
        
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"employee_mgmt_list_{list_type}_{current_page - 1}"
            ))
        
        nav_buttons.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}",
            callback_data="no_action"
        ))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"employee_mgmt_list_{list_type}_{current_page + 1}"
            ))
        
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="employee_mgmt_main"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_employee_actions_keyboard(employee_id: int, status: str, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    
    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        status: –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = []
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == "pending":
        buttons.extend([
            [InlineKeyboardButton(
                text=f"‚úÖ {get_text('employee_management.approve', language)}",
                callback_data=f"approve_employee_{employee_id}"
            )],
            [InlineKeyboardButton(
                text=f"‚ùå {get_text('employee_management.reject', language)}",
                callback_data=f"reject_employee_{employee_id}"
            )]
        ])
    elif status == "approved":
        buttons.extend([
            [InlineKeyboardButton(
                text=f"üö´ {get_text('employee_management.block', language)}",
                callback_data=f"block_employee_{employee_id}"
            )],
            [InlineKeyboardButton(
                text=f"üõ†Ô∏è {get_text('employee_management.change_role', language)}",
                callback_data=f"change_employee_role_{employee_id}"
            )],
            [InlineKeyboardButton(
                text=f"üîß {get_text('employee_management.specialization', language)}",
                callback_data=f"change_employee_specialization_{employee_id}"
            )]
        ])
    elif status == "blocked":
        buttons.extend([
            [InlineKeyboardButton(
                text=f"‚úÖ {get_text('employee_management.unblock', language)}",
                callback_data=f"unblock_employee_{employee_id}"
            )]
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.extend([
        [InlineKeyboardButton(
            text=f"üóëÔ∏è {get_text('employee_management.delete', language)}",
            callback_data=f"delete_employee_{employee_id}"
        )],
        [InlineKeyboardButton(
            text=f"üìù {get_text('employee_management.edit', language)}",
            callback_data=f"edit_employee_{employee_id}"
        )]
    ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(
        text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
        callback_data="employee_mgmt_main"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_roles_management_keyboard(selected_roles: list = None, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    
    Args:
        selected_roles: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å —Ä–æ–ª—è–º–∏
    """
    if selected_roles is None:
        selected_roles = []
    
    buttons = []
    
    # –†–æ–ª–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    roles = [
        ('executor', 'üõ†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'),
        ('manager', 'üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä'),
        ('applicant', 'üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å')
    ]
    
    for role_key, role_name in roles:
        is_selected = role_key in selected_roles
        checkbox = "‚úÖ" if is_selected else "‚¨ú"
        buttons.append([InlineKeyboardButton(
            text=f"{checkbox} {role_name}",
            callback_data=f"role_toggle_{role_key}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([
        InlineKeyboardButton(
            text=f"üíæ {get_text('buttons.save', language)}",
            callback_data="role_save"
        ),
        InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="role_cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_specializations_selection_keyboard(selected_specializations: list = None, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    
    Args:
        selected_specializations: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    """
    if selected_specializations is None:
        selected_specializations = []
    
    buttons = []
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    specializations = [
        ('plumber', 'üîß –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫'),
        ('electrician', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫'),
        ('hvac', 'üå°Ô∏è HVAC'),
        ('cleaning', 'üßπ –£–±–æ—Ä–∫–∞'),
        ('security', 'üîí –û—Ö—Ä–∞–Ω–∞'),
        ('maintenance', 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'),
        ('landscaping', 'üå≥ –õ–∞–Ω–¥—à–∞—Ñ—Ç'),
        ('repair', 'üî® –†–µ–º–æ–Ω—Ç'),
        ('installation', 'üì¶ –ú–æ–Ω—Ç–∞–∂')
    ]
    
    for spec_key, spec_name in specializations:
        is_selected = spec_key in selected_specializations
        checkbox = "‚úÖ" if is_selected else "‚¨ú"
        buttons.append([InlineKeyboardButton(
            text=f"{checkbox} {spec_name}",
            callback_data=f"spec_toggle_{spec_key}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([
        InlineKeyboardButton(
            text=f"üíæ {get_text('buttons.save', language)}",
            callback_data="spec_save"
        ),
        InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="spec_cancel"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_employee_edit_keyboard(employee_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è)
    
    Args:
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    buttons = [
        [InlineKeyboardButton(
            text=f"üìù {get_text('employee_management.full_name', language)}",
            callback_data=f"edit_employee_name_{employee_id}"
        )],
        [InlineKeyboardButton(
            text=f"üì± {get_text('employee_management.phone', language)}",
            callback_data=f"edit_employee_phone_{employee_id}"
        )],
        [InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language)}",
            callback_data=f"employee_mgmt_employee_{employee_id}"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_cancel_keyboard(language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
    
    Args:
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="employee_mgmt_main"
        )]
    ])


def get_confirmation_keyboard(action: str, employee_id: int, language: str = 'ru') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        employee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
    Returns:
        InlineKeyboardMarkup —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚úÖ {get_text('buttons.confirm', language)}",
            callback_data=f"confirm_{action}_{employee_id}"
        )],
        [InlineKeyboardButton(
            text=f"‚ùå {get_text('buttons.cancel', language)}",
            callback_data="employee_mgmt_main"
        )]
    ])


# ‚ïê‚ïê‚ïê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ‚ïê‚ïê‚ïê

def _format_employee_name(employee) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if employee.first_name and employee.last_name:
        return f"{employee.first_name} {employee.last_name}"
    elif employee.first_name:
        return employee.first_name
    elif employee.username:
        return f"@{employee.username}"
    else:
        return f"ID: {employee.telegram_id}"


def _get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "pending": "üìù",
        "approved": "‚úÖ",
        "blocked": "üö´",
        "active": "‚úÖ",
        "inactive": "‚è∏Ô∏è"
    }
    return status_emojis.get(status, "‚ùì")
