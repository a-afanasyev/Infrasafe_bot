"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω
"""

from typing import List, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from uk_management_bot.database.models.shift import Shift
from uk_management_bot.database.models.shift_transfer import ShiftTransfer
from uk_management_bot.database.models.user import User


def shift_selection_keyboard(shifts: List[Shift], user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏

    Args:
        shifts: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    texts = {
        "ru": {
            "select_shift": "üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É",
            "shift_info": "üìÖ {date} {time} ({status})",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "uz": {
            "select_shift": "üîÑ Smena o'tkazish",
            "shift_info": "üìÖ {date} {time} ({status})",
            "back": "‚¨ÖÔ∏è Ortga"
        }
    }

    t = texts.get(user_lang, texts["ru"])

    for shift in shifts:
        shift_date = shift.start_time.strftime("%d.%m")
        shift_time = shift.start_time.strftime("%H:%M")

        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_map = {
            "planned": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞" if user_lang == "ru" else "Rejalashtirilgan",
            "active": "–ê–∫—Ç–∏–≤–Ω–∞" if user_lang == "ru" else "Faol",
            "paused": "–ü–∞—É–∑–∞" if user_lang == "ru" else "Pauza"
        }

        status = status_map.get(shift.status, shift.status)

        shift_text = t["shift_info"].format(
            date=shift_date,
            time=shift_time,
            status=status
        )

        builder.row(
            InlineKeyboardButton(
                text=shift_text,
                callback_data=f"transfer_shift:{shift.id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(
            text=t["back"],
            callback_data="shift_transfer:back"
        )
    )

    return builder.as_markup()


def transfer_reason_keyboard(user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–¥–∞—á–∏

    Args:
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    reasons = {
        "ru": {
            "illness": "ü§í –ë–æ–ª–µ–∑–Ω—å",
            "emergency": "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "workload": "üìä –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞",
            "vacation": "üèñÔ∏è –û—Ç–ø—É—Å–∫",
            "other": "‚ùì –î—Ä—É–≥–æ–µ"
        },
        "uz": {
            "illness": "ü§í Kasallik",
            "emergency": "üö® Favqulodda holat",
            "workload": "üìä Ortiqcha ish",
            "vacation": "üèñÔ∏è Ta'til",
            "other": "‚ùì Boshqa"
        }
    }

    reason_texts = reasons.get(user_lang, reasons["ru"])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—á–∏–Ω
    for reason_key, reason_text in reason_texts.items():
        builder.row(
            InlineKeyboardButton(
                text=reason_text,
                callback_data=f"transfer_reason:{reason_key}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚¨ÖÔ∏è Ortga"
    builder.row(
        InlineKeyboardButton(
            text=back_text,
            callback_data="transfer_step:back"
        )
    )

    return builder.as_markup()


def urgency_level_keyboard(user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏

    Args:
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    urgency_levels = {
        "ru": {
            "low": "üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "normal": "üü° –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "high": "üü† –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "critical": "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
        },
        "uz": {
            "low": "üü¢ Past ustunlik",
            "normal": "üü° Oddiy ustunlik",
            "high": "üü† Yuqori ustunlik",
            "critical": "üî¥ Kritik ustunlik"
        }
    }

    levels = urgency_levels.get(user_lang, urgency_levels["ru"])

    for level_key, level_text in levels.items():
        builder.row(
            InlineKeyboardButton(
                text=level_text,
                callback_data=f"transfer_urgency:{level_key}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚¨ÖÔ∏è Ortga"
    builder.row(
        InlineKeyboardButton(
            text=back_text,
            callback_data="transfer_step:back"
        )
    )

    return builder.as_markup()


def confirm_transfer_keyboard(user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏

    Args:
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    texts = {
        "ru": {
            "confirm": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É",
            "edit": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            "cancel": "‚ùå –û—Ç–º–µ–Ω–∞"
        },
        "uz": {
            "confirm": "‚úÖ O'tkazishni tasdiqlash",
            "edit": "‚úèÔ∏è O'zgartirish",
            "cancel": "‚ùå Bekor qilish"
        }
    }

    t = texts.get(user_lang, texts["ru"])

    builder.row(
        InlineKeyboardButton(
            text=t["confirm"],
            callback_data="transfer_confirm:yes"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=t["edit"],
            callback_data="transfer_confirm:edit"
        ),
        InlineKeyboardButton(
            text=t["cancel"],
            callback_data="transfer_confirm:cancel"
        )
    )

    return builder.as_markup()


def executor_selection_keyboard(users: List[User], user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)

    Args:
        users: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    for user in users:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        display_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        if user.last_name:
            display_name += f" {user.last_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(user, 'specialization') and user.specialization:
            import json
            try:
                specializations = json.loads(user.specialization)
                if specializations:
                    spec_text = ", ".join(specializations[:2])  # –ü–µ—Ä–≤—ã–µ 2 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    display_name += f" ({spec_text})"
            except:
                pass

        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {display_name}",
                callback_data=f"assign_executor:{user.telegram_id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    auto_text = "ü§ñ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ" if user_lang == "ru" else "ü§ñ Avtomatik tayinlash"
    builder.row(
        InlineKeyboardButton(
            text=auto_text,
            callback_data="assign_executor:auto"
        )
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚¨ÖÔ∏è Ortga"
    builder.row(
        InlineKeyboardButton(
            text=back_text,
            callback_data="assign_step:back"
        )
    )

    return builder.as_markup()


def transfer_response_keyboard(user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–º–µ–Ω—ã

    Args:
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    texts = {
        "ru": {
            "accept": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            "reject": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            "details": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        },
        "uz": {
            "accept": "‚úÖ Qabul qilish",
            "reject": "‚ùå Rad etish",
            "details": "‚ÑπÔ∏è Tafsilotlar"
        }
    }

    t = texts.get(user_lang, texts["ru"])

    builder.row(
        InlineKeyboardButton(
            text=t["accept"],
            callback_data="transfer_response:accept"
        ),
        InlineKeyboardButton(
            text=t["reject"],
            callback_data="transfer_response:reject"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=t["details"],
            callback_data="transfer_response:details"
        )
    )

    return builder.as_markup()


def transfers_list_keyboard(transfers: List[ShiftTransfer], user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ–¥–∞—á

    Args:
        transfers: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞—á
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_map = {
        "ru": {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "assigned": "üë§ –ù–∞–∑–Ω–∞—á–µ–Ω",
            "accepted": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        },
        "uz": {
            "pending": "‚è≥ Kutmoqda",
            "assigned": "üë§ Tayinlangan",
            "accepted": "‚úÖ Qabul qilingan",
            "rejected": "‚ùå Rad etilgan",
            "cancelled": "üö´ Bekor qilingan",
            "completed": "‚úÖ Tugallangan"
        }
    }

    statuses = status_map.get(user_lang, status_map["ru"])

    for transfer in transfers:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        date_str = transfer.created_at.strftime("%d.%m")
        status_text = statuses.get(transfer.status, transfer.status)

        button_text = f"{date_str} - {status_text}"

        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_transfer:{transfer.id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚¨ÖÔ∏è Ortga"
    builder.row(
        InlineKeyboardButton(
            text=back_text,
            callback_data="transfers:back"
        )
    )

    return builder.as_markup()


def skip_comment_keyboard(user_lang: str = "ru") -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    Args:
        user_lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    skip_text = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" if user_lang == "ru" else "‚è≠Ô∏è O'tkazib yuborish"
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚¨ÖÔ∏è Ortga"

    builder.row(
        InlineKeyboardButton(
            text=skip_text,
            callback_data="transfer_comment:skip"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text=back_text,
            callback_data="transfer_step:back"
        )
    )

    return builder.as_markup()