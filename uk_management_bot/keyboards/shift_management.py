"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ (–º–µ–Ω–µ–¥–∂–µ—Ä—ã)
"""

from datetime import datetime, date, timedelta
from typing import List, Optional, Dict, Any

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from uk_management_bot.database.models.shift_template import ShiftTemplate


def get_main_shift_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω", callback_data="shift_planning")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã", callback_data="shift_analytics")],
        [InlineKeyboardButton(text="üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="template_management")],
        [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="shift_executor_assignment")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_planning_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω"""
    keyboard = [
        [InlineKeyboardButton(text="üóÇÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—É –∏–∑ —à–∞–±–ª–æ–Ω–∞", callback_data="create_shift_from_template")],
        [InlineKeyboardButton(text="üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é", callback_data="plan_weekly_schedule")],
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="auto_planning")],
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="view_schedule")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_template_selection_keyboard(templates: List[ShiftTemplate], lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —Å–º–µ–Ω—ã"""
    keyboard = []
    
    for template in templates:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        time_info = f"{template.start_hour:02d}:{template.start_minute or 0:02d}"
        duration_info = f"{template.duration_hours}—á"
        
        specialization_info = ""
        if template.required_specializations:
            if len(template.required_specializations) == 1:
                specialization_info = f" ‚Ä¢ {template.required_specializations[0]}"
            else:
                specialization_info = f" ‚Ä¢ {len(template.required_specializations)} —Å–ø–µ—Ü."
        
        button_text = f"{template.name} ({time_info}, {duration_info}{specialization_info})"
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text, 
                callback_data=f"select_template:{template.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_planning")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_date_selection_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = []
    today = date.today()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö 14 –¥–Ω–µ–π
    for i in range(15):
        target_date = today + timedelta(days=i)
        
        if i == 0:
            date_text = "üî• –°–µ–≥–æ–¥–Ω—è"
        elif i == 1:
            date_text = "üìÖ –ó–∞–≤—Ç—Ä–∞"
        else:
            date_text = target_date.strftime("%d.%m (%A)")
        
        full_date_text = f"{date_text} - {target_date.strftime('%d.%m.%Y')}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=full_date_text, 
                callback_data=f"select_date:{i}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_planning")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_analytics_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–º–µ–Ω"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="weekly_analytics")],
        [InlineKeyboardButton(text="üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="monthly_analytics")],
        [InlineKeyboardButton(text="üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="workload_forecast")],
        [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", callback_data="optimization_recommendations")],
        [InlineKeyboardButton(text="üìã –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="efficiency_analysis")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_details_keyboard(shift, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã"""
    keyboard = []
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    if shift.status == 'planned':
        keyboard.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_shift:{shift.id}")],
            [InlineKeyboardButton(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign_executor:{shift.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_shift:{shift.id}")]
        ])
    elif shift.status == 'active':
        keyboard.extend([
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data=f"view_shift_requests:{shift.id}")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", callback_data=f"contact_executor:{shift.id}")],
            [InlineKeyboardButton(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data=f"end_shift_early:{shift.id}")]
        ])
    elif shift.status == 'completed':
        keyboard.extend([
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ", callback_data=f"shift_report:{shift.id}")],
            [InlineKeyboardButton(text="üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"completed_requests:{shift.id}")],
            [InlineKeyboardButton(text="üìù –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"rate_executor:{shift.id}")]
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data=f"export_shift:{shift.id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shifts")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_executor_selection_keyboard(available_executors: List, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã"""
    keyboard = []
    
    for executor in available_executors:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        executor_name = f"{executor.first_name} {executor.last_name or ''}".strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        specialization_info = ""
        if hasattr(executor, 'specializations') and executor.specializations:
            if isinstance(executor.specializations, list) and executor.specializations:
                specialization_info = f" ‚Ä¢ {executor.specializations[0]}"
                if len(executor.specializations) > 1:
                    specialization_info += f" (+{len(executor.specializations)-1})"
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        availability_emoji = "üü¢"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–µ–Ω
        
        button_text = f"{availability_emoji} {executor_name}{specialization_info}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text, 
                callback_data=f"assign_to_executor:{executor.telegram_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="auto_assign_executor")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_planning")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_schedule_view_keyboard(current_date: date, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    prev_date = current_date - timedelta(days=1)
    next_date = current_date + timedelta(days=1)
    
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", callback_data=f"schedule_date:{prev_date.isoformat()}"),
        InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data=f"schedule_date:{next_date.isoformat()}")
    ])
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    keyboard.append([
        InlineKeyboardButton(text="üî• –°–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_date:{today.isoformat()}"),
        InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"schedule_date:{tomorrow.isoformat()}")
    ])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    keyboard.extend([
        [InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_week_view")],
        [InlineKeyboardButton(text="üìä –ú–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="schedule_month_view")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_planning")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_auto_planning_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="auto_plan_week")],
        [InlineKeyboardButton(text="üìÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü", callback_data="auto_plan_month")],
        [InlineKeyboardButton(text="‚ö° –°–æ–∑–¥–∞—Ç—å —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="auto_plan_tomorrow")],
        [InlineKeyboardButton(text="üî• –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="emergency_planning")],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="auto_planning_settings"),
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑", callback_data="auto_planning_analysis")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_planning")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_template_management_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–º–µ–Ω"""
    keyboard = [
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates_view_all")],
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="create_new_template")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data="templates_edit")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="template_usage_stats")],
        [InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="import_templates")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="export_templates")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_executor_assignment_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–º–µ–Ω—É", callback_data="assign_to_shift")],
        [InlineKeyboardButton(text="üìÖ –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="bulk_assignment")],
        [InlineKeyboardButton(text="ü§ñ –ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="ai_assignment")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É", callback_data="redistribute_load")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="workload_analysis")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_conflicts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_keyboard(action: str, item_id: str, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}:{item_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{action}:{item_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)