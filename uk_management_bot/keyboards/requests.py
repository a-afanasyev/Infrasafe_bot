from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Optional
import re
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.database.session import get_db
from uk_management_bot.utils.constants import ADDRESS_TYPE_DISPLAYS
from uk_management_bot.utils.address_helpers import get_address_type_from_display
import logging
from uk_management_bot.utils.constants import (
    REQUEST_CATEGORIES,
    CALLBACK_PREFIX_CATEGORY,
    CALLBACK_PREFIX_URGENCY,
    REQUEST_URGENCIES,
)
from uk_management_bot.utils.constants import REQUEST_STATUSES
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.request_helpers import RequestCallbackHelper

logger = logging.getLogger(__name__)

def get_categories_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—è–≤–æ–∫ (–µ–¥–∏–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ REQUEST_CATEGORIES)"""
    keyboard = []
    categories = REQUEST_CATEGORIES
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    for i in range(0, len(categories), 2):
        row = [KeyboardButton(text=categories[i])]
        if i + 1 < len(categories):
            row.append(KeyboardButton(text=categories[i + 1]))
        keyboard.append(row)
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_categories_inline_keyboard() -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∑–∞—è–≤–æ–∫ (callback_query)"""
    keyboard: List[List[InlineKeyboardButton]] = []
    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2 –≤ —Ä—è–¥
    row: List[InlineKeyboardButton] = []
    for idx, category in enumerate(REQUEST_CATEGORIES):
        row.append(InlineKeyboardButton(text=category, callback_data=f"{CALLBACK_PREFIX_CATEGORY}{category}"))
        if (idx + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_categories_inline_keyboard_with_cancel() -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –≤–Ω–∏–∑—É (–¥–ª—è –ø—Ä–æ–¥-UX)."""
    kb = get_categories_inline_keyboard()
    rows = list(kb.inline_keyboard)
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def get_urgency_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–µ–¥–∏–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ REQUEST_URGENCIES)"""
    keyboard = [[KeyboardButton(text=urgency)] for urgency in REQUEST_URGENCIES]
    keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_urgency_inline_keyboard() -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (REQUEST_URGENCIES)"""
    keyboard = [[InlineKeyboardButton(text=urgency, callback_data=f"{CALLBACK_PREFIX_URGENCY}{urgency}")] for urgency in REQUEST_URGENCIES]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = [
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_media_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    keyboard = [
        [KeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_confirmation_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_inline_confirmation_keyboard() -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_edit_request_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        ["üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
        ["üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"],
        ["üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"],
        ["‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å"],
        ["üè† –ò–∑–º–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"],
        ["üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_request_status_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    keyboard = [
        ["üîß –í —Ä–∞–±–æ—Ç—É"],
        ["üîÑ –í —Ä–∞–±–æ—Ç–µ"],
        ["üí∞ –ó–∞–∫—É–ø"],
        ["‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–µ"],
        ["‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"],
        ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_requests_filter_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
    keyboard = [
        ["üìã –í—Å–µ –∑–∞—è–≤–∫–∏"],
        ["üÜï –ù–æ–≤—ã–µ"],
        ["üîÑ –í —Ä–∞–±–æ—Ç–µ"],
        ["üí∞ –ó–∞–∫—É–ø"],
        ["‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"],
        ["‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_pagination_keyboard(current_page: int, total_pages: int, request_number: str = None, show_reply_clarify: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"page_{current_page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page"))
    
    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"page_{current_page+1}"))
    
    keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if request_number:
        action_buttons = [
            InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("view_", request_number)),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("edit_", request_number)),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("delete_", request_number))
        ]
        keyboard.append(action_buttons)
        if show_reply_clarify:
            keyboard.append([InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("replyclarify_", request_number))])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_request_actions_keyboard(request_number: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π"""
    keyboard = [
        [
            InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("view_", request_number)),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("edit_", request_number))
        ],
        [
            InlineKeyboardButton(text="üîß –í —Ä–∞–±–æ—Ç—É", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("accept_", request_number)),
            InlineKeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–µ", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("clarify_", request_number))
        ],
        [
            InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç—É", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("work_", request_number)),
            InlineKeyboardButton(text="üí∞ –ó–∞–∫—É–ø", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("purchase_", request_number))
        ],
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("complete_", request_number)),
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("approve_", request_number))
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("cancel_", request_number))
        ],
        [
            InlineKeyboardButton(text="üö´ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–∫–∞–∑", callback_data=RequestCallbackHelper.create_callback_data_with_request_number("deny_", request_number))
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =====================================
# –ö–õ–ê–í–ò–ê–¢–£–†–ê –í–´–ë–û–†–ê –ê–î–†–ï–°–ê
# =====================================

async def get_address_selection_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AuthService —Å —Å–µ—Å—Å–∏–µ–π –ë–î
        db_session = next(get_db())
        auth_service = AuthService(db_session)
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        available_addresses = await auth_service.get_available_addresses(user_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∞–¥—Ä–µ—Å–∞: {available_addresses}")
        
        # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
        address_buttons = _create_address_buttons(available_addresses)
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∫–Ω–æ–ø–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: {len(address_buttons)} —Å—Ç—Ä–æ–∫")
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω—ã
        manual_buttons = _get_manual_input_buttons()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {len(manual_buttons)} —Å—Ç—Ä–æ–∫")
        
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        all_buttons = address_buttons + manual_buttons
        logger.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {len(all_buttons)}")
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(keyboard=all_buttons, resize_keyboard=True)
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return keyboard
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        fallback_keyboard = [
            [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return ReplyKeyboardMarkup(keyboard=fallback_keyboard, resize_keyboard=True)


def get_status_filter_inline_keyboard(active_status: Optional[str] = None, language: str = "ru") -> InlineKeyboardMarkup:
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –ê—Ä—Ö–∏–≤.

    - –ê–∫—Ç–∏–≤–Ω—ã–µ: –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã, –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö
    - –ê—Ä—Ö–∏–≤: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    """
    active_label = "–ê–∫—Ç–∏–≤–Ω—ã–µ"
    archive_label = "–ê—Ä—Ö–∏–≤"

    active_text = f"‚Ä¢ {active_label}" if active_status == "active" else active_label
    archive_text = f"‚Ä¢ {archive_label}" if active_status == "archive" else archive_label

    buttons = [
        [InlineKeyboardButton(text=active_text, callback_data="status_active")],
        [InlineKeyboardButton(text=archive_text, callback_data="status_archive")],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_category_filter_inline_keyboard(active_category: Optional[str] = None, language: str = "ru") -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    buttons = []
    all_label = get_text("requests.all_categories", language) or "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    all_text = all_label if not active_category else f"‚Ä¢ {all_label}"
    buttons.append([InlineKeyboardButton(text=all_text, callback_data="categoryfilter_all")])

    # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
    row: List[InlineKeyboardButton] = []
    for idx, category in enumerate(REQUEST_CATEGORIES):
        text = f"‚Ä¢ {category}" if active_category == category else category
        row.append(InlineKeyboardButton(text=text, callback_data=f"categoryfilter_{category}"))
        if (idx + 1) % 2 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_reset_filters_inline_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    reset_label = get_text("requests.reset_filters", language) or "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=reset_label, callback_data="filters_reset")]]
    )


def get_period_filter_inline_keyboard(active_period: Optional[str] = None, language: str = "ru") -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É."""
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    periods = [
        ("all", get_text("requests.period_all", language) or "–í—Å–µ –≤—Ä–µ–º—è"),
        ("7d", get_text("requests.period_7d", language) or "7 –¥–Ω–µ–π"),
        ("30d", get_text("requests.period_30d", language) or "30 –¥–Ω–µ–π"),
        ("90d", get_text("requests.period_90d", language) or "90 –¥–Ω–µ–π"),
    ]
    rows: List[List[InlineKeyboardButton]] = []
    for value, label in periods:
        text = f"‚Ä¢ {label}" if active_period == value else label
        rows.append([InlineKeyboardButton(text=text, callback_data=f"period_{value}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def get_executor_filter_inline_keyboard(active_executor: Optional[str] = None, language: str = "ru") -> InlineKeyboardMarkup:
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (—è/–≤—Å–µ)."""
    options = [
        ("all", get_text("requests.executor_all", language) or "–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"),
        ("me", get_text("requests.executor_me", language) or "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"),
    ]
    rows: List[List[InlineKeyboardButton]] = []
    for value, label in options:
        text = f"‚Ä¢ {label}" if active_executor == value else label
        rows.append([InlineKeyboardButton(text=text, callback_data=f"executorfilter_{value}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _create_address_buttons(available_addresses: Dict[str, str]) -> List[List[KeyboardButton]]:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        available_addresses: –°–ª–æ–≤–∞—Ä—å –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç AuthService
        
    Returns:
        List[List[KeyboardButton]]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
    """
    buttons = []
    
    if not available_addresses:
        logger.debug("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
        return buttons
    
    # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    address_buttons = []
    for address_type, address in available_addresses.items():
        button_text = _format_address_button(address_type, address)
        address_buttons.append(KeyboardButton(text=button_text))
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–¥—Ä–µ—Å–∞: {button_text}")
    
    # –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(address_buttons), 2):
        row = address_buttons[i:i+2]
        buttons.append(row)
    
    return buttons


def _format_address_button(address_type: str, address: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∞–¥—Ä–µ—Å–∞
    
    Args:
        address_type: –¢–∏–ø –∞–¥—Ä–µ—Å–∞ (home/apartment/yard)
        address: –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        
    Example:
        "üè† –ú–æ–π –¥–æ–º: —É–ª. –õ–µ–Ω–∏–Ω–∞, 1"
    """
    display_name = ADDRESS_TYPE_DISPLAYS.get(address_type, address_type)
    return f"{display_name}: {address}"


def _get_manual_input_buttons() -> List[List[KeyboardButton]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω—ã
    
    Returns:
        List[List[KeyboardButton]]: –ö–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –æ—Ç–º–µ–Ω—ã
    """
    return [
        [KeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]


async def parse_selected_address(selected_text: str) -> Dict[str, Optional[str]]:
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    
    Args:
        selected_text: –¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ
        
    Example:
        {"type": "predefined", "address_type": "home", "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1"}
        {"type": "manual", "address": None}
        {"type": "cancel", "address": None}
    """
    try:
        logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {selected_text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if selected_text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
            logger.debug("–í—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞")
            return {"type": "manual", "address": None}
        
        if selected_text == "‚ùå –û—Ç–º–µ–Ω–∞":
            logger.debug("–í—ã–±—Ä–∞–Ω–∞ –æ—Ç–º–µ–Ω–∞")
            return {"type": "cancel", "address": None}
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        # –§–æ—Ä–º–∞—Ç: "üè† –ú–æ–π –¥–æ–º: —É–ª. –õ–µ–Ω–∏–Ω–∞, 1"
        if ": " in selected_text:
            display_part, address_part = selected_text.split(": ", 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É display_part
            address_type = None
            if "–¥–æ–º" in display_part.lower():
                address_type = "home"
            elif "–∫–≤–∞—Ä—Ç–∏—Ä–∞" in display_part.lower():
                address_type = "apartment"
            elif "–¥–≤–æ—Ä" in display_part.lower():
                address_type = "yard"
            
            if address_type:
                logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω - —Ç–∏–ø: {address_type}, –∞–¥—Ä–µ—Å: {address_part}")
                return {
                    "type": "predefined",
                    "address_type": address_type,
                    "address": address_part
                }
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –≤–µ—Ä–Ω—É—Ç—å unknown
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã–±–æ—Ä: {selected_text}")
        return {"type": "unknown", "address": selected_text}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ '{selected_text}': {e}")
        return {"type": "error", "address": selected_text}
