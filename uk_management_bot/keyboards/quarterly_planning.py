from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any, Optional
from datetime import datetime, date
import calendar

from uk_management_bot.services.specialization_planning_service import SPECIALIZATION_CONFIGS


def get_quarterly_planning_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª", callback_data="qp_create_plan")],
        [InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –ø–ª–∞–Ω—ã", callback_data="qp_current_plans")],
        [InlineKeyboardButton(text="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏", callback_data="qp_manage_transfers")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="qp_statistics")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_quarter_selection_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    now = datetime.now()
    current_year = now.year
    current_month = now.month
    current_quarter = (current_month - 1) // 3 + 1
    
    keyboard = []
    
    # –¢–µ–∫—É—â–∏–π –≥–æ–¥
    quarters = [
        ("I –∫–≤–∞—Ä—Ç–∞–ª", f"qp_quarter_{current_year}_1", 1, 3),
        ("II –∫–≤–∞—Ä—Ç–∞–ª", f"qp_quarter_{current_year}_2", 4, 6),
        ("III –∫–≤–∞—Ä—Ç–∞–ª", f"qp_quarter_{current_year}_3", 7, 9),
        ("IV –∫–≤–∞—Ä—Ç–∞–ª", f"qp_quarter_{current_year}_4", 10, 12),
    ]
    
    for i, (text, callback_data, start_month, end_month) in enumerate(quarters, 1):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
        if i == current_quarter:
            text = f"üîπ {text} (—Ç–µ–∫—É—â–∏–π)"
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –∫–≤–∞—Ä—Ç–∞–ª—ã
        elif i < current_quarter:
            text = f"‚è∏Ô∏è {text}"
            
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    
    # –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
    next_year = current_year + 1
    keyboard.append([InlineKeyboardButton(text=f"üìÖ {next_year} –≥–æ–¥", callback_data=f"qp_year_{next_year}")])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_year_quarters_keyboard(year: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞."""
    keyboard = []
    
    quarters = [
        (f"I –∫–≤–∞—Ä—Ç–∞–ª {year}", f"qp_quarter_{year}_1"),
        (f"II –∫–≤–∞—Ä—Ç–∞–ª {year}", f"qp_quarter_{year}_2"),
        (f"III –∫–≤–∞—Ä—Ç–∞–ª {year}", f"qp_quarter_{year}_3"),
        (f"IV –∫–≤–∞—Ä—Ç–∞–ª {year}", f"qp_quarter_{year}_4"),
    ]
    
    for text, callback_data in quarters:
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="qp_select_quarter")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_specialization_selection_keyboard(selected: Optional[List[str]] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if selected is None:
        selected = []
    
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": ["—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "—Å–ª–µ—Å–∞—Ä–Ω—ã–µ_—Ä–∞–±–æ—Ç—ã", "–º–µ–ª–∫–∏–π_—Ä–µ–º–æ–Ω—Ç"],
        "üè† –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": ["—É–±–æ—Ä–∫–∞", "–≤—ã–≤–æ–∑_–º—É—Å–æ—Ä–∞", "–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è", "–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ"],
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": ["–æ—Ö—Ä–∞–Ω–∞", "–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "–∫–æ–Ω—Ç—Ä–æ–ª—å_–¥–æ—Å—Ç—É–ø–∞"],
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": ["—É–ø—Ä–∞–≤–ª—è—é—â–∏–π"]
    }
    
    for category, specs in categories.items():
        keyboard.append([InlineKeyboardButton(text=category, callback_data="qp_category_header")])
        
        for spec in specs:
            if spec in SPECIALIZATION_CONFIGS:
                config = SPECIALIZATION_CONFIGS[spec]
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                schedule_emoji = {
                    "duty_24_3": "üåô",  # –°—É—Ç–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–æ–µ
                    "workday_5_2": "üìÖ",  # 5/2
                    "shift_2_2": "‚ö°",    # 2/2
                    "flexible": "üîÑ"       # –ì–∏–±–∫–∏–π
                }.get(config.schedule_type.value, "‚ö™")
                
                selected_emoji = "‚úÖ" if spec in selected else "‚ö™"
                text = f"{selected_emoji} {schedule_emoji} {spec.replace('_', ' ').title()}"
                keyboard.append([InlineKeyboardButton(
                    text=text, 
                    callback_data=f"qp_toggle_spec_{spec}"
                )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    management_buttons = []
    if selected:
        management_buttons.append(InlineKeyboardButton(
            text="‚úÖ –í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", 
            callback_data="qp_select_all_chosen"
        ))
        management_buttons.append(InlineKeyboardButton(
            text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", 
            callback_data="qp_clear_selection"
        ))
    
    management_buttons.append(InlineKeyboardButton(
        text="üîò –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", 
        callback_data="qp_select_all"
    ))
    
    if management_buttons:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        for i in range(0, len(management_buttons), 2):
            keyboard.append(management_buttons[i:i+2])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if selected:
        keyboard.append([InlineKeyboardButton(
            text=f"‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(selected)} –≤—ã–±—Ä–∞–Ω–æ)", 
            callback_data="qp_confirm_specializations"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_select_quarter")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_planning_confirmation_keyboard(year: int, quarter: int, specializations: List[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞."""
    keyboard = []
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    quarter_months = {
        1: "–Ø–Ω–≤-–ú–∞—Ä",
        2: "–ê–ø—Ä-–ò—é–Ω", 
        3: "–ò—é–ª-–°–µ–Ω",
        4: "–û–∫—Ç-–î–µ–∫"
    }
    
    period_text = f"{quarter_months[quarter]} {year}"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="qp_execute_planning")],
        [InlineKeyboardButton(text="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="qp_advanced_settings")],
        [InlineKeyboardButton(text="üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="qp_preview_plan")],
    ])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
    keyboard.append([
        InlineKeyboardButton(text="üåô 24/7 –ø–æ–∫—Ä—ã—Ç–∏–µ", callback_data="qp_toggle_247"),
        InlineKeyboardButton(text="‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏", callback_data="qp_toggle_balance")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="qp_edit_specializations")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="qp_select_quarter")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_back_to_specs")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_planning_results_keyboard(plan_id: Optional[int] = None, has_conflicts: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    keyboard = []
    
    if plan_id:
        # –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
        keyboard.extend([
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"qp_plan_stats_{plan_id}")],
            [InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data=f"qp_export_plan_{plan_id}")],
            [InlineKeyboardButton(text="üë• –£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data=f"qp_notify_employees_{plan_id}")],
        ])
        
        if has_conflicts:
            keyboard.append([InlineKeyboardButton(
                text="‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã", 
                callback_data=f"qp_resolve_conflicts_{plan_id}"
            )])
        
        # –î–µ–π—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", callback_data=f"qp_adjust_plan_{plan_id}")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data=f"qp_recalculate_{plan_id}")],
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="qp_create_plan")],
        [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="qp_analytics")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="qp_main_menu")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_transfer_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∞–º–∏ —Å–º–µ–Ω."""
    keyboard = [
        [InlineKeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏", callback_data="qp_active_transfers")],
        [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏", callback_data="qp_pending_transfers")],
        [InlineKeyboardButton(text="‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞—á", callback_data="qp_transfer_history")],
        [InlineKeyboardButton(text="‚ûï –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞—á—É", callback_data="qp_initiate_transfer")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–¥–∞—á", callback_data="qp_search_transfers")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_statistics_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton(text="üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤", callback_data="qp_stats_efficiency")],
        [InlineKeyboardButton(text="üë• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="qp_stats_workload")],
        [InlineKeyboardButton(text="üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π", callback_data="qp_stats_coverage")],
        [InlineKeyboardButton(text="‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", callback_data="qp_stats_timing")],
        [InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="qp_stats_recommendations")],
        [InlineKeyboardButton(text="üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="qp_export_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_advanced_settings_keyboard(settings: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if settings is None:
        settings = {}
    
    keyboard = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
    coverage_24_7 = settings.get("coverage_24_7", False)
    coverage_text = "‚úÖ" if coverage_24_7 else "‚ùå"
    keyboard.append([InlineKeyboardButton(
        text=f"{coverage_text} 24/7 –ø–æ–∫—Ä—ã—Ç–∏–µ", 
        callback_data="qp_toggle_coverage_247"
    )])
    
    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
    load_balancing = settings.get("load_balancing", True)
    balance_text = "‚úÖ" if load_balancing else "‚ùå"
    keyboard.append([InlineKeyboardButton(
        text=f"{balance_text} –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏", 
        callback_data="qp_toggle_load_balancing"
    )])
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏
    auto_transfers = settings.get("auto_transfers", True)
    transfer_text = "‚úÖ" if auto_transfers else "‚ùå"
    keyboard.append([InlineKeyboardButton(
        text=f"{transfer_text} –ê–≤—Ç–æ-–ø–µ—Ä–µ–¥–∞—á–∏", 
        callback_data="qp_toggle_auto_transfers"
    )])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications = settings.get("notifications", True)
    notify_text = "‚úÖ" if notifications else "‚ùå"
    keyboard.append([InlineKeyboardButton(
        text=f"{notify_text} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
        callback_data="qp_toggle_notifications"
    )])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
    keyboard.extend([
        [InlineKeyboardButton(text="‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã", callback_data="qp_set_work_hours")],
        [InlineKeyboardButton(text="üìÖ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ", callback_data="qp_calendar_exceptions")],
        [InlineKeyboardButton(text="üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–º–µ–Ω", callback_data="qp_shift_rotation_settings")],
    ])
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    keyboard.extend([
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="qp_save_settings")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="qp_reset_settings")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω—É", callback_data="qp_back_to_confirmation")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_plan_preview_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞."""
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥", callback_data="qp_preview_calendar")],
        [InlineKeyboardButton(text="üë• –ü–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="qp_preview_employees")],
        [InlineKeyboardButton(text="üîß –ü–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º", callback_data="qp_preview_specializations")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="qp_preview_stats")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã", callback_data="qp_preview_conflicts")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="qp_back_to_confirmation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_conflict_resolution_keyboard(conflict_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"qp_auto_resolve_{conflict_id}")],
        [InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"qp_choose_executor_{conflict_id}")],
        [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"qp_change_time_{conflict_id}")],
        [InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç", callback_data=f"qp_skip_conflict_{conflict_id}")],
        [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞", callback_data=f"qp_conflict_details_{conflict_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤", callback_data="qp_conflicts_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)