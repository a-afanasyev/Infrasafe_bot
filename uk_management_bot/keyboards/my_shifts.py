"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–ú–æ–∏ —Å–º–µ–Ω—ã"
"""

from datetime import datetime, date, timedelta
from typing import List, Optional, Dict, Any

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from uk_management_bot.database.models.shift import Shift


def get_my_shifts_menu(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–∏—Ö —Å–º–µ–Ω"""

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    texts = {
        "ru": {
            "current": "üî• –¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã",
            "schedule": "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é",
            "history": "üìä –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω",
            "time": "‚è∞ –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏",
            "stats": "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "transfer": "üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ —Å–º–µ–Ω",
            "back": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        },
        "uz": {
            "current": "üî• Joriy smenalar",
            "schedule": "üìÖ Haftalik jadval",
            "history": "üìä Smenalar tarixi",
            "time": "‚è∞ Vaqt hisoboti",
            "stats": "üìà Mening statistikam",
            "transfer": "üîÑ Smena o'tkazish",
            "back": "üîô Menyuga qaytish"
        }
    }

    t = texts.get(lang, texts["ru"])

    keyboard = [
        [InlineKeyboardButton(text=t["current"], callback_data="view_current_shifts")],
        [InlineKeyboardButton(text=t["schedule"], callback_data="view_week_schedule")],
        [InlineKeyboardButton(text=t["history"], callback_data="shift_history")],
        [InlineKeyboardButton(text=t["time"], callback_data="time_tracking")],
        [InlineKeyboardButton(text=t["stats"], callback_data="my_statistics")],
        [InlineKeyboardButton(text=t["transfer"], callback_data="shift_transfer_menu")],
        [InlineKeyboardButton(text=t["back"], callback_data="back_to_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_list_keyboard(shifts: List[Shift], lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–º–µ–Ω"""
    keyboard = []
    
    for shift in shifts:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω—ã
        shift_date = shift.planned_start_time.date()
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        if shift_date == today:
            date_prefix = "üî•"
        elif shift_date == tomorrow:
            date_prefix = "üìÖ"
        else:
            date_prefix = "üìÜ"
        
        start_time = shift.planned_start_time.strftime("%H:%M")
        end_time = shift.planned_end_time.strftime("%H:%M") if shift.planned_end_time else "?"
        
        status_emoji = {
            'planned': '‚è±Ô∏è',
            'active': 'üî¥',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(shift.status, '‚ö™')
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        spec_info = ""
        if shift.specialization_focus and len(shift.specialization_focus) > 0:
            spec_info = f" ‚Ä¢ {shift.specialization_focus[0]}"
            if len(shift.specialization_focus) > 1:
                spec_info += f" (+{len(shift.specialization_focus)-1})"
        
        button_text = f"{date_prefix} {start_time}-{end_time} {status_emoji}{spec_info}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"shift_details:{shift.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="view_current_shifts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_shifts")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_actions_keyboard(shift: Shift, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–º–µ–Ω–æ–π"""
    keyboard = []

    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    texts = {
        "ru": {
            "start": "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É",
            "contact": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            "decline": "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–º–µ–Ω—ã",
            "end": "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É",
            "requests": "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏",
            "break": "‚è∏Ô∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤",
            "transfer": "üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É"
        },
        "uz": {
            "start": "‚ñ∂Ô∏è Smenani boshlash",
            "contact": "üìû Menejer bilan bog'lanish",
            "decline": "‚ùå Smenadan voz kechish",
            "end": "üõë Smenani tugatish",
            "requests": "üìã Mening zayavkalarim",
            "break": "‚è∏Ô∏è Tanaffus qilish",
            "transfer": "üîÑ Smenani o'tkazish"
        }
    }

    t = texts.get(lang, texts["ru"])

    # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    if shift.status == 'planned':
        # –°–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ - –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å
        keyboard.extend([
            [InlineKeyboardButton(text=t["start"], callback_data="start_shift")],
            [InlineKeyboardButton(text=t["transfer"], callback_data=f"transfer_shift:{shift.id}")],
            [InlineKeyboardButton(text=t["contact"], callback_data=f"contact_manager:{shift.id}")],
            [InlineKeyboardButton(text=t["decline"], callback_data=f"decline_shift:{shift.id}")]
        ])
    
    elif shift.status == 'active':
        # –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞—è–≤–∫–∞–º–∏
        keyboard.extend([
            [InlineKeyboardButton(text=t["end"], callback_data="end_shift")],
            [InlineKeyboardButton(text=t["requests"], callback_data=f"shift_requests:{shift.id}")],
            [InlineKeyboardButton(text=t["break"], callback_data="take_break")],
            [InlineKeyboardButton(text=t["transfer"], callback_data=f"transfer_shift:{shift.id}")]
        ])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.extend([
            [
                InlineKeyboardButton(text="üìç –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="mark_location"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")
            ],
            [InlineKeyboardButton(text="üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="emergency_help")]
        ])
    
    elif shift.status == 'completed':
        # –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard.extend([
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–µ", callback_data=f"view_shift_report:{shift.id}")],
            [InlineKeyboardButton(text="üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"completed_requests:{shift.id}")],
            [InlineKeyboardButton(text="üí∞ –†–∞—Å—á–µ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"payment_calculation:{shift.id}")]
        ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞)
    keyboard.extend([
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"shift_info:{shift.id}"),
            InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_shift:{shift.id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_current_shifts")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_filter_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–º–µ–Ω"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="filter_today"),
            InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="filter_tomorrow")
        ],
        [
            InlineKeyboardButton(text="üìÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="filter_this_week"),
            InlineKeyboardButton(text="üìÜ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="filter_next_week")
        ],
        [
            InlineKeyboardButton(text="‚è±Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="filter_planned"),
            InlineKeyboardButton(text="üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="filter_active")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="filter_completed"),
            InlineKeyboardButton(text="üóÇÔ∏è –í—Å–µ", callback_data="filter_all")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_time_tracking_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = [
        [InlineKeyboardButton(text="‚è±Ô∏è –ù–∞—á–∞—Ç—å —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏", callback_data="start_time_tracking")],
        [InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="pause_time_tracking")],
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_time_tracking")],
        [InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="time_summary")],
        [InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è —É—á–µ—Ç–∞", callback_data="time_history")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_statistics_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data="stats_month")],
        [InlineKeyboardButton(text="üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="stats_requests")],
        [InlineKeyboardButton(text="‚è∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="stats_time")],
        [InlineKeyboardButton(text="üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="stats_efficiency")],
        [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="stats_achievements")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_shifts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_break_options_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚òï –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (30 –º–∏–Ω)", callback_data="break_lunch")],
        [InlineKeyboardButton(text="üö¨ –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ (15 –º–∏–Ω)", callback_data="break_short")],
        [InlineKeyboardButton(text="üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤", callback_data="break_medical")],
        [InlineKeyboardButton(text="‚è∞ –î—Ä—É–≥–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="break_custom")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_break")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_emergency_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    keyboard = [
        [InlineKeyboardButton(text="üö® –í—ã–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã", callback_data="call_emergency_services")],
        [InlineKeyboardButton(text="üëÆ –í—ã–∑–≤–∞—Ç—å –æ—Ö—Ä–∞–Ω—É", callback_data="call_security")],
        [InlineKeyboardButton(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å", callback_data="technical_issue")],
        [InlineKeyboardButton(text="üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å", callback_data="medical_help")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º", callback_data="contact_dispatcher")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_emergency")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_requests_keyboard(shift_id: int, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ —Å–º–µ–Ω—ã"""
    keyboard = [
        [InlineKeyboardButton(text="üìã –í—Å–µ –º–æ–∏ –∑–∞—è–≤–∫–∏", callback_data=f"all_requests:{shift_id}")],
        [InlineKeyboardButton(text="üî• –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"new_requests:{shift_id}")],
        [InlineKeyboardButton(text="üî¥ –í —Ä–∞–±–æ—Ç–µ", callback_data=f"active_requests:{shift_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data=f"completed_requests:{shift_id}")],
        [InlineKeyboardButton(text="üìç –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", callback_data=f"requests_by_location:{shift_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–º–µ–Ω–µ", callback_data=f"shift_details:{shift_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_location_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="send_current_location")],
        [InlineKeyboardButton(text="üè† –û—Ç–º–µ—Ç–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="mark_address")],
        [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π", callback_data="location_history")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_shift_actions")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_shift_completion_keyboard(shift_id: int, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data=f"confirm_end_shift:{shift_id}")],
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"add_shift_report:{shift_id}")],
        [InlineKeyboardButton(text="üìä –ò—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã", callback_data=f"shift_summary:{shift_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_end_shift:{shift_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_navigation_keyboard(current_page: int, total_pages: int, callback_prefix: str, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    keyboard = []
    
    navigation_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    if current_page > 1:
        navigation_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"{callback_prefix}:{current_page - 1}")
        )
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    navigation_row.append(
        InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="page_info")
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    if current_page < total_pages:
        navigation_row.append(
            InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"{callback_prefix}:{current_page + 1}")
        )
    
    if navigation_row:
        keyboard.append(navigation_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)