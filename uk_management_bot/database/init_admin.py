#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USER_IDS
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import select
from uk_management_bot.database.session import SessionLocal
from uk_management_bot.database.models.user import User
from uk_management_bot.utils.structured_logger import get_logger

logger = get_logger(__name__)


def init_admin_user() -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USER_IDS

    Returns:
        bool: True –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    admin_ids_str = os.getenv("ADMIN_USER_IDS", "")

    if not admin_ids_str:
        logger.warning("ADMIN_USER_IDS –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π ID –∏–∑ —Å–ø–∏—Å–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    admin_ids = [id.strip() for id in admin_ids_str.split(",") if id.strip()]

    if not admin_ids:
        logger.warning("ADMIN_USER_IDS –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return False

    main_admin_id = int(admin_ids[0])

    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å Telegram ID: {main_admin_id}")

    try:
        with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            stmt = select(User).where(User.telegram_id == main_admin_id)
            existing_user = session.execute(stmt).scalar_one_or_none()

            if existing_user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                if "manager" in (existing_user.roles or ""):
                    logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={existing_user.id}, "
                               f"Telegram ID={existing_user.telegram_id}, "
                               f"Username=@{existing_user.username or '–Ω–µ –∑–∞–¥–∞–Ω'}")
                    return True
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    existing_user.roles = "applicant,executor,manager"
                    existing_user.role = "manager"  # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å
                    existing_user.active_role = "manager"
                    existing_user.status = "active"

                    session.commit()
                    logger.info(f"‚úÖ –†–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: "
                               f"ID={existing_user.id}, Telegram ID={existing_user.telegram_id}")
                    return True

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –í–°–ï–ú–ò —Ä–æ–ª—è–º–∏
            admin_user = User(
                telegram_id=main_admin_id,
                username=f"admin_{main_admin_id}",  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                last_name="",
                role="manager",
                roles="applicant,executor,manager",  # –í–°–ï —Ä–æ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                active_role="manager",
                status="approved",  # –í–ê–ñ–ù–û: approved –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!
                language="ru",
                phone="+998000000000",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                verification_status="approved"  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            )

            session.add(admin_user)
            session.commit()
            session.refresh(admin_user)

            logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   ID: {admin_user.id}")
            logger.info(f"   Telegram ID: {admin_user.telegram_id}")
            logger.info(f"   –†–æ–ª–∏: {admin_user.roles}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {admin_user.status}")
            logger.info(f"   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {admin_user.verification_status}")

            return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def init_all_admins() -> tuple[int, int]:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ ADMIN_USER_IDS

    Returns:
        tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö)
    """
    admin_ids_str = os.getenv("ADMIN_USER_IDS", "")

    if not admin_ids_str:
        logger.warning("ADMIN_USER_IDS –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return (0, 0)

    admin_ids = [int(id.strip()) for id in admin_ids_str.split(",") if id.strip()]

    if not admin_ids:
        logger.warning("ADMIN_USER_IDS –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return (0, 0)

    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {len(admin_ids)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")

    created_count = 0
    updated_count = 0

    try:
        with SessionLocal() as session:
            for admin_id in admin_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                stmt = select(User).where(User.telegram_id == admin_id)
                existing_user = session.execute(stmt).scalar_one_or_none()

                if existing_user:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Å–µ —Ä–æ–ª–∏
                    current_roles = set((existing_user.roles or "").split(","))
                    required_roles = {"applicant", "executor", "manager"}

                    if not required_roles.issubset(current_roles) or existing_user.status != "approved":
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –í–°–ï —Ä–æ–ª–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        existing_user.roles = "applicant,executor,manager"
                        existing_user.role = "manager"
                        existing_user.active_role = "manager"
                        existing_user.status = "approved"  # –í–ê–ñ–ù–û: approved!
                        if not existing_user.phone:
                            existing_user.phone = "+998000000000"  # –ó–∞–≥–ª—É—à–∫–∞

                        updated_count += 1
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ä–æ–ª–∏): Telegram ID={admin_id}")
                    else:
                        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={existing_user.id}, "
                                   f"Telegram ID={admin_id}, Username=@{existing_user.username or '–Ω–µ –∑–∞–¥–∞–Ω'}, "
                                   f"–†–æ–ª–∏={existing_user.roles}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –í–°–ï–ú–ò —Ä–æ–ª—è–º–∏
                    admin_user = User(
                        telegram_id=admin_id,
                        username=f"admin_{admin_id}",
                        first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                        last_name="",
                        role="manager",
                        roles="applicant,executor,manager",  # –í–°–ï —Ä–æ–ª–∏
                        active_role="manager",
                        status="approved",  # –í–ê–ñ–ù–û: approved!
                        language="ru",
                        phone="+998000000000",  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        verification_status="approved"
                    )
                    session.add(admin_user)
                    created_count += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: Telegram ID={admin_id}")

            session.commit()

            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ–∑–¥–∞–Ω–æ {created_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}")
            return (created_count, updated_count)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return (0, 0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    print("=" * 70)
    print("UK Management Bot - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    print("=" * 70)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
    if not admin_ids_str:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_USER_IDS –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ .env —Ñ–∞–π–ª–µ:")
        print("   ADMIN_USER_IDS=123456789,987654321")
        return 1

    print(f"üìã ADMIN_USER_IDS: {admin_ids_str}")
    print()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    created, updated = init_all_admins()

    print()
    print("=" * 70)
    if created > 0 or updated > 0:
        print(f"‚úÖ –£–°–ü–ï–®–ù–û:")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {created}")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {updated}")
        print("=" * 70)
        return 0
    else:
        print("‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print("=" * 70)
        return 1


if __name__ == "__main__":
    sys.exit(main())
