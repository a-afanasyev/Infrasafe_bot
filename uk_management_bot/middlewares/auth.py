from typing import Any, Dict, Optional
import json
import logging
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.auth_helpers import get_user_roles, get_active_role

from aiogram.types import Message, CallbackQuery

from uk_management_bot.database.models.user import User

logger = logging.getLogger(__name__)


async def auth_middleware(handler, event: Any, data: Dict[str, Any]):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    –í data —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç:
    - data["user"]: –æ–±—ä–µ–∫—Ç User –∏–ª–∏ None
    - data["user_status"]: —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (pending|approved|blocked) –∏–ª–∏ None

    –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:
    - –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'blocked' ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.

    Fail-safe –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
    - –ü—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã –∏ –ù–ï –ø–∞–¥–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    """
    telegram_id: Optional[int] = None

    try:
        # –í aiogram 3.x middleware —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Update –æ–±—ä–µ–∫—Ç–∞–º–∏
        from aiogram.types import Update
        
        if isinstance(event, Update):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ message –∏–ª–∏ callback_query
            if event.message:
                telegram_id = event.message.from_user.id if event.message.from_user else None
            elif event.callback_query:
                telegram_id = event.callback_query.from_user.id if event.callback_query.from_user else None
            else:
                telegram_id = None
        elif isinstance(event, Message):
            telegram_id = event.from_user.id if event.from_user else None
        elif isinstance(event, CallbackQuery):
            telegram_id = event.from_user.id if event.from_user else None
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            data["user"] = None
            data["user_status"] = None
            return await handler(event, data)
    except Exception:
        data["user"] = None
        data["user_status"] = None
        return await handler(event, data)

    db = data.get("db")
    if db is None or telegram_id is None:
        data["user"] = None
        data["user_status"] = None
        return await handler(event, data)

    try:
        user: Optional[User] = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        data["user"] = user
        data["user_status"] = getattr(user, "status", None) if user else None
        


        if user and user.status == "blocked":
            # –ú—è–≥–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥
            try:
                language = None
                try:
                    if isinstance(event, Message):
                        language = getattr(event.from_user, "language_code", None)
                    elif isinstance(event, CallbackQuery):
                        language = getattr(event.from_user, "language_code", None)
                except Exception:
                    language = None
                text = get_text("auth.blocked", language=language or "ru")
                if isinstance(event, Message):
                    await event.answer(text)
                elif isinstance(event, CallbackQuery):
                    await event.answer(text, show_alert=True)
                # –ù–µ –∑–æ–≤–µ–º handler ‚Äî —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥
                return None
            except Exception as send_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {send_err}")
                return None

    except Exception as exc:
        logger.warning(f"auth_middleware: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {exc}")
        data["user"] = None
        data["user_status"] = None

    return await handler(event, data)


async def role_mode_middleware(handler, event: Any, data: Dict[str, Any]):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í data —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç:
    - data["roles"]: —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (str)
    - data["active_role"]: —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å (str)

    –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
    - User.roles ‚Äî JSON-—Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º —Ä–æ–ª–µ–π
    - User.active_role ‚Äî —Å—Ç—Ä–æ–∫–∞
    - –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ roles –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –∏–∑ User.role

    Fail-safe: –Ω–∞ –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –¥–µ—Ñ–æ–ª—Ç—ã roles=["applicant"], active_role="applicant".
    """
    user: Optional[User] = data.get("user")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    if user:
        roles_list = get_user_roles(user)
        active_role = get_active_role(user)
        # –û–¢–õ–ê–î–ö–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID 48617336
        if user.telegram_id == 48617336:
            print(f"üîç MIDDLEWARE DEBUG: user.telegram_id={user.telegram_id}")
            print(f"üîç MIDDLEWARE DEBUG: user.role={user.role}")
            print(f"üîç MIDDLEWARE DEBUG: user.roles={user.roles}")
            print(f"üîç MIDDLEWARE DEBUG: user.active_role={user.active_role}")
            print(f"üîç MIDDLEWARE DEBUG: roles_list={roles_list}")
            print(f"üîç MIDDLEWARE DEBUG: active_role={active_role}")
    else:
        roles_list = ["applicant"]
        active_role = "applicant"

    data["roles"] = roles_list
    data["active_role"] = active_role

    return await handler(event, data)

