"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Document, PhotoSize
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.profile_service import ProfileService
from uk_management_bot.services.user_verification_service import UserVerificationService
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.validators import Validator
from uk_management_bot.keyboards.base import get_main_keyboard_for_role
from uk_management_bot.keyboards.onboarding import (
    get_document_type_keyboard, 
    get_document_confirmation_keyboard,
    get_onboarding_completion_keyboard,
    get_document_type_from_text,
    get_document_type_name
)
from uk_management_bot.states.onboarding import OnboardingStates
from uk_management_bot.database.models.user_verification import DocumentType

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "/start")
async def start_onboarding(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        auth_service = AuthService(db)
        user = await auth_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if user.status == "approved":
            from uk_management_bot.keyboards.base import get_main_keyboard_for_role
            await message.answer(
                get_text("welcome", language=lang),
                reply_markup=get_main_keyboard_for_role(user.active_role or user.role, user.roles or [user.role], user.status)
            )
            return
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        if not user.phone or not user.home_address:
            await message.answer(
                get_text("onboarding.welcome_new_user", language=lang) + "\n\n" + 
                get_text("onboarding.profile_incomplete", language=lang)
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            onboarding_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(
                get_text("onboarding.phone_request", language=lang),
                reply_markup=onboarding_keyboard
            )
            await state.set_state(OnboardingStates.waiting_for_phone)
            logger.info(f"–ù–∞—á–∞—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å pending - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            await message.answer(
                get_text("auth.pending", language=lang)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))

@router.message(F.text == "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def start_phone_input(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text("onboarding.share_contact", language=lang), request_contact=True)],
            [KeyboardButton(text=get_text("buttons.cancel", language=lang))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        get_text("onboarding.phone_request", language=lang),
        reply_markup=contact_keyboard
    )
    await state.set_state(OnboardingStates.waiting_for_phone)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

@router.message(OnboardingStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = message.contact.phone_number
        if not phone_number.startswith('+'):
            phone_number = '+' + phone_number
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.phone = phone_number
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await message.answer(
                get_text("onboarding.phone_saved", language=lang, phone=phone_number),
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
            await message.answer(get_text("onboarding.address_request", language=lang))
            await state.set_state(OnboardingStates.waiting_for_home_address)
        else:
            await message.answer(
                get_text("errors.unknown_error", language=lang),
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang),
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

@router.message(OnboardingStates.waiting_for_phone, F.text)
async def process_manual_phone(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == get_text("buttons.cancel", language=lang):
        await cancel_onboarding(message, state, db, user_status)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω
    system_commands = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å",
        "üîÑ –°–º–µ–Ω–∞", "üîÄ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å", "/start", "/help",
        "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
    ]
    
    if message.text in system_commands:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await state.clear()
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_number = message.text.strip()
    is_valid, error_message = Validator.validate_phone(phone_number)
    if not is_valid:
        await message.answer(get_text("onboarding.phone_invalid", language=lang))
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.phone = phone_number
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await message.answer(
                get_text("onboarding.phone_saved", language=lang, phone=phone_number),
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
            await message.answer(get_text("onboarding.address_request", language=lang))
            await state.set_state(OnboardingStates.waiting_for_home_address)
        else:
            await message.answer(get_text("errors.unknown_error", language=lang))
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

@router.message(OnboardingStates.waiting_for_home_address, F.text)
async def process_home_address(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == get_text("buttons.cancel", language=lang):
        await cancel_onboarding(message, state, db, user_status)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ –∞–¥—Ä–µ—Å
    system_commands = [
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùì –ü–æ–º–æ—â—å",
        "üîÑ –°–º–µ–Ω–∞", "üîÄ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å", "/start", "/help",
        "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
    ]
    
    if message.text in system_commands:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await state.clear()
        return
    
    address = message.text.strip()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    is_valid, error_message = Validator.validate_address(address)
    if not is_valid:
        await message.answer(get_text("onboarding.address_invalid", language=lang))
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.home_address = address
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å pending –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å
            if user.status == "pending" and not user.phone:
                # –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º pending
                pass
            elif user.phone and not user.home_address:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å - –ø–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
                user.status = "pending"
            
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {address}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            await complete_onboarding(message, state, db, user, user_status)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

async def complete_onboarding(message: Message, state: FSMContext, db: Session, user, user_status: str = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    profile_service = ProfileService(db)
    profile_data = profile_service.get_user_profile_data(message.from_user.id)
    
    completion_text = get_text("onboarding.completed", language=lang)
    
    if profile_data:
        phone = profile_data.get('phone', get_text("profile.phone_not_set", language=lang))
        home_addr = profile_data.get('home_address', get_text("profile.address_not_set", language=lang))
        
        completion_text += f"\n\nüì± {get_text('profile.phone', language=lang)} {phone}"
        completion_text += f"\nüè† {get_text('profile.home_address', language=lang)} {home_addr}"
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    completion_text += f"\n\nüìÑ {get_text('onboarding.documents.title', language=lang)}"
    completion_text += f"\n{get_text('onboarding.documents.description', language=lang)}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    completion_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        completion_text,
        reply_markup=completion_keyboard
    )
    
    await state.clear()
    logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
async def complete_onboarding_without_documents(message: Message, state: FSMContext, db: Session):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer(get_text("errors.unknown_error", language=lang))
            return
        
        completion_text = get_text("onboarding.completed", language=lang)
        completion_text += f"\n\n{get_text('onboarding.pending_approval', language=lang)}"
        
        await message.answer(
            completion_text,
            reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user.status)
        )
        
        logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))

async def cancel_onboarding(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        get_text("onboarding.cancelled", language=lang),
        reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], "approved")
    )
    
    await state.clear()
    logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@router.message(F.text == "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å")
async def start_address_input(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(get_text("onboarding.address_request", language=lang))
    await state.set_state(OnboardingStates.waiting_for_home_address)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞")

# ‚ïê‚ïê‚ïê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ì–†–£–ó–ö–ò –î–û–ö–£–ú–ï–ù–¢–û–í ‚ïê‚ïê‚ïê

@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def start_document_upload(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        get_text("onboarding.documents.title", language=lang) + "\n\n" +
        get_text("onboarding.documents.description", language=lang),
        reply_markup=get_document_type_keyboard(lang)
    )
    await state.set_state(OnboardingStates.waiting_for_document_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

@router.message(OnboardingStates.waiting_for_document_type, F.text)
async def process_document_type_selection(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        await skip_documents(message, state, db)
        return
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥":
        await complete_onboarding_with_documents(message, state, db)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document_type = get_document_type_from_text(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_document_type=document_type.value)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª
    document_type_name = get_document_type_name(document_type, lang)
    await message.answer(
        f"üì§ {get_text('onboarding.documents.upload_file', language=lang)}\n\n"
        f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type_name}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(OnboardingStates.waiting_for_document_file)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type.value}")

@router.message(OnboardingStates.waiting_for_document_file)
async def process_document_file(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    document_type_value = data.get('selected_document_type')
    
    if not document_type_value:
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()
        return
    
    document_type = DocumentType(document_type_value)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_id = None
    file_name = None
    file_size = None
    
    if message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç
        file_id = message.document.file_id
        file_name = message.document.file_name
        file_size = message.document.file_size
    elif message.photo:
        # –§–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id
        file_name = f"photo_{photo.file_id}.jpg"
        file_size = photo.file_size
    else:
        await message.answer(get_text("onboarding.documents.file_invalid", language=lang))
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
    verification_service = UserVerificationService(db)
    is_valid, error_message = verification_service.validate_document_file(file_id, file_name, file_size)
    
    if not is_valid:
        await message.answer(error_message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({
        'file_id': file_id,
        'file_name': file_name,
        'file_size': file_size
    })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    document_type_name = get_document_type_name(document_type, lang)
    confirmation_text = (
        f"üìÑ {get_text('onboarding.documents.confirm_upload', language=lang)}\n\n"
        f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type_name}\n"
        f"–§–∞–π–ª: {file_name}\n"
        f"–†–∞–∑–º–µ—Ä: {file_size // 1024} KB"
    )
    
    await message.answer(
        confirmation_text,
        reply_markup=get_document_confirmation_keyboard(lang)
    )
    await state.set_state(OnboardingStates.waiting_for_document_confirmation)

@router.message(OnboardingStates.waiting_for_document_confirmation, F.text)
async def process_document_confirmation(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É":
        await save_document(message, state, db)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_document_upload(message, state, db)
    elif message.text == "üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç":
        await start_document_upload(message, state, db)
    else:
        await message.answer(get_text("errors.unknown_error", language=lang))

async def save_document(message: Message, state: FSMContext, db: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        document_type_value = data.get('selected_document_type')
        file_id = data.get('file_id')
        file_name = data.get('file_name')
        file_size = data.get('file_size')
        
        if not all([document_type_value, file_id]):
            await message.answer(get_text("errors.unknown_error", language=lang))
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer(get_text("errors.unknown_error", language=lang))
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        verification_service = UserVerificationService(db)
        document_type = DocumentType(document_type_value)
        document = verification_service.save_user_document(
            user_id=user.id,
            document_type=document_type,
            file_id=file_id,
            file_name=file_name,
            file_size=file_size
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        document_type_name = get_document_type_name(document_type, lang)
        await message.answer(
            f"‚úÖ {get_text('onboarding.documents.document_saved', language=lang)}\n\n"
            f"–¢–∏–ø: {document_type_name}\n"
            f"–§–∞–π–ª: {file_name}",
            reply_markup=get_onboarding_completion_keyboard(lang)
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {document_type.value}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

async def cancel_document_upload(message: Message, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        get_text("onboarding.documents.upload_cancelled", language=lang),
        reply_markup=get_onboarding_completion_keyboard(lang)
    )
    await state.clear()

async def skip_documents(message: Message, state: FSMContext, db: Session):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        f"‚è≠Ô∏è {get_text('onboarding.documents.skip_documents', language=lang)}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=get_onboarding_completion_keyboard(lang)
    )
    await state.clear()

async def complete_onboarding_with_documents(message: Message, state: FSMContext, db: Session):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user:
            await message.answer(get_text("errors.unknown_error", language=lang))
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        verification_service = UserVerificationService(db)
        documents_summary = verification_service.get_user_documents_summary(user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        completion_text = get_text("onboarding.completed", language=lang)
        
        if documents_summary['total_documents'] > 0:
            completion_text += f"\n\n{get_text('onboarding.documents.documents_summary', language=lang)}"
            completion_text += f"\nüìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {documents_summary['total_documents']}"
            
            for doc_type, count in documents_summary['documents_by_type'].items():
                doc_type_name = get_document_type_name(DocumentType(doc_type), lang)
                completion_text += f"\n- {doc_type_name}: {count}"
        else:
            completion_text += f"\n\n{get_text('onboarding.documents.no_documents', language=lang)}"
        
        completion_text += f"\n\n{get_text('onboarding.pending_approval', language=lang)}"
        
        await message.answer(
            completion_text,
            reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user.status)
        )
        
        await state.clear()
        logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

# ‚ïê‚ïê‚ïê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–ù–ë–û–†–î–ò–ù–ì–ê ‚ïê‚ïê‚ïê

@router.message(F.text == "üìÑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def add_more_documents(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        get_text("onboarding.documents.title", language=lang) + "\n\n" +
        get_text("onboarding.documents.description", language=lang),
        reply_markup=get_document_type_keyboard(lang)
    )
    await state.set_state(OnboardingStates.waiting_for_document_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
async def complete_onboarding_final(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'"""
    await complete_onboarding_with_documents(message, state, db)
