"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from services.auth_service import AuthService
from services.profile_service import ProfileService
from utils.helpers import get_text
from utils.validators import Validator
from keyboards.base import get_main_keyboard_for_role

logger = logging.getLogger(__name__)
router = Router()

class OnboardingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    waiting_for_phone = State()
    waiting_for_home_address = State()

@router.message(F.text == "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def start_phone_input(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=get_text("onboarding.share_contact", language=lang), request_contact=True)],
            [KeyboardButton(text=get_text("buttons.cancel", language=lang))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        get_text("onboarding.phone_request", language=lang),
        reply_markup=contact_keyboard
    )
    await state.set_state(OnboardingStates.waiting_for_phone)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

@router.message(OnboardingStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    lang = message.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = message.contact.phone_number
        if not phone_number.startswith('+'):
            phone_number = '+' + phone_number
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.phone = phone_number
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await message.answer(
                get_text("onboarding.phone_saved", language=lang, phone=phone_number),
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
            await message.answer(get_text("onboarding.address_request", language=lang))
            await state.set_state(OnboardingStates.waiting_for_home_address)
        else:
            await message.answer(
                get_text("errors.unknown_error", language=lang),
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang),
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

@router.message(OnboardingStates.waiting_for_phone, F.text)
async def process_manual_phone(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == get_text("buttons.cancel", language=lang):
        await cancel_onboarding(message, state, db, user_status)
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_number = message.text.strip()
    is_valid, error_message = Validator.validate_phone(phone_number)
    if not is_valid:
        await message.answer(get_text("onboarding.phone_invalid", language=lang))
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.phone = phone_number
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            await message.answer(
                get_text("onboarding.phone_saved", language=lang, phone=phone_number),
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
            await message.answer(get_text("onboarding.address_request", language=lang))
            await state.set_state(OnboardingStates.waiting_for_home_address)
        else:
            await message.answer(get_text("errors.unknown_error", language=lang))
            await state.clear()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

@router.message(OnboardingStates.waiting_for_home_address, F.text)
async def process_home_address(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text == get_text("buttons.cancel", language=lang):
        await cancel_onboarding(message, state, db, user_status)
        return
    
    address = message.text.strip()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    is_valid, error_message = Validator.validate_address(address)
    if not is_valid:
        await message.answer(get_text("onboarding.address_invalid", language=lang))
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(message.from_user.id)
        
        if user:
            user.home_address = address
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å pending –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å
            if user.status == "pending" and not user.phone:
                # –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º pending
                pass
            elif user.phone and not user.home_address:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å - –ø–æ–ª–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
                user.status = "pending"
            
            db.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {address}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            await complete_onboarding(message, state, db, user, user_status)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()

async def complete_onboarding(message: Message, state: FSMContext, db: Session, user, user_status: str = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    lang = message.from_user.language_code or "ru"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    profile_service = ProfileService(db)
    profile_data = profile_service.get_user_profile_data(message.from_user.id)
    
    completion_text = get_text("onboarding.completed", language=lang)
    
    if profile_data:
        phone = profile_data.get('phone', get_text("profile.phone_not_set", language=lang))
        home_addr = profile_data.get('home_address', get_text("profile.address_not_set", language=lang))
        
        completion_text += f"\n\nüì± {get_text('profile.phone', language=lang)} {phone}"
        completion_text += f"\nüè† {get_text('profile.home_address', language=lang)} {home_addr}"
    
    completion_text += f"\n\n{get_text('onboarding.pending_approval', language=lang)}"
    
    await message.answer(
        completion_text,
        reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user_status)
    )
    
    await state.clear()
    logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

async def cancel_onboarding(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(
        get_text("onboarding.cancelled", language=lang),
        reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user_status)
    )
    
    await state.clear()
    logger.info(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@router.message(F.text == "üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å")
async def start_address_input(message: Message, state: FSMContext, db: Session):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    lang = message.from_user.language_code or "ru"
    
    await message.answer(get_text("onboarding.address_request", language=lang))
    await state.set_state(OnboardingStates.waiting_for_home_address)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞")
