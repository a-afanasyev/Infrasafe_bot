"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:
- –ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –°–ø–∏—Å–∫–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –î–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from uk_management_bot.services.user_management_service import UserManagementService
from uk_management_bot.services.specialization_service import SpecializationService
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.keyboards.user_management import (
    get_user_management_main_keyboard,
    get_user_list_keyboard,
    get_user_actions_keyboard,
    get_roles_management_keyboard,
    get_specializations_selection_keyboard,
    get_cancel_keyboard,
    get_confirmation_keyboard
)
from uk_management_bot.states.user_management import UserManagementStates
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.auth_helpers import has_admin_access
from uk_management_bot.database.models.user import User

logger = logging.getLogger(__name__)
router = Router()


# ‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_management_panel")
async def show_user_management_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    lang = callback.from_user.language_code or 'ru'
    
    # –û–¢–õ–ê–î–ö–ê
    print(f"üîç DEBUG: show_user_management_panel –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç DEBUG: roles={roles}, user={user}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from uk_management_bot.utils.auth_helpers import has_admin_access
    
    has_access = has_admin_access(roles=roles, user=user)
    print(f"üîç DEBUG: has_admin_access() –≤–µ—Ä–Ω—É–ª: {has_access}")
    
    if not has_access:
        print(f"‚ùå DEBUG: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - roles={roles}, user.role={user.role if user else 'None'}")
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    print(f"‚úÖ DEBUG: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "user_mgmt_main")
async def back_to_main_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await show_user_management_panel(callback, db, roles, active_role, user)


@router.callback_query(F.data == "user_mgmt_stats")
async def show_user_stats(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        stats_text = user_mgmt_service.format_stats_message(stats, lang)
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–ò–°–¢–ï–ú–û–ô –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_verification_panel")
async def show_verification_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from uk_management_bot.services.user_verification_service import UserVerificationService
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_service = UserVerificationService(db)
        stats = verification_service.get_verification_stats()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from uk_management_bot.keyboards.user_verification import get_verification_main_keyboard
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await callback.message.edit_text(
            get_text('verification.main_title', language=lang),
            reply_markup=get_verification_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_mgmt_stats_with_verification")
async def show_user_stats_with_verification(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from uk_management_bot.services.user_verification_service import UserVerificationService
        verification_service = UserVerificationService(db)
        verification_stats = verification_service.get_verification_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        extended_stats = f"""
üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total', 0)}
‚Ä¢ –ù–æ–≤—ã–µ (pending): {stats.get('pending', 0)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ (approved): {stats.get('approved', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (blocked): {stats.get('blocked', 0)}
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {stats.get('staff', 0)}

üîç **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:**
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_stats.get('pending', 0)}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {verification_stats.get('verified', 0)}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: {verification_stats.get('rejected', 0)}
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {verification_stats.get('pending_documents', 0)}
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {verification_stats.get('total_documents', 0)}
        """
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await callback.message.edit_text(
            extended_stats,
            reply_markup=get_user_management_main_keyboard(stats, lang),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("quick_verify_"))
async def quick_verify_user(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from uk_management_bot.services.user_verification_service import UserVerificationService
        from uk_management_bot.services.notification_service import NotificationService
        
        # –û–¥–æ–±—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        verification_service = UserVerificationService(db)
        success = verification_service.approve_verification(
            user_id=user_id,
            admin_id=callback.from_user.id
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification_service = NotificationService(db)
            await notification_service.send_verification_approved_notification(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                from aiogram import Bot
                from uk_management_bot.config.settings import settings
                from uk_management_bot.keyboards.base import get_main_keyboard_for_role
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                target_user = db.query(User).filter(User.id == user_id).first()
                if target_user:
                    bot = Bot(token=settings.BOT_TOKEN)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_roles = []
                    if target_user.roles:
                        try:
                            import json
                            user_roles = json.loads(target_user.roles) if isinstance(target_user.roles, str) else target_user.roles
                        except:
                            user_roles = ["applicant"]
                    else:
                        user_roles = ["applicant"]
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    restart_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    await bot.send_message(
                        chat_id=target_user.telegram_id,
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                        reply_markup=restart_keyboard
                    )
                    
                    await bot.session.close()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await callback.answer(
                get_text('verification.user_approved', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("quick_reject_"))
async def quick_reject_user(callback: CallbackQuery, db: Session, roles: list = None):
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from uk_management_bot.services.user_verification_service import UserVerificationService
        from uk_management_bot.services.notification_service import NotificationService
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        verification_service = UserVerificationService(db)
        success = verification_service.reject_verification(
            user_id=user_id,
            admin_id=callback.from_user.id,
            notes="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification_service = NotificationService(db)
            await notification_service.send_verification_rejected_notification(user_id)
            
            await callback.answer(
                get_text('verification.user_rejected', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–† –° –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô ‚ïê‚ïê‚ïê

def get_user_actions_keyboard_with_verification(user: User, language: str = 'ru'):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    from uk_management_bot.keyboards.user_management import get_user_actions_keyboard
    from uk_management_bot.keyboards.user_verification import get_user_verification_keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_keyboard = get_user_actions_keyboard(user, language)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verification_keyboard = get_user_verification_keyboard(user.id, language)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    combined_buttons = base_keyboard.inline_keyboard + verification_keyboard.inline_keyboard
    
    from aiogram.types import InlineKeyboardMarkup
    return InlineKeyboardMarkup(inline_keyboard=combined_buttons)


# ‚ïê‚ïê‚ïê –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ‚ïê‚ïê‚ïê

def get_user_management_main_keyboard_with_verification(stats: Dict[str, int], language: str = 'ru'):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    from uk_management_bot.keyboards.user_management import get_user_management_main_keyboard
    from uk_management_bot.keyboards.user_verification import get_verification_main_keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_keyboard = get_user_management_main_keyboard(stats, language)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    from aiogram.types import InlineKeyboardButton
    verification_button = [InlineKeyboardButton(
        text=f"üîç {get_text('verification.main_title', language)}",
        callback_data="user_verification_panel"
    )]
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    base_keyboard.inline_keyboard.insert(1, verification_button)
    
    return base_keyboard


# ‚ïê‚ïê‚ïê –°–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("user_mgmt_list_"))
async def show_user_list(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data: user_mgmt_list_{type}_{page}
        parts = callback.data.split('_')
        list_type = parts[3]  # pending, approved, blocked, staff
        page = int(parts[4]) if len(parts) > 4 else 1
        
        user_mgmt_service = UserManagementService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞
        if list_type == 'staff':
            users_data = user_mgmt_service.get_staff_users(page=page)
        else:
            users_data = user_mgmt_service.get_users_by_status(list_type, page=page)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_key = f"user_management.{list_type}_users"
        if list_type == 'staff':
            title_key = "user_management.staff_users"
        
        title = get_text(title_key, language=lang)
        total = users_data.get('total', 0)
        
        message_text = f"{title}\n\n"
        if total > 0:
            message_text += get_text('pagination.info', language=lang).format(
                page=page,
                total_pages=users_data.get('total_pages', 1),
                total_items=total
            )
        else:
            message_text += get_text('user_management.no_users_found', language=lang)
        
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=get_user_list_keyboard(users_data, list_type, lang)
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            if "message is not modified" in str(edit_error):
                await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                raise edit_error
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –î–ï–ô–°–¢–í–ò–Ø –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("user_mgmt_user_"))
async def show_user_details(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback data
        user_id = int(callback.data.split('_')[-1])
        
        user_mgmt_service = UserManagementService(db)
        user = user_mgmt_service.get_user_by_id(user_id)
        
        if not user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = user_mgmt_service.format_user_info(user, lang, detailed=True)
        
        await callback.message.edit_text(
            user_info,
            reply_markup=get_user_actions_keyboard(user, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –î–ï–ô–°–¢–í–ò–Ø –ú–û–î–ï–†–ê–¶–ò–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("user_action_approve_"))
async def handle_approve_user(callback: CallbackQuery, state: FSMContext, db: Session, 
                             roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data({
            'action': 'approve',
            'target_user_id': target_user_id,
            'manager_id': manager.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        })
        
        await state.set_state(UserManagementStates.waiting_for_approval_comment)
        
        await callback.message.edit_text(
            get_text('moderation.enter_approval_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("user_action_block_"))
async def handle_block_user(callback: CallbackQuery, state: FSMContext, db: Session, 
                           roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        await state.update_data({
            'action': 'block',
            'target_user_id': target_user_id,
            'manager_id': manager.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        })
        
        await state.set_state(UserManagementStates.waiting_for_block_reason)
        
        await callback.message.edit_text(
            get_text('moderation.enter_block_reason', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("user_action_unblock_"))
async def handle_unblock_user(callback: CallbackQuery, state: FSMContext, db: Session, 
                             roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        await state.update_data({
            'action': 'unblock',
            'target_user_id': target_user_id,
            'manager_id': manager.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        })
        
        await state.set_state(UserManagementStates.waiting_for_unblock_comment)
        
        await callback.message.edit_text(
            get_text('moderation.enter_unblock_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("user_action_delete_"))
async def handle_delete_user(callback: CallbackQuery, state: FSMContext, db: Session, 
                           roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        await state.update_data({
            'action': 'delete',
            'target_user_id': target_user_id,
            'manager_id': manager.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        })
        
        await state.set_state(UserManagementStates.waiting_for_delete_reason)
        
        await callback.message.edit_text(
            get_text('moderation.enter_delete_reason', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("user_action_view_documents_"))
async def handle_view_user_documents(callback: CallbackQuery, db: Session, 
                                   roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if not target_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from uk_management_bot.services.user_verification_service import UserVerificationService
        from uk_management_bot.database.models.user_verification import UserDocument
        
        verification_service = UserVerificationService(db)
        documents = verification_service.get_user_documents(target_user_id)
        
        if not documents:
            await callback.message.edit_text(
                f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.first_name or target_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}**\n\n"
                f"–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                reply_markup=get_cancel_keyboard(lang),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        user_name = target_user.first_name or target_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        user_name = user_name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        
        documents_text = f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}**\n\n"
        
        for i, doc in enumerate(documents, 1):
            from uk_management_bot.database.models.user_verification import VerificationStatus
            status_emoji = "‚úÖ" if doc.verification_status == VerificationStatus.APPROVED else "‚è≥" if doc.verification_status == VerificationStatus.PENDING else "‚ùå"
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type_names = {
                'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è –≤—ã–ø–∏—Å–∫–∞',
                'rental_agreement': '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ñ–ö–•',
                'other': '–î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
            }
            doc_type_name = doc_type_names.get(doc.document_type.value, doc.document_type.value)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            file_name = (doc.file_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
            
            documents_text += f"{i}. {status_emoji} **{doc_type_name}**\n"
            documents_text += f"   üìÅ –§–∞–π–ª: `{file_name}`\n"
            if doc.file_size:
                documents_text += f"   üìè –†–∞–∑–º–µ—Ä: {doc.file_size // 1024} KB\n"
            documents_text += f"   üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if doc.verification_notes:
                notes = doc.verification_notes.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                documents_text += f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}\n"
            
            documents_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for i, doc in enumerate(documents, 1):
            doc_type_names = {
                'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è –≤—ã–ø–∏—Å–∫–∞',
                'rental_agreement': '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ñ–ö–•',
                'other': '–î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
            }
            doc_type_name = doc_type_names.get(doc.document_type.value, doc.document_type.value)
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"üì• –°–∫–∞—á–∞—Ç—å {doc_type_name}",
                callback_data=f"download_document_{doc.id}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            callback_data=f"request_documents_{target_user_id}"
        )])
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"‚óÄÔ∏è {get_text('buttons.back', language=lang)}",
            callback_data=f"user_mgmt_user_{target_user_id}"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            documents_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )

@router.callback_query(F.data.startswith("download_document_"))
async def handle_download_document(callback: CallbackQuery, db: Session, 
                                 roles: list = None, active_role: str = None, user: User = None):
    """–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        document_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        from uk_management_bot.database.models.user_verification import UserDocument
        document = db.query(UserDocument).filter(UserDocument.id == document_id).first()
        
        if not document:
            await callback.answer(
                "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                show_alert=True
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram import Bot
        from uk_management_bot.config.settings import settings
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_type_names = {
                'passport': '–ü–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è –≤—ã–ø–∏—Å–∫–∞',
                'rental_agreement': '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ñ–ö–•',
                'other': '–î—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
            }
            doc_type_name = doc_type_names.get(document.document_type.value, document.document_type.value)
            
            caption = f"üìÑ {doc_type_name}\n"
            caption += f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {document.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if document.file_size:
                caption += f"üìè –†–∞–∑–º–µ—Ä: {document.file_size // 1024} KB"
            
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=document.file_id,
                caption=caption
            )
            await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
        finally:
            await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )

@router.callback_query(F.data.startswith("user_action_request_docs_"))
async def handle_request_documents(callback: CallbackQuery, state: FSMContext, db: Session, 
                                 roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    logger.info(f"üîç HANDLE_REQUEST_DOCUMENTS: –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {callback.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        await state.update_data({
            'action': 'request_documents',
            'target_user_id': target_user_id,
            'manager_id': manager.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        })
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        from uk_management_bot.keyboards.user_verification import get_document_checklist_keyboard
        await callback.message.edit_text(
            get_text('moderation.select_documents_checklist', language=lang),
            reply_markup=get_document_checklist_keyboard(target_user_id, [], lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù - –ö–û–ù–§–õ–ò–ö–¢ –° –ù–û–í–´–ú–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò –ì–ê–õ–û–ß–ï–ö
# @router.callback_query(F.data.startswith("request_document_"))
# async def handle_document_type_selection(callback: CallbackQuery, state: FSMContext, db: Session, 
#                                        roles: list = None, active_role: str = None, user: User = None):
#     """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
#     lang = callback.from_user.language_code or 'ru'
#     
#     logger.info(f"üîç HANDLE_DOCUMENT_TYPE_SELECTION: –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {callback.data}")
#     logger.info(f"üîç HANDLE_DOCUMENT_TYPE_SELECTION: –≠—Ç–æ —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è!")
#     
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
#     has_access = has_admin_access(roles=roles, user=user)
#     
#     if not has_access:
#         await callback.answer(
#             get_text('errors.permission_denied', language=lang),
#             show_alert=True
#         )
#         return
#     
#     try:
#         # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: request_document_{user_id}_{document_type}
#         parts = callback.data.split('_')
#         target_user_id = int(parts[2])
#         document_type = parts[3]
#         
#         # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#         manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
#         if not manager:
#             await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
#             return
#             
#         await state.update_data({
#             'action': 'request_specific_document',
#             'target_user_id': target_user_id,
#             'manager_id': manager.id,
#             'document_type': document_type
#         })
#         
#         await state.set_state(UserManagementStates.waiting_for_document_request)
#         
#         # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
#         from uk_management_bot.database.models.user_verification import DocumentType
#         doc_type_name = get_text(f'verification.document_types.{document_type}', language=lang)
#         logger.info(f"üîç DOCUMENT_TYPE_SELECTION: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}, –ù–∞–∑–≤–∞–Ω–∏–µ: {doc_type_name}")
#         
#         await callback.message.edit_text(
#             get_text('moderation.enter_document_request_specific', language=lang).format(
#                 document_type=doc_type_name
#             ),
#             reply_markup=get_cancel_keyboard(lang)
#         )
#         
#         await callback.answer()
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
#         await callback.answer(
#             get_text('errors.unknown_error', language=lang),
#             show_alert=True
#         )


# ‚ïê‚ïê‚ïê –û–ë–†–ê–ë–û–¢–ö–ê –ì–ê–õ–û–ß–ï–ö –î–û–ö–£–ú–ï–ù–¢–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("check_document_"))
async def handle_check_document(callback: CallbackQuery, state: FSMContext, db: Session, 
                               roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–≥–∞–ª–æ—á–∫–∞)"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: check_document_{user_id}_{document_type}
        parts = callback.data.split('_')
        target_user_id = int(parts[2])
        document_type = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        data = await state.get_data()
        selected_docs = data.get('selected_documents', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if document_type not in selected_docs:
            selected_docs.append(document_type)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'target_user_id': target_user_id,
            'selected_documents': selected_docs
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.keyboards.user_verification import get_document_checklist_keyboard
        await callback.message.edit_reply_markup(
            reply_markup=get_document_checklist_keyboard(target_user_id, selected_docs, lang)
        )
        
        await callback.answer(f"‚úÖ {get_text(f'verification.document_types.{document_type}', language=lang)} –≤—ã–±—Ä–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


@router.callback_query(F.data.startswith("uncheck_document_"))
async def handle_uncheck_document(callback: CallbackQuery, state: FSMContext, db: Session, 
                                 roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—É–±—Ä–∞—Ç—å –≥–∞–ª–æ—á–∫—É)"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: uncheck_document_{user_id}_{document_type}
        parts = callback.data.split('_')
        target_user_id = int(parts[2])
        document_type = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        data = await state.get_data()
        selected_docs = data.get('selected_documents', [])
        
        # –£–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if document_type in selected_docs:
            selected_docs.remove(document_type)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            'target_user_id': target_user_id,
            'selected_documents': selected_docs
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.keyboards.user_verification import get_document_checklist_keyboard
        await callback.message.edit_reply_markup(
            reply_markup=get_document_checklist_keyboard(target_user_id, selected_docs, lang)
        )
        
        await callback.answer(f"‚¨úÔ∏è {get_text(f'verification.document_types.{document_type}', language=lang)} —É–±—Ä–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


@router.callback_query(F.data.startswith("req_docs_"))
async def handle_request_selected_documents(callback: CallbackQuery, state: FSMContext, db: Session, 
                                           roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: req_docs_{user_id}_{doc1,doc2,doc3+2}
        parts = callback.data.split('_')
        target_user_id = int(parts[2])
        docs_str = parts[3] if len(parts) > 3 else ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if '+' in docs_str:
            base_docs = docs_str.split('+')[0].split(',')
            additional_count = int(docs_str.split('+')[1])
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            selected_docs = data.get('selected_documents', [])
        else:
            selected_docs = docs_str.split(',') if docs_str else []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({
            'action': 'request_multiple_documents',
            'target_user_id': target_user_id,
            'manager_id': manager.id,
            'selected_documents': selected_docs
        })
        
        await state.set_state(UserManagementStates.waiting_for_document_request)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        doc_names = []
        for doc_type in selected_docs:
            doc_name = get_text(f'verification.document_types.{doc_type}', language=lang)
            doc_names.append(doc_name)
        
        doc_list = ", ".join(doc_names)
        
        await callback.message.edit_text(
            get_text('moderation.enter_document_request_multiple', language=lang).format(
                documents=doc_list
            ),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


@router.callback_query(F.data.startswith("cancel_document_selection_"))
async def handle_cancel_document_selection(callback: CallbackQuery, state: FSMContext, db: Session,
                                         roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    logger.info(f"üîç HANDLE_CANCEL_DOCUMENT_SELECTION: –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {callback.data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: cancel_document_selection_{user_id}
        parts = callback.data.split('_')
        if len(parts) >= 4:
            target_user_id = int(parts[3])
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if target_user:
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await callback.message.edit_text(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        
        await callback.answer(get_text('buttons.operation_cancelled', language=lang))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


@router.callback_query(F.data == "cancel_action")
async def handle_cancel_action(callback: CallbackQuery, state: FSMContext, db: Session, 
                              roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è (–∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö)"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        await callback.message.edit_text(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
        await callback.answer(get_text('buttons.operation_cancelled', language=lang))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


@router.callback_query(F.data.startswith("back_to_user_details_"))
async def handle_back_to_user_details(callback: CallbackQuery, state: FSMContext, db: Session, 
                                     roles: list = None, active_role: str = None, user: User = None):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    if not has_access:
        await callback.answer(get_text('errors.permission_denied', language=lang), show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: back_to_user_details_{user_id}
        parts = callback.data.split('_')
        target_user_id = int(parts[4])  # back_to_user_details_{user_id}
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if target_user:
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await callback.message.edit_text(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(get_text('errors.unknown_error', language=lang), show_alert=True)


# ‚ïê‚ïê‚ïê –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ‚ïê‚ïê‚ïê

@router.message(UserManagementStates.waiting_for_approval_comment)
async def process_approval_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        comment = message.text
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        auth_service = AuthService(db)
        success = auth_service.approve_user(target_user_id, manager_id, comment)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_mgmt_service = UserManagementService(db)
            target_user = user_mgmt_service.get_user_by_id(target_user_id)
            
            user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
            
            await message.answer(
                get_text('moderation.user_approved_successfully', language=lang).format(
                    user_name=user_name
                )
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                from aiogram import Bot
                from uk_management_bot.config.settings import settings
                from uk_management_bot.keyboards.base import get_main_keyboard_for_role
                
                bot = Bot(token=settings.BOT_TOKEN)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_roles = []
                if target_user.roles:
                    try:
                        import json
                        user_roles = json.loads(target_user.roles) if isinstance(target_user.roles, str) else target_user.roles
                    except:
                        user_roles = ["applicant"]
                else:
                    user_roles = ["applicant"]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                restart_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                await bot.send_message(
                    chat_id=target_user.telegram_id,
                    text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                    reply_markup=restart_keyboard
                )
                
                await bot.session.close()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.telegram_id}: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


@router.message(UserManagementStates.waiting_for_block_reason)
async def process_block_reason(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        reason = message.text
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        auth_service = AuthService(db)
        success = auth_service.block_user(target_user_id, manager_id, reason)
        
        if success:
            user_mgmt_service = UserManagementService(db)
            target_user = user_mgmt_service.get_user_by_id(target_user_id)
            
            user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
            
            await message.answer(
                get_text('moderation.user_blocked_successfully', language=lang).format(
                    user_name=user_name
                )
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


@router.message(UserManagementStates.waiting_for_unblock_comment)
async def process_unblock_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        comment = message.text
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        auth_service = AuthService(db)
        success = auth_service.unblock_user(target_user_id, manager_id, comment)
        
        if success:
            user_mgmt_service = UserManagementService(db)
            target_user = user_mgmt_service.get_user_by_id(target_user_id)
            
            user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
            
            await message.answer(
                get_text('moderation.user_unblocked_successfully', language=lang).format(
                    user_name=user_name
                )
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


@router.message(UserManagementStates.waiting_for_delete_reason)
async def process_delete_reason(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        reason = message.text
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        auth_service = AuthService(db)
        success = auth_service.delete_user(target_user_id, manager_id, reason)
        
        if success:
            await message.answer(
                get_text('moderation.user_deleted_successfully', language=lang)
            )
            
            try:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                user_mgmt_service = UserManagementService(db)
                stats = user_mgmt_service.get_user_stats()
                
                await message.answer(
                    get_text('user_management.main_title', language=lang),
                    reply_markup=get_user_management_main_keyboard(stats, lang)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                await message.answer(
                    get_text('moderation.user_deleted_successfully', language=lang) + 
                    "\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
                )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


@router.message(UserManagementStates.waiting_for_document_request)
async def process_document_request(message: Message, state: FSMContext, db: Session, 
                                 roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    lang = message.from_user.language_code or 'ru'
    
    logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}, –¢–µ–∫—Å—Ç: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {has_access}")
    
    if not has_access:
        await message.answer(
            get_text('errors.permission_denied', language=lang),
            reply_markup=get_main_keyboard(lang)
        )
        await state.clear()
        return
    
    try:
        data = await state.get_data()
        logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        request_text = message.text
        action = data.get('action', 'request_documents')
        
        logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: target_user_id={target_user_id}, manager_id={manager_id}, action={action}")
        
        if action == 'request_specific_document':
            # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_type = data.get('document_type')
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞: {document_type}")
            
            from uk_management_bot.services.user_verification_service import UserVerificationService
            user_verification_service = UserVerificationService(db)
            success = user_verification_service.request_specific_document(target_user_id, manager_id, document_type, request_text)
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {success}")
        elif action == 'request_multiple_documents':
            # –ó–∞–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            selected_docs = data.get('selected_documents', [])
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –ó–∞–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {selected_docs}")
            
            from uk_management_bot.services.user_verification_service import UserVerificationService
            user_verification_service = UserVerificationService(db)
            success = user_verification_service.request_multiple_documents(target_user_id, manager_id, selected_docs, request_text)
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {success}")
        else:
            # –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            from uk_management_bot.services.user_verification_service import UserVerificationService
            user_verification_service = UserVerificationService(db)
            success = user_verification_service.request_additional_documents(target_user_id, manager_id, request_text)
            logger.info(f"üîç PROCESS_DOCUMENT_REQUEST: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {success}")
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from uk_management_bot.services.notification_service import async_notify_document_request
            target_user = db.query(User).filter(User.id == target_user_id).first()
            
            if target_user:
                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot = message.bot
                
                if action == 'request_specific_document':
                    document_type = data.get('document_type')
                    await async_notify_document_request(bot, db, target_user, request_text, document_type)
                elif action == 'request_multiple_documents':
                    selected_docs = data.get('selected_documents', [])
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
                    from uk_management_bot.services.notification_service import async_notify_multiple_documents_request
                    await async_notify_multiple_documents_request(bot, db, target_user, request_text, selected_docs)
                else:
                    await async_notify_document_request(bot, db, target_user, request_text)
            
            await message.answer(
                get_text('moderation.document_request_sent', language=lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
            await state.clear()
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if target_user:
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


# ‚ïê‚ïê‚ïê –û–¢–ú–ï–ù–ê –û–ü–ï–†–ê–¶–ò–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_mgmt_cancel")
async def cancel_user_management_operation(callback: CallbackQuery, state: FSMContext, db: Session, 
                                         roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        await callback.message.edit_text(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
        await callback.answer(
            get_text('buttons.operation_cancelled', language=lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–ù–û–ü–û–ö ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_mgmt_nop")
async def user_management_nop(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()


# ‚ïê‚ïê‚ïê –ù–ê–í–ò–ì–ê–¶–ò–Ø ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_mgmt_back_to_list")
async def back_to_user_list(callback: CallbackQuery, state: FSMContext, db: Session):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        await callback.message.edit_text(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("user_roles_"))
async def show_user_roles_management(callback: CallbackQuery, state: FSMContext, db: Session, 
                                   roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        auth_service = AuthService(db)
        user_roles = auth_service.get_user_roles(target_user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({
            'target_user_id': target_user_id,
            'manager_id': manager.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            'original_roles': user_roles.copy(),
            'current_roles': user_roles.copy()
        })
        
        await state.set_state(UserManagementStates.selecting_roles)
        
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
        
        message_text = get_text('moderation.select_roles', language=lang).format(user_name=user_name)
        message_text += f"\n\n{get_text('moderation.current_roles', language=lang)}: "
        message_text += user_mgmt_service._format_user_roles(target_user, lang)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_roles_management_keyboard(user_roles, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("role_add_"), UserManagementStates.selecting_roles)
async def add_role_to_user(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        role = callback.data.split('_')[-1]
        data = await state.get_data()
        current_roles = data.get('current_roles', [])
        
        if role not in current_roles:
            current_roles.append(role)
            await state.update_data(current_roles=current_roles)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_roles_management_keyboard(current_roles, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("role_remove_"), UserManagementStates.selecting_roles)
async def remove_role_from_user(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        role = callback.data.split('_')[-1]
        data = await state.get_data()
        current_roles = data.get('current_roles', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–æ–ª—å
        if len(current_roles) <= 1:
            await callback.answer(
                get_text('moderation.cannot_remove_last_role', language=lang),
                show_alert=True
            )
            return
        
        if role in current_roles:
            current_roles.remove(role)
            await state.update_data(current_roles=current_roles)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_roles_management_keyboard(current_roles, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "roles_save", UserManagementStates.selecting_roles)
async def save_user_roles(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        original_roles = data.get('original_roles', [])
        current_roles = data.get('current_roles', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if set(original_roles) == set(current_roles):
            await callback.answer(
                get_text('moderation.no_changes_made', language=lang)
            )
            await state.clear()
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.update_data({'action': 'roles_change'})
        await state.set_state(UserManagementStates.waiting_for_role_comment)
        
        await callback.message.edit_text(
            get_text('moderation.enter_role_change_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "roles_cancel", UserManagementStates.selecting_roles)
async def cancel_roles_editing(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if target_user:
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await callback.message.edit_text(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        
        await callback.answer(
            get_text('buttons.operation_cancelled', language=lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.message(UserManagementStates.waiting_for_role_comment)
async def process_role_change_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–æ–ª–µ–π"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        original_roles = data.get('original_roles', [])
        current_roles = data.get('current_roles', [])
        comment = message.text
        
        auth_service = AuthService(db)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
        added_roles = set(current_roles) - set(original_roles)
        removed_roles = set(original_roles) - set(current_roles)
        
        success = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏
        for role in added_roles:
            if not auth_service.assign_role(target_user_id, role, manager_id, comment):
                success = False
        
        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏
        for role in removed_roles:
            if not auth_service.remove_role(target_user_id, role, manager_id, comment):
                success = False
        
        if success:
            user_mgmt_service = UserManagementService(db)
            target_user = user_mgmt_service.get_user_by_id(target_user_id)
            
            user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
            
            await message.answer(
                get_text('moderation.roles_updated_successfully', language=lang).format(
                    user_name=user_name
                )
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–æ–ª–µ–π: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("user_specializations_"))
async def show_user_specializations_management(callback: CallbackQuery, state: FSMContext, db: Session, 
                                             roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        target_user_id = int(callback.data.split('_')[-1])
        
        spec_service = SpecializationService(db)
        user_specializations = spec_service.get_user_specializations(target_user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not manager:
            await callback.answer("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({
            'target_user_id': target_user_id,
            'manager_id': manager.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            'original_specializations': user_specializations.copy(),
            'current_specializations': user_specializations.copy()
        })
        
        await state.set_state(UserManagementStates.selecting_specializations)
        
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
        
        message_text = get_text('specializations.select_specializations', language=lang).format(user_name=user_name)
        message_text += f"\n\n{get_text('specializations.current_specializations', language=lang)}: "
        message_text += spec_service.format_specializations_list(user_specializations, lang)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_specializations_selection_keyboard(user_specializations, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("spec_toggle_"), UserManagementStates.selecting_specializations)
async def toggle_specialization(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        specialization = callback.data.split('_')[-1]
        data = await state.get_data()
        current_specializations = data.get('current_specializations', [])
        
        if specialization in current_specializations:
            current_specializations.remove(specialization)
        else:
            current_specializations.append(specialization)
        
        await state.update_data(current_specializations=current_specializations)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_specializations_selection_keyboard(current_specializations, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "spec_save", UserManagementStates.selecting_specializations)
async def save_user_specializations(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        original_specializations = data.get('original_specializations', [])
        current_specializations = data.get('current_specializations', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if set(original_specializations) == set(current_specializations):
            await callback.answer(
                get_text('moderation.no_changes_made', language=lang)
            )
            await state.clear()
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.update_data({'action': 'specializations_change'})
        await state.set_state(UserManagementStates.waiting_for_specialization_comment)
        
        await callback.message.edit_text(
            get_text('moderation.enter_specialization_change_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "spec_cancel", UserManagementStates.selecting_specializations)
async def cancel_specializations_editing(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_mgmt_service = UserManagementService(db)
        target_user = user_mgmt_service.get_user_by_id(target_user_id)
        
        if target_user:
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await callback.message.edit_text(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        
        await callback.answer(
            get_text('buttons.operation_cancelled', language=lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.message(UserManagementStates.waiting_for_specialization_comment)
async def process_specialization_change_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        data = await state.get_data()
        target_user_id = data.get('target_user_id')
        manager_id = data.get('manager_id')
        current_specializations = data.get('current_specializations', [])
        comment = message.text
        
        spec_service = SpecializationService(db)
        success = spec_service.set_user_specializations(
            target_user_id, 
            current_specializations, 
            manager_id, 
            comment
        )
        
        if success:
            user_mgmt_service = UserManagementService(db)
            target_user = user_mgmt_service.get_user_by_id(target_user_id)
            
            user_name = target_user.first_name or target_user.username or str(target_user.telegram_id)
            
            await message.answer(
                get_text('specializations.specializations_updated', language=lang).format(
                    user_name=user_name
                )
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_mgmt_service.format_user_info(target_user, lang, detailed=True)
            await message.answer(
                user_info,
                reply_markup=get_user_actions_keyboard(target_user, lang)
            )
        else:
            await message.answer(
                get_text('moderation.operation_failed', language=lang)
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )
        await state.clear()


# ‚ïê‚ïê‚ïê –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨–Æ ‚ïê‚ïê‚ïê

async def open_user_management(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é)"""
    lang = message.from_user.language_code or 'ru'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang)
        )


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        from uk_management_bot.keyboards.admin import get_manager_main_keyboard
        
        await callback.message.answer(
            "–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            reply_markup=get_manager_main_keyboard()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )
