"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–æ—Ä—ã –¥–ª—è –∂–∏—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models import User, Yard
from uk_management_bot.services.address_service import AddressService
from uk_management_bot.utils.auth_helpers import has_admin_access
from uk_management_bot.utils.helpers import get_text

logger = logging.getLogger(__name__)
router = Router()


class UserYardsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    selecting_yard = State()  # –í—ã–±–æ—Ä –¥–≤–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è


# ============= –ö–õ–ê–í–ò–ê–¢–£–†–´ =============

def get_user_yards_keyboard(user_telegram_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤–æ—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    try:
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–≤–æ—Ä—ã (—á–µ—Ä–µ–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã)
            user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
            if not user:
                return InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", callback_data="noop")]
                ])

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–æ—Ä—ã
            additional_yards = AddressService.get_user_additional_yards(db, user_telegram_id)

            # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–≤–æ—Ä—ã
            all_yards = AddressService.get_user_available_yards(db, user_telegram_id)

            buttons = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            buttons.append([InlineKeyboardButton(
                text=f"üèòÔ∏è –î–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({len(all_yards)})",
                callback_data="noop"
            )])

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–æ—Ä—ã (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
            if additional_yards:
                buttons.append([InlineKeyboardButton(
                    text="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–æ—Ä—ã:",
                    callback_data="noop"
                )])
                for yard in additional_yards:
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"üèòÔ∏è {yard.name}",
                            callback_data="noop"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                            callback_data=f"remove_user_yard_{user_telegram_id}_{yard.id}"
                        )
                    ])

            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            buttons.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–≤–æ—Ä",
                callback_data=f"add_user_yard_{user_telegram_id}"
            )])

            # –ù–∞–∑–∞–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"user_mgmt_user_{user.id}"
            )])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="noop")]
        ])


def get_yard_selection_keyboard(user_telegram_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–≤–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–æ—Ä–æ–≤
    """
    try:
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–≤–æ—Ä—ã
            all_yards = db.query(Yard).filter(Yard.is_active == True).order_by(Yard.name).all()

            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–≤–æ—Ä—ã
            user_yards = AddressService.get_user_available_yards(db, user_telegram_id)
            user_yard_ids = {yard.id for yard in user_yards}

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–≤–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            available_yards = [y for y in all_yards if y.id not in user_yard_ids]

            buttons = []

            buttons.append([InlineKeyboardButton(
                text="üìç –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                callback_data="noop"
            )])

            if available_yards:
                for yard in available_yards:
                    buttons.append([InlineKeyboardButton(
                        text=f"üèòÔ∏è {yard.name}",
                        callback_data=f"user_yard_add_confirm_{user_telegram_id}_{yard.id}"
                    )])
            else:
                buttons.append([InlineKeyboardButton(
                    text="‚ÑπÔ∏è –í—Å–µ –¥–≤–æ—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                    callback_data="noop"
                )])

            # –û—Ç–º–µ–Ω–∞
            buttons.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"manage_user_yards_{user_telegram_id}"
            )])

            return InlineKeyboardMarkup(inline_keyboard=buttons)

        finally:
            db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–≤–æ—Ä–∞: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞", callback_data="noop")]
        ])


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =============

@router.callback_query(F.data.startswith("manage_user_yards_"))
async def handle_manage_user_yards(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return

    try:
        user_telegram_id = int(callback.data.split("_")[-1])

        target_user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_name = f"{target_user.first_name or ''} {target_user.last_name or ''}".strip() or f"ID: {user_telegram_id}"

        await callback.message.edit_text(
            f"üèòÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üì± Telegram ID: {user_telegram_id}\n\n"
            f"‚ÑπÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–æ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫.\n"
            f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –¥–≤–æ—Ä—É —Å–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã.",
            reply_markup=get_user_yards_keyboard(user_telegram_id),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("add_user_yard_"))
async def handle_add_user_yard(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–≤–æ—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return

    try:
        user_telegram_id = int(callback.data.split("_")[-1])

        await callback.message.edit_text(
            f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_yard_selection_keyboard(user_telegram_id),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –¥–≤–æ—Ä–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("user_yard_add_confirm_"))
async def handle_confirm_add_yard(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ—Ä–∞"""
    lang = callback.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return

    try:
        # –§–æ—Ä–º–∞—Ç: user_yard_add_confirm_{user_telegram_id}_{yard_id}
        parts = callback.data.split("_")
        user_telegram_id = int(parts[4])
        yard_id = int(parts[5])

        # user –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not user:
            await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ—Ä
        success = AddressService.add_user_yard(
            db,
            user_telegram_id,
            yard_id,
            user.id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.first_name or callback.from_user.id}"
        )

        if success:
            await callback.answer("‚úÖ –î–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–æ—Ä–∞–º–∏
            await handle_manage_user_yards(callback, db, roles, user)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–æ—Ä", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("remove_user_yard_"))
async def handle_remove_user_yard(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–£–¥–∞–ª–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–æ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return

    try:
        parts = callback.data.split("_")
        user_telegram_id = int(parts[3])
        yard_id = int(parts[4])

        # –£–¥–∞–ª—è–µ–º –¥–≤–æ—Ä
        success = AddressService.remove_user_yard(db, user_telegram_id, yard_id)

        if success:
            await callback.answer("‚úÖ –î–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await handle_manage_user_yards(callback, db, roles, user)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–≤–æ—Ä", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
