"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
"""

from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.shift_template import ShiftTemplate
from uk_management_bot.database.models.shift import Shift
from uk_management_bot.database.models.user import User
from sqlalchemy import func
from sqlalchemy.orm import Session
from uk_management_bot.services.shift_planning_service import ShiftPlanningService
from uk_management_bot.services.shift_analytics import ShiftAnalytics
from uk_management_bot.services.template_manager import TemplateManager
from uk_management_bot.keyboards.shift_management import (
    get_main_shift_menu,
    get_planning_menu,
    get_template_selection_keyboard,
    get_date_selection_keyboard,
    get_analytics_menu,
    get_shift_details_keyboard,
    get_auto_planning_keyboard,
    get_schedule_view_keyboard,
    get_template_management_keyboard,
    get_executor_assignment_keyboard
)
from uk_management_bot.states.shift_management import ShiftManagementStates, TemplateManagementStates, ExecutorAssignmentStates
from uk_management_bot.middlewares.auth import require_role
from uk_management_bot.utils.helpers import get_user_language
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
SPECIALIZATION_TRANSLATIONS = {
    "ru": {
        "electric": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
        "plumbing": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
        "hvac": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è",
        "security": "–û—Ö—Ä–∞–Ω–∞",
        "cleaning": "–£–±–æ—Ä–∫–∞",
        "universal": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è",
        "carpentry": "–ü–ª–æ—Ç–Ω–∏—Ü–∫–∏–µ —Ä–∞–±–æ—Ç—ã",
        "painting": "–ú–∞–ª—è—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
        "landscaping": "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "maintenance": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        "it": "IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "reception": "–†–µ—Å–µ–ø—à–Ω"
    },
    "uz": {
        "electric": "Elektr",
        "plumbing": "Santexnika",
        "hvac": "Ventilyatsiya",
        "security": "Xavfsizlik",
        "cleaning": "Tozalash",
        "universal": "Universal",
        "carpentry": "Duradgorlik",
        "painting": "Bo'yoqchilik",
        "landscaping": "Obodonlashtirish",
        "maintenance": "Texnik xizmat",
        "it": "IT qo'llab-quvvatlash",
        "reception": "Qabulxona"
    }
}

def translate_specializations(specializations: list, language: str = "ru") -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
    if not specializations:
        return "–õ—é–±–∞—è" if language == "ru" else "Har qanday"

    translations = SPECIALIZATION_TRANSLATIONS.get(language, SPECIALIZATION_TRANSLATIONS["ru"])
    translated = [translations.get(spec, spec) for spec in specializations]
    return ", ".join(translated)


@router.message(Command("shifts"))
@require_role(['admin', 'manager'])
async def cmd_shifts(message: Message, state: FSMContext, db=None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        
        await message.answer(
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_shift_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.main_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /shifts: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Å–º–µ–Ω")
    finally:
        if db:
            db.close()




@router.callback_query(F.data == "shift_planning")
@require_role(['admin', 'manager'])
async def handle_shift_planning(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_planning_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.planning_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "auto_planning")
@require_role(['admin', 'manager'])
async def handle_auto_planning(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_auto_planning_keyboard(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.auto_planning_settings)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "auto_plan_week")
@require_role(['admin', 'manager'])
async def handle_auto_plan_week(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        if not db:
            db = next(get_db())
        
        planning_service = ShiftPlanningService(db)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        today = date.today()
        days_until_monday = today.weekday()
        monday = today - timedelta(days=days_until_monday)
        
        await callback.answer("‚è≥ –ü–ª–∞–Ω–∏—Ä—É—é —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        
        results = planning_service.plan_weekly_schedule(monday)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        stats = results['statistics']
        response = (
            f"üìÖ <b>–ù–µ–¥–µ–ª—å–Ω–æ–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {results['week_start'].strftime('%d.%m.%Y')} - "
            f"{(results['week_start'] + timedelta(days=6)).strftime('%d.%m.%Y')}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:</b> {stats['total_shifts']}\n\n"
        )
        
        if stats['shifts_by_day']:
            response += "<b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
            for day, count in stats['shifts_by_day'].items():
                response += f"‚Ä¢ {day}: {count} —Å–º–µ–Ω\n"
        
        if stats['shifts_by_template']:
            response += "\n<b>–ü–æ —à–∞–±–ª–æ–Ω–∞–º:</b>\n"
            for template, count in stats['shifts_by_template'].items():
                response += f"‚Ä¢ {template}: {count} —Å–º–µ–Ω\n"
        
        if results['errors']:
            response += f"\n‚ùå <b>–û—à–∏–±–∫–∏:</b>\n"
            for error in results['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                response += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏:\n{str(e)[:200]}",
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "auto_plan_month")
@require_role(['admin', 'manager'])
async def handle_auto_plan_month(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü"""
    try:
        if not db:
            db = next(get_db())
        
        planning_service = ShiftPlanningService(db)
        
        await callback.answer("‚è≥ –ü–ª–∞–Ω–∏—Ä—É—é —Å–º–µ–Ω—ã –Ω–∞ –º–µ—Å—è—Ü...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º –Ω–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
        today = date.today()
        total_shifts = 0
        weeks_planned = 0
        errors = []
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º 4 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
        for week_offset in range(4):
            week_start = today + timedelta(weeks=week_offset)
            try:
                results = planning_service.plan_weekly_schedule(week_start)
                total_shifts += results['statistics']['total_shifts']
                weeks_planned += 1
                if results['errors']:
                    errors.extend(results['errors'])
            except Exception as e:
                errors.append(f"–ù–µ–¥–µ–ª—è {week_offset + 1}: {str(e)}")
        
        response = (
            f"üìÖ <b>–ú–µ—Å—è—á–Ω–æ–µ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å:</b> {weeks_planned}/4\n"
            f"<b>–°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:</b> {total_shifts}\n"
        )
        
        if errors:
            response += f"\n‚ùå <b>–û—à–∏–±–∫–∏ ({len(errors)}):</b>\n"
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                response += f"‚Ä¢ {error}\n"
            if len(errors) > 3:
                response += f"‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 3} –æ—à–∏–±–æ–∫\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞:\n{str(e)[:200]}",
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "auto_plan_tomorrow")
@require_role(['admin', 'manager'])
async def handle_auto_plan_tomorrow(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        if not db:
            db = next(get_db())
        
        planning_service = ShiftPlanningService(db)
        
        tomorrow = date.today() + timedelta(days=1)
        
        await callback.answer("‚è≥ –°–æ–∑–¥–∞—é —Å–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è
        templates = db.query(ShiftTemplate).filter(
            ShiftTemplate.is_active == True,
            ShiftTemplate.auto_create == True
        ).all()
        
        total_shifts = 0
        created_by_template = {}
        errors = []
        
        weekday = tomorrow.weekday() + 1  # 1=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        for template in templates:
            if template.is_day_included(weekday):
                try:
                    shifts = planning_service.create_shift_from_template(template.id, tomorrow)
                    if shifts:
                        total_shifts += len(shifts)
                        created_by_template[template.name] = len(shifts)
                except Exception as e:
                    errors.append(f"{template.name}: {str(e)}")
        
        response = (
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {tomorrow.strftime('%d.%m.%Y')}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:</b> {total_shifts}\n"
        )
        
        if created_by_template:
            response += "\n<b>–ü–æ —à–∞–±–ª–æ–Ω–∞–º:</b>\n"
            for template, count in created_by_template.items():
                response += f"‚Ä¢ {template}: {count} —Å–º–µ–Ω\n"
        
        if total_shifts == 0:
            response += "\nüí° <i>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</i>\n"
            response += "‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å auto_create=true\n"
            response += "‚Ä¢ –£ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏\n"
            response += "‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ —à–∞–±–ª–æ–Ω–æ–≤"
        
        if errors:
            response += f"\n‚ùå <b>–û—à–∏–±–∫–∏:</b>\n"
            for error in errors[:3]:
                response += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{str(e)[:200]}",
            reply_markup=get_auto_planning_keyboard(),
            parse_mode="HTML"
        )
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "view_schedule")
@require_role(['admin', 'manager'])
async def handle_view_schedule(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = date.today()
        
        await callback.message.edit_text(
            f"üìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</b>\n\n"
            f"üìÖ {today.strftime('%d.%m.%Y')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_schedule_view_keyboard(today, lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.viewing_schedule)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("schedule_date:"))
@require_role(['admin', 'manager'])
async def handle_schedule_date(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        date_str = callback.data.split(":", 1)[1]
        selected_date = date.fromisoformat(date_str)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        shifts = db.query(Shift).filter(
            func.date(Shift.planned_start_time) == selected_date
        ).order_by(Shift.planned_start_time).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"üìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</b>\n\nüìÖ {selected_date.strftime('%d.%m.%Y')}\n\n"
        
        if shifts:
            response += f"<b>–ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: {len(shifts)}</b>\n\n"
            for shift in shifts:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                executor_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                if shift.user_id:
                    user = db.query(User).filter(User.id == shift.user_id).first()
                    if user:
                        executor_name = f"{user.first_name} {user.last_name or ''}".strip()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                template_name = "–ë–µ–∑ —à–∞–±–ª–æ–Ω–∞"
                if shift.shift_template_id:
                    template = db.query(ShiftTemplate).filter(ShiftTemplate.id == shift.shift_template_id).first()
                    if template:
                        template_name = template.name
                
                start_time = shift.planned_start_time.strftime('%H:%M') if shift.planned_start_time else "??:??"
                end_time = shift.planned_end_time.strftime('%H:%M') if shift.planned_end_time else "??:??"
                
                status_emoji = "üü¢" if shift.status == "active" else "üü°" if shift.status == "planned" else "üî¥"
                
                response += (
                    f"{status_emoji} <b>{start_time}-{end_time}</b>\n"
                    f"   üë§ {executor_name}\n"
                    f"   üìã {template_name}\n"
                    f"   üìä {shift.status.title()}\n\n"
                )
        else:
            response += "üì≠ <i>–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Å–º–µ–Ω –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</i>\n\n"
        
        response += "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_schedule_view_keyboard(selected_date, lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "schedule_week_view")
@require_role(['admin', 'manager'])
async def handle_schedule_week_view(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        today = date.today()
        monday = today - timedelta(days=today.weekday())
        
        response = f"üìÖ <b>–ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
        response += f"<b>–ù–µ–¥–µ–ª—è {monday.strftime('%d.%m')} - {(monday + timedelta(days=6)).strftime('%d.%m.%Y')}</b>\n\n"
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –Ω–µ–¥–µ–ª–∏
        days_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        for i in range(7):
            current_day = monday + timedelta(days=i)
            day_name = days_names[i]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            shifts = db.query(Shift).filter(
                func.date(Shift.planned_start_time) == current_day
            ).order_by(Shift.planned_start_time).all()
            
            response += f"<b>{day_name} {current_day.strftime('%d.%m')}</b>\n"
            
            if shifts:
                for shift in shifts:
                    start_time = shift.planned_start_time.strftime('%H:%M') if shift.planned_start_time else "??:??"
                    status_emoji = "üü¢" if shift.status == "active" else "üü°" if shift.status == "planned" else "üî¥"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    executor_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                    if shift.user_id:
                        user = db.query(User).filter(User.id == shift.user_id).first()
                        if user:
                            executor_name = f"{user.first_name}"
                    
                    response += f"  {status_emoji} {start_time} - {executor_name}\n"
            else:
                response += f"  üì≠ <i>–°–º–µ–Ω –Ω–µ—Ç</i>\n"
            
            response += "\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_schedule_view_keyboard(today, lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "schedule_month_view")
@require_role(['admin', 'manager'])
async def handle_schedule_month_view(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ú–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        today = date.today()
        month_start = today.replace(day=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü
        shifts = db.query(Shift).filter(
            func.date(Shift.planned_start_time) >= month_start,
            func.date(Shift.planned_start_time) < month_start.replace(month=month_start.month + 1) if month_start.month < 12 else month_start.replace(year=month_start.year + 1, month=1)
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        shifts_by_date = {}
        for shift in shifts:
            if shift.planned_start_time:
                shift_date = shift.planned_start_time.date()
                if shift_date not in shifts_by_date:
                    shifts_by_date[shift_date] = 0
                shifts_by_date[shift_date] += 1
        
        response = f"üìÖ <b>–ú–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä</b>\n\n"
        response += f"<b>{today.strftime('%B %Y')}</b>\n\n"
        response += f"<b>–í—Å–µ–≥–æ —Å–º–µ–Ω –≤ –º–µ—Å—è—Ü–µ: {len(shifts)}</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–º–µ–Ω
        if shifts_by_date:
            sorted_dates = sorted(shifts_by_date.items(), key=lambda x: x[1], reverse=True)[:10]
            response += "<b>–°–∞–º—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–Ω–∏:</b>\n"
            for shift_date, count in sorted_dates:
                response += f"‚Ä¢ {shift_date.strftime('%d.%m')}: {count} —Å–º–µ–Ω\n"
        else:
            response += "üì≠ <i>–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω</i>\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_schedule_view_keyboard(today, lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "back_to_shifts")
async def handle_back_to_shifts(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_shift_menu(lang),
            parse_mode="HTML"
        )
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Å–º–µ–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "template_management")
@require_role(['admin', 'manager'])
async def handle_template_management(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏:",
            reply_markup=get_template_management_keyboard(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.template_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "create_new_template")
@require_role(['admin', 'manager'])
async def handle_create_new_template(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–º–µ–Ω—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
            ]),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.template_name_input)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "templates_view_all")
@require_role(['admin', 'manager'])
async def handle_view_all_templates(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        template_manager = TemplateManager(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        templates = template_manager.get_templates(active_only=False)
        
        if not templates:
            await callback.message.edit_text(
                "üìã <b>–®–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω</b>\n\n"
                "‚ùå –®–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω'",
                reply_markup=get_template_management_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer("–®–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤
        templates_text = "üìã <b>–í—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω</b>\n\n"
        
        for i, template in enumerate(templates, 1):
            status_emoji = "‚úÖ" if template.is_active else "‚ùå"
            time_info = f"{template.start_hour:02d}:{template.start_minute or 0:02d}"
            duration_info = f"{template.duration_hours}—á"
            
            specialization_info = ""
            if template.required_specializations:
                from uk_management_bot.utils.constants import SPECIALIZATIONS
                spec_names = [SPECIALIZATIONS.get(spec, spec) for spec in template.required_specializations[:2]]
                specialization_info = f" ‚Ä¢ {', '.join(spec_names)}"
                if len(template.required_specializations) > 2:
                    specialization_info += f" (+{len(template.required_specializations)-2})"
            
            templates_text += (
                f"{i}. {status_emoji} <b>{template.name}</b>\n"
                f"   üïí {time_info} ({duration_info}){specialization_info}\n"
                f"   üìù {template.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            )
        
        await callback.message.edit_text(
            templates_text,
            reply_markup=get_template_management_keyboard(lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.message(StateFilter(ShiftManagementStates.template_name_input))
async def handle_template_name_input(message: Message, state: FSMContext, db=None, roles: list = None, user=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        
        template_name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(template_name) < 3:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
                ])
            )
            return
        
        if len(template_name) > 50:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(template_name=template_name)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: <b>{template_name}</b>\n\n"
            "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00, 14:30, 22:15):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
            ]),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.template_time_input)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    finally:
        if db:
            db.close()


@router.message(StateFilter(ShiftManagementStates.template_time_input))
async def handle_template_time_input(message: Message, state: FSMContext, db=None, roles: list = None, user=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        
        time_text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            if ":" not in time_text:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            hour_str, minute_str = time_text.split(":")
            hour = int(hour_str)
            minute = int(minute_str)
            
            if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è")
                
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00, 14:30):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(start_hour=hour, start_minute=minute)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{hour:02d}:{minute:02d}</b>\n\n"
            "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≤ —á–∞—Å–∞—Ö\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 8, 12, 4):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
            ]),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.template_duration_input)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    finally:
        if db:
            db.close()


@router.message(StateFilter(ShiftManagementStates.template_duration_input))
async def handle_template_duration_input(message: Message, state: FSMContext, db=None, roles: list = None, user=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        template_manager = TemplateManager(db)
        
        duration_text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        try:
            duration = int(duration_text)
            if duration < 1 or duration > 24:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 24):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        await state.update_data(duration=duration)
        
        from uk_management_bot.utils.constants import SPECIALIZATIONS
        keyboard = []
        
        for spec_key, spec_name in SPECIALIZATIONS.items():
            keyboard.append([InlineKeyboardButton(
                text=f"‚≠ï {spec_name}",
                callback_data=f"template_create_spec_{spec_key}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π)", callback_data="template_create_no_specs")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")])
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã: <b>{duration} —á.</b>\n\n"
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:</b>\n\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Ö –≤—ã–±–æ—Ä–∞.\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.template_specialization_selection)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞",
            reply_markup=get_template_management_keyboard(lang)
        )
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "templates_edit")
@require_role(['admin', 'manager'])
async def handle_edit_templates(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        template_manager = TemplateManager(db)
        
        logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        templates = template_manager.get_templates(active_only=False)
        
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        
        if not templates:
            await callback.message.edit_text(
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
                "‚ùå –®–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω'",
                reply_markup=get_template_management_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer("–®–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = []
        for template in templates:
            status_emoji = "‚úÖ" if template.is_active else "‚ùå"
            time_info = f"{template.start_hour:02d}:{template.start_minute or 0:02d}"
            
            button_text = f"{status_emoji} {template.name} ({time_info})"
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"template_edit_{template.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
        ])
        
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤")
        
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        logger.debug("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.set_state(TemplateManagementStates.editing_template)
        
        logger.debug("–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(lambda c: c.data.startswith("template_edit_") and c.data.replace("template_edit_", "").isdigit())
@require_role(['admin', 'manager'])
async def handle_edit_template_details(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        template_manager = TemplateManager(db)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –∏–∑ callback_data
        template_id = int(callback.data.replace("template_edit_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if template.is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        time_info = f"{template.start_hour:02d}:{template.start_minute or 0:02d}"
        
        specialization_info = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        if template.required_specializations:
            from uk_management_bot.utils.constants import SPECIALIZATIONS
            specialization_info = ", ".join([SPECIALIZATIONS.get(spec, spec) for spec in template.required_specializations])
        
        template_info = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {template.name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üïí <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {time_info}\n"
            f"‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {template.duration_hours}—á\n"
            f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {specialization_info}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"template_edit_name_{template_id}")],
            [InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"template_edit_description_{template_id}")],
            [InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"template_edit_time_{template_id}")],
            [InlineKeyboardButton(text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"template_edit_duration_{template_id}")],
            [InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data=f"template_edit_specializations_{template_id}")],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not template.is_active else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"template_toggle_active_{template_id}"
                )
            ],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"template_delete_{template_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="templates_edit")]
        ]
        
        await callback.message.edit_text(
            template_info,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(editing_template_id=template_id)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_toggle_active_"))
@require_role(['admin', 'manager'])
async def handle_toggle_template_active(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        template_manager = TemplateManager(db)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
        template_id = int(callback.data.replace("template_toggle_active_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        new_status = not template.is_active
        template.is_active = new_status
        
        try:
            db.commit()
            success = True
        except Exception as e:
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            success = False
        
        if success:
            status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            await callback.answer(f"‚úÖ –®–∞–±–ª–æ–Ω {status_text}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await handle_edit_template_details(callback, state, db, roles, user)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞
@router.callback_query(F.data.startswith("template_edit_name_"))
@require_role(['admin', 'manager'])
async def handle_edit_template_name(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_edit_name_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{template.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")]
            ]),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_template_id=template_id, editing_field="name")
        await state.set_state(TemplateManagementStates.editing_field)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_edit_description_"))
@require_role(['admin', 'manager'])
async def handle_edit_template_description(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_edit_description_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <b>{template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")]
            ]),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_template_id=template_id, editing_field="description")
        await state.set_state(TemplateManagementStates.editing_field)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_edit_time_"))
@require_role(['admin', 'manager'])
async def handle_edit_template_time(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_edit_time_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üïí <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{template.start_hour:02d}:00</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (–æ—Ç 0 –¥–æ 23):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")]
            ]),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_template_id=template_id, editing_field="start_hour")
        await state.set_state(TemplateManagementStates.editing_field)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_edit_duration_"))
@require_role(['admin', 'manager'])
async def handle_edit_template_duration(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_edit_duration_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"‚è±Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{template.duration_hours} —á.</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 24):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")]
            ]),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_template_id=template_id, editing_field="duration_hours")
        await state.set_state(TemplateManagementStates.editing_field)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_create_spec_"))
async def handle_template_create_specialization_toggle(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    try:
        specialization = callback.data.replace("template_create_spec_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_specs = data.get('selected_specializations', [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if specialization in selected_specs:
            selected_specs.remove(specialization)
        else:
            selected_specs.append(specialization)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_specializations=selected_specs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.utils.constants import SPECIALIZATIONS
        keyboard = []
        
        for spec_key, spec_name in SPECIALIZATIONS.items():
            is_selected = spec_key in selected_specs
            text = f"{'‚úÖ' if is_selected else '‚≠ï'} {spec_name}"
            keyboard.append([InlineKeyboardButton(
                text=text,
                callback_data=f"template_create_spec_{spec_key}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ (—Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω)", callback_data="template_create_finish")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")])
        
        selected_text = ", ".join([SPECIALIZATIONS.get(spec, spec) for spec in selected_specs]) if selected_specs else "–ù–µ –≤—ã–±—Ä–∞–Ω—ã"
        
        try:
            await callback.message.edit_text(
                f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:</b>\n\n"
                f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {selected_text}\n\n"
                "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Ö –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n"
                "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
        except Exception as edit_error:
            if "message is not modified" not in str(edit_error):
                raise edit_error
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "template_create_finish")
async def handle_template_create_finish(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    try:
        if not db:
            db = next(get_db())
        
        template_manager = TemplateManager(db)
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template_name = data.get('template_name')
        start_hour = data.get('start_hour')
        start_minute = data.get('start_minute', 0)
        duration = data.get('duration')
        selected_specs = data.get('selected_specializations', [])
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: name={template_name}, start_hour={start_hour}, start_minute={start_minute}, duration={duration}, specs={selected_specs}")
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        template = template_manager.create_template(
            name=template_name,
            start_hour=start_hour,
            start_minute=start_minute,
            duration_hours=duration,
            description=f"–®–∞–±–ª–æ–Ω {template_name}",
            required_specializations=selected_specs if selected_specs else None,
            is_active=True,
            auto_create=True,
            days_of_week=[1, 2, 3, 4, 5, 6, 7],  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            advance_days=1  # –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–º–µ–Ω—ã –∑–∞ 1 –¥–µ–Ω—å
        )
        
        if template:
            from uk_management_bot.utils.constants import SPECIALIZATIONS
            selected_text = ", ".join([SPECIALIZATIONS.get(spec, spec) for spec in selected_specs]) if selected_specs else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            await callback.message.edit_text(
                f"‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {template.name}\n"
                f"üïí <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {template.start_hour:02d}:{(template.start_minute or 0):02d}\n"
                f"‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {template.duration_hours}—á\n"
                f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {selected_text}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"–®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="template_management")]
                ]),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="template_management")]
                ])
            )
        
        await state.clear()
        await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!" if template else "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "template_create_no_specs")
async def handle_template_create_no_specs(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
    await handle_template_create_finish(callback, state, db, roles, user)


@router.callback_query(F.data.startswith("template_edit_specializations_"))
@require_role(['admin', 'manager'])
async def handle_edit_template_specializations(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_edit_specializations_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_specializations = template.required_specializations or []
        from uk_management_bot.utils.constants import SPECIALIZATIONS
        specializations_text = ", ".join([SPECIALIZATIONS.get(spec, spec) for spec in current_specializations]) if current_specializations else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
        from uk_management_bot.utils.constants import SPECIALIZATIONS
        keyboard = []
        
        for spec_key, spec_name in SPECIALIZATIONS.items():
            is_selected = spec_key in current_specializations
            text = f"{'‚úÖ' if is_selected else '‚≠ï'} {spec_name}"
            keyboard.append([InlineKeyboardButton(
                text=text, 
                callback_data=f"template_spec_toggle_{template_id}_{spec_key}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"template_spec_save_{template_id}")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"template_edit_{template_id}")])
        
        await callback.message.edit_text(
            f"üéØ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"–®–∞–±–ª–æ–Ω: <b>{template.name}</b>\n"
            f"–¢–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: <b>{specializations_text}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_template_id=template_id)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_spec_toggle_"))
@require_role(['admin', 'manager'])
async def handle_toggle_template_specialization(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        
        # –ü–∞—Ä—Å–∏–º callback data: template_spec_toggle_{template_id}_{specialization}
        parts = callback.data.replace("template_spec_toggle_", "").split("_", 1)
        template_id = int(parts[0])
        specialization = parts[1]
        
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        current_specs = template.required_specializations or []
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if specialization in current_specs:
            current_specs.remove(specialization)
        else:
            current_specs.append(specialization)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ
        template.required_specializations = current_specs
        from sqlalchemy.orm.attributes import flag_modified
        flag_modified(template, 'required_specializations')
        
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.utils.constants import SPECIALIZATIONS
        keyboard = []
        
        for spec_key, spec_name in SPECIALIZATIONS.items():
            is_selected = spec_key in current_specs
            text = f"{'‚úÖ' if is_selected else '‚≠ï'} {spec_name}"
            keyboard.append([InlineKeyboardButton(
                text=text, 
                callback_data=f"template_spec_toggle_{template_id}_{spec_key}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"template_spec_save_{template_id}")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"template_edit_{template_id}")])
        
        specializations_text = ", ".join([SPECIALIZATIONS.get(spec, spec) for spec in current_specs]) if current_specs else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        try:
            await callback.message.edit_text(
                f"üéØ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–®–∞–±–ª–æ–Ω: <b>{template.name}</b>\n"
                f"–¢–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: <b>{specializations_text}</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "message is not modified" not in str(edit_error):
                raise edit_error
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_spec_save_"))
@require_role(['admin', 'manager'])
async def handle_save_template_specializations(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        
        template_id = int(callback.data.replace("template_spec_save_", ""))
        
        await callback.answer("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        from aiogram.types import CallbackQuery
        new_callback = CallbackQuery(
            id=callback.id,
            from_user=callback.from_user,
            message=callback.message,
            data=f"template_edit_{template_id}",
            chat_instance=callback.chat_instance
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
        await handle_edit_template_details(new_callback, state, db, roles, user)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(lambda c: c.data.startswith("template_delete_") and not c.data.startswith("template_delete_confirm_") and c.data.replace("template_delete_", "").isdigit())
@require_role(['admin', 'manager'])
async def handle_delete_template(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        template_id = int(callback.data.replace("template_delete_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω <b>{template.name}</b>?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"template_delete_confirm_{template_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")
                ]
            ]),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(lambda c: c.data.startswith("template_delete_confirm_") and c.data.replace("template_delete_confirm_", "").isdigit())
@require_role(['admin', 'manager'])
async def handle_delete_template_confirm(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        template_manager = TemplateManager(db)
        
        template_id = int(callback.data.replace("template_delete_confirm_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        template_name = template.name
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
        success = template_manager.delete_template(template_id, force=False)
        
        if success:
            await callback.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —É–¥–∞–ª–µ–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤
            await handle_edit_templates(callback, state, db, roles, user)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω</b>\n\n"
                f"–®–∞–±–ª–æ–Ω <b>{template_name}</b> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ–Ω–∞—Ö.\n\n"
                f"–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å", callback_data=f"template_force_delete_{template_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_edit_{template_id}")]
                ]),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("template_force_delete_"))
@require_role(['admin', 'manager'])
async def handle_force_delete_template(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        template_manager = TemplateManager(db)
        
        template_id = int(callback.data.replace("template_force_delete_", ""))
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        template_name = template.name
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
        success = template_manager.delete_template(template_id, force=True)
        
        if success:
            await callback.answer(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤
            await handle_edit_templates(callback, state, db, roles, user)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
@router.message(StateFilter(TemplateManagementStates.editing_field))
async def handle_template_field_input(message: Message, state: FSMContext, db=None, roles: list = None, user=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        
        data = await state.get_data()
        template_id = data.get('editing_template_id')
        field = data.get('editing_field')
        
        if not template_id or not field:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        new_value = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è
        if field == "name":
            if len(new_value) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                return
            template.name = new_value
            
        elif field == "description":
            template.description = new_value if new_value else None
            
        elif field == "start_hour":
            try:
                start_hour = int(new_value)
                if not (0 <= start_hour <= 23):
                    await message.answer("‚ùå –ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
                    return
                template.start_hour = start_hour
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23")
                return
                
        elif field == "duration_hours":
            try:
                duration = int(new_value)
                if not (1 <= duration <= 24):
                    await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤")
                    return
                template.duration_hours = duration
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 24")
                return
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        field_names = {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "start_hour": "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞",
            "duration_hours": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        }
        
        field_display = field_names.get(field, field.capitalize())
        
        await message.answer(
            f"‚úÖ {field_display} —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —à–∞–±–ª–æ–Ω—É", callback_data=f"template_edit_{template_id}")]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "create_shift_from_template")
@require_role(['admin', 'manager'])
async def handle_create_shift_template(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        template_manager = TemplateManager(db)
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = template_manager.get_templates(active_only=True)
        
        if not templates:
            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏.",
                reply_markup=get_planning_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", show_alert=True)
            return
        
        await callback.message.edit_text(
            "üóÇÔ∏è <b>–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —Å–º–µ–Ω—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã:",
            reply_markup=get_template_selection_keyboard(templates, lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.selecting_template)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("select_template:"))
@require_role(['admin', 'manager'])
async def handle_template_selection(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞—Ç—ã"""
    try:
        template_id = int(callback.data.split(':')[1])
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(template_id=template_id)
        
        template_manager = TemplateManager(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
        template = db.query(ShiftTemplate).filter(ShiftTemplate.id == template_id).first()
        
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üìÖ <b>–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã</b>\n\n"
            f"<b>–®–∞–±–ª–æ–Ω:</b> {template.name}\n"
            f"<b>–í—Ä–µ–º—è:</b> {template.start_hour:02d}:{template.start_minute or 0:02d} - "
            f"{(template.start_hour + template.duration_hours) % 24:02d}:00\n"
            f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {', '.join(template.required_specializations) if template.required_specializations else '–õ—é–±–∞—è'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=get_date_selection_keyboard(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.selecting_date)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("select_date:"))
@require_role(['admin', 'manager'])
async def handle_date_selection(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        date_offset = int(callback.data.split(':')[1])
        target_date = date.today() + timedelta(days=date_offset)
        
        data = await state.get_data()
        template_id = data.get('template_id')
        
        if not template_id:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if not db:
            db = next(get_db())
        planning_service = ShiftPlanningService(db)
        lang = get_user_language(callback.from_user.id, db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
        created_shifts = planning_service.create_shift_from_template(
            template_id=template_id,
            target_date=target_date
        )
        
        if created_shifts:
            await callback.message.edit_text(
                f"‚úÖ <b>–°–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ</b>\n\n"
                f"<b>–î–∞—Ç–∞:</b> {target_date.strftime('%d.%m.%Y')}\n"
                f"<b>–°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:</b> {len(created_shifts)}\n\n"
                f"–°–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤—ã –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.",
                reply_markup=get_planning_menu(lang),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–°–º–µ–Ω—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</b>\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –°–º–µ–Ω—ã –Ω–∞ {target_date.strftime('%d.%m.%Y')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç\n"
                f"‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —à–∞–±–ª–æ–Ω\n"
                f"‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_planning_menu(lang),
                parse_mode="HTML"
            )
        
        await state.set_state(ShiftManagementStates.planning_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "plan_weekly_schedule")
@require_role(['admin', 'manager'])
async def handle_weekly_planning(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        planning_service = ShiftPlanningService(db)
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–º–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        start_date = date.today() + timedelta(days=1)
        results = planning_service.plan_weekly_schedule(start_date)
        
        stats = results['statistics']
        
        week_info = (
            f"üìÖ <b>–ù–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {results['week_start'].strftime('%d.%m.%Y')} - "
            f"{(results['week_start'] + timedelta(days=6)).strftime('%d.%m.%Y')}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:</b> {stats['total_shifts']}\n\n"
            f"<b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
        )
        
        for day_name, count in stats['shifts_by_day'].items():
            week_info += f"‚Ä¢ {day_name}: {count} —Å–º–µ–Ω\n"
        
        if stats['shifts_by_template']:
            week_info += f"\n<b>–ü–æ —à–∞–±–ª–æ–Ω–∞–º:</b>\n"
            for template_name, count in stats['shifts_by_template'].items():
                week_info += f"‚Ä¢ {template_name}: {count} —Å–º–µ–Ω\n"
        
        if results['errors']:
            week_info += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏:</b>\n"
            for error in results['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                week_info += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            week_info,
            reply_markup=get_planning_menu(lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "shift_analytics")
@require_role(['admin', 'manager'])
async def handle_shift_analytics(callback: CallbackQuery, state: FSMContext, db=None):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–º–µ–Ω</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_analytics_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.analytics_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "template_management")
@require_role(['admin', 'manager'])
async def handle_template_management(callback: CallbackQuery, state: FSMContext, db=None):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /shifts –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω.",
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "shift_executor_assignment")
@require_role(['admin', 'manager'])
async def handle_shift_executor_assignment(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        from datetime import datetime, timedelta
        now = datetime.now()
        week_ahead = now + timedelta(days=7)

        unassigned_shifts = db.query(Shift).filter(
            Shift.user_id.is_(None),
            Shift.status == 'planned',
            Shift.start_time.between(now, week_ahead)
        ).order_by(Shift.start_time).limit(10).all()

        if not unassigned_shifts:
            await callback.message.edit_text(
                "üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n"
                "‚úÖ –í—Å–µ —Å–º–µ–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —É–∂–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.\n\n"
                "üìã –î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—è–≤–æ–∫.",
                parse_mode="HTML",
                reply_markup=get_main_shift_menu()
            )
            await callback.answer()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        from uk_management_bot.keyboards.shift_management import get_executor_assignment_keyboard

        text = "üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n"
        text += f"üìä –ù–∞–π–¥–µ–Ω–æ <b>{len(unassigned_shifts)}</b> —Å–º–µ–Ω –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n\n"

        for shift in unassigned_shifts:
            start_time = shift.start_time.strftime('%d.%m.%Y %H:%M')
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            specialization_text = translate_specializations(shift.specialization_focus, lang)
            text += f"üîπ <b>{start_time}</b> - {specialization_text}\n"

        text += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_executor_assignment_keyboard()
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "weekly_analytics")
@require_role(['admin', 'manager'])
async def handle_weekly_analytics(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        db = next(get_db())
        planning_service = ShiftPlanningService(db)
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        end_date = date.today()
        start_date = end_date - timedelta(days=6)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = await planning_service.get_comprehensive_analytics(
            start_date=start_date,
            end_date=end_date,
            include_recommendations=True
        )
        
        if 'error' in analytics:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\n"
                f"{analytics['error']}",
                reply_markup=get_analytics_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üìä <b>–ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–º–µ–Ω</b>\n\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"<b>–î–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞:</b> {analytics['period']['total_days']}\n\n"
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω
        if analytics.get('shift_analytics'):
            sa = analytics['shift_analytics']
            report += (
                f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {sa.get('total_shifts', 0)}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {sa.get('average_efficiency', 0):.1f}%\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {sa.get('completion_rate', 0):.1f}%\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è: {sa.get('on_time_rate', 0):.1f}%\n\n"
            )
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if analytics.get('planning_efficiency') and 'error' not in analytics['planning_efficiency']:
            pe = analytics['planning_efficiency']
            report += (
                f"<b>‚öôÔ∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {pe.get('assignment_rate', 0):.1f}%\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {pe.get('avg_actual_duration', 0):.1f}—á\n"
                f"‚Ä¢ –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω: {pe.get('unassigned_shifts', 0)}\n\n"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analytics.get('recommendations'):
            recommendations = analytics['recommendations'][:3]  # –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report += f"<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for i, rec in enumerate(recommendations, 1):
                rec_text = rec.get('description', rec.get('recommendation', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))
                report += f"{i}. {rec_text[:100]}...\n"
        
        await callback.message.edit_text(
            report,
            reply_markup=get_analytics_menu(lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "workload_forecast")
@require_role(['admin', 'manager'])
async def handle_workload_forecast(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    try:
        db = next(get_db())
        planning_service = ShiftPlanningService(db)
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π
        target_date = date.today() + timedelta(days=1)
        prediction = await planning_service.predict_workload(
            target_date=target_date,
            days_ahead=5
        )
        
        if 'error' in prediction:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞</b>\n\n"
                f"{prediction['error']}",
                reply_markup=get_analytics_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_period = prediction['forecast_period']
        summary = prediction['summary']
        
        report = (
            f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {forecast_period['start_date'].strftime('%d.%m.%Y')} - "
            f"{forecast_period['end_date'].strftime('%d.%m.%Y')}\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:</b> {summary['avg_predicted_requests']} –∑–∞—è–≤–æ–∫/–¥–µ–Ω—å\n\n"
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        report += "<b>üìÖ –ü–æ –¥–Ω—è–º:</b>\n"
        for daily_pred in prediction['daily_predictions'][:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π
            date_str = daily_pred['date'].strftime('%d.%m')
            requests = daily_pred['predicted_requests']
            load_level = daily_pred['load_level']
            confidence = daily_pred['confidence']
            
            load_emoji = {
                'low': 'üü¢',
                'medium': 'üü°', 
                'high': 'üî¥'
            }.get(load_level, '‚ö™')
            
            report += f"‚Ä¢ {date_str}: {requests} –∑–∞—è–≤–æ–∫ {load_emoji} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        if summary.get('resource_requirements'):
            req = summary['resource_requirements']
            report += (
                f"\n<b>üíº –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º:</b>\n"
                f"‚Ä¢ –°–º–µ–Ω –≤ –¥–µ–Ω—å: {req['recommended_daily_shifts']}\n"
                f"‚Ä¢ –ü–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏: {req['peak_day_shifts']} —Å–º–µ–Ω\n"
                f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {req['min_executors_needed']}\n"
            )
        
        # –î–Ω–∏ —Å –≤—ã—Å–æ–∫–æ–π/–Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        if summary.get('peak_load_days'):
            peak_dates = [d.strftime('%d.%m') for d in summary['peak_load_days'][:3]]
            report += f"\nüî¥ <b>–î–Ω–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:</b> {', '.join(peak_dates)}\n"
        
        if summary.get('low_load_days'):
            low_dates = [d.strftime('%d.%m') for d in summary['low_load_days'][:3]]
            report += f"üü¢ <b>–î–Ω–∏ –Ω–∏–∑–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:</b> {', '.join(low_dates)}\n"
        
        await callback.message.edit_text(
            report,
            reply_markup=get_analytics_menu(lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "optimization_recommendations")
@require_role(['admin', 'manager'])
async def handle_optimization_recommendations(callback: CallbackQuery, state: FSMContext):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    try:
        db = next(get_db())
        planning_service = ShiftPlanningService(db)
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        recommendations = await planning_service.get_optimization_recommendations(
            target_date=date.today()
        )
        
        if 'error' in recommendations:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</b>\n\n"
                f"{recommendations['error']}",
                reply_markup=get_analytics_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        current_state = recommendations['current_state']
        target_date_str = recommendations['date'].strftime('%d.%m.%Y')
        
        report = (
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {target_date_str}\n\n"
            f"<b>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–º–µ–Ω: {current_state['shifts_count']}\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {current_state['assigned_shifts']}\n"
            f"‚Ä¢ –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {current_state['unassigned_shifts']}\n\n"
        )
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        priority_actions = recommendations.get('priority_actions', [])
        if priority_actions:
            report += "<b>üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            for action in priority_actions:
                urgency_emoji = {
                    'high': 'üî¥',
                    'medium': 'üü°',
                    'low': 'üü¢'
                }.get(action.get('urgency', 'medium'), '‚ö™')
                
                report += f"{urgency_emoji} {action['description']}\n"
                report += f"   ‚Üí {action['action']}\n\n"
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_suggestions = recommendations.get('optimization_suggestions', [])
        if optimization_suggestions:
            report += "<b>‚öôÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</b>\n"
            for suggestion in optimization_suggestions:
                report += f"‚Ä¢ {suggestion['description']}\n"
                report += f"  –î–µ–π—Å—Ç–≤–∏–µ: {suggestion['action']}\n\n"
        
        # –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if recommendations.get('ai_recommendations'):
            ai_recs = recommendations['ai_recommendations']
            if isinstance(ai_recs, dict) and ai_recs.get('recommendations'):
                report += "<b>ü§ñ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                for rec in ai_recs['recommendations'][:2]:  # –ü–µ—Ä–≤—ã–µ 2
                    rec_text = rec.get('description', rec.get('recommendation', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))
                    report += f"‚Ä¢ {rec_text[:80]}...\n"
        
        if not priority_actions and not optimization_suggestions:
            report += "‚úÖ <b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!</b>\n–¢–µ–∫—É—â–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ."
        
        await callback.message.edit_text(
            report,
            reply_markup=get_analytics_menu(lang),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_shifts")
async def handle_back_to_shifts(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_shift_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.main_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é —Å–º–µ–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_planning")
async def handle_back_to_planning(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)
        
        await callback.message.edit_text(
            "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_planning_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.planning_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_analytics")
async def handle_back_to_analytics(callback: CallbackQuery, state: FSMContext, db=None, roles: list = None, user=None):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(callback.from_user.id, db)

        await callback.message.edit_text(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–º–µ–Ω</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_analytics_menu(lang),
            parse_mode="HTML"
        )

        await state.set_state(ShiftManagementStates.analytics_menu)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# Handlers for Executor Assignment

@router.callback_query(F.data == "assign_to_shift")
@require_role(['admin', 'manager'])
async def handle_assign_to_shift(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–º–µ–Ω—É"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
        from datetime import datetime, timedelta
        now = datetime.now()
        week_ahead = now + timedelta(days=7)

        unassigned_shifts = db.query(Shift).filter(
            Shift.user_id.is_(None),
            Shift.status == 'planned',
            Shift.start_time >= now,
            Shift.start_time <= week_ahead
        ).order_by(Shift.start_time).limit(10).all()

        if not unassigned_shifts:
            await callback.message.edit_text(
                "‚úÖ <b>–í—Å–µ —Å–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</b>\n\n"
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω.",
                reply_markup=get_executor_assignment_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = "üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–º–µ–Ω—É</b>\n\n"
        text += "üìã <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã:</b>\n\n"

        for i, shift in enumerate(unassigned_shifts, 1):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            specialization_text = translate_specializations(shift.specialization_focus, lang)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            start_date = shift.start_time.strftime('%d.%m.%Y')
            start_time = shift.start_time.strftime('%H:%M')
            end_time = shift.end_time.strftime('%H:%M') if shift.end_time else "‚Äî"

            text += (f"{i}. <b>{start_date}</b> "
                    f"{start_time}-{end_time}\n"
                    f"   üîß {specialization_text}\n"
                    f"   üìç {shift.geographic_zone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã
        keyboard = []
        for shift in unassigned_shifts:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2)
            if shift.specialization_focus and isinstance(shift.specialization_focus, list):
                first_two = shift.specialization_focus[:2]
                spec_text = translate_specializations(first_two, lang)
            else:
                spec_text = "–õ—é–±–∞—è" if lang == "ru" else "Har qanday"

            button_text = f"{shift.start_time.strftime('%d.%m %H:%M')} - {spec_text}"
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_shift_for_assignment:{shift.id}"
            )])

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="executor_assignment")])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—É: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "ai_assignment")
@require_role(['admin', 'manager'])
async def handle_ai_assignment(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        from uk_management_bot.services.shift_assignment_service import ShiftAssignmentService
        assignment_service = ShiftAssignmentService(db)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        result = await assignment_service.auto_assign_executors_to_shifts(
            target_date=date.today(),
            days_ahead=7
        )

        if result.get('error'):
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                f"{result['error']}",
                reply_markup=get_executor_assignment_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        assignments = result.get('assignments', [])
        conflicts = result.get('conflicts', [])
        unassigned = result.get('unassigned_shifts', [])

        text = "ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
        text += f"‚úÖ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å–º–µ–Ω:</b> {len(assignments)}\n"
        text += f"‚ö†Ô∏è <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:</b> {len(conflicts)}\n"
        text += f"‚ùå <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ:</b> {len(unassigned)}\n\n"

        if assignments:
            text += "<b>üìã –£—Å–ø–µ—à–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
            for assignment in assignments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                shift = assignment.get('shift')
                executor = assignment.get('executor')
                confidence = assignment.get('confidence', 0)

                if shift and executor:
                    text += (f"‚Ä¢ {shift.date.strftime('%d.%m')} {shift.start_time.strftime('%H:%M')} "
                            f"‚Üí {executor.first_name} {executor.last_name} "
                            f"({confidence:.0%})\n")

            if len(assignments) > 5:
                text += f"... –∏ –µ—â—ë {len(assignments) - 5} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π\n"
            text += "\n"

        if conflicts:
            text += "<b>‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã (—Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è):</b>\n"
            for conflict in conflicts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                shift = conflict.get('shift')
                reason = conflict.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                if shift:
                    text += f"‚Ä¢ {shift.date.strftime('%d.%m')} {shift.start_time.strftime('%H:%M')} - {reason}\n"

            if len(conflicts) > 3:
                text += f"... –∏ –µ—â—ë {len(conflicts) - 3} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ò–ò-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "bulk_assignment")
@require_role(['admin', 'manager'])
async def handle_bulk_assignment(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        from datetime import datetime
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

        total_unassigned = db.query(Shift).filter(
            Shift.user_id.is_(None),
            Shift.start_time >= today
        ).count()

        available_executors = db.query(User).filter(
            User.active_role == 'executor',
            User.status == 'approved'
        ).count()

        text = (f"üìÖ <b>–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n"
               f"üìä <b>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</b>\n"
               f"‚Ä¢ –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω: {total_unassigned}\n"
               f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {available_executors}\n\n"
               f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>")

        keyboard = [
            [InlineKeyboardButton(text="üöÄ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data="bulk_auto_assign")],
            [InlineKeyboardButton(text="üìã –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="bulk_by_specialization")],
            [InlineKeyboardButton(text="üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –ø–µ—Ä–∏–æ–¥", callback_data="bulk_by_period")],
            [InlineKeyboardButton(text="‚ö° –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="bulk_by_priority")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="executor_assignment")]
        ]

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "workload_analysis")
@require_role(['admin', 'manager'])
async def handle_workload_analysis(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        end_date = date.today() + timedelta(days=7)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
        from sqlalchemy import func
        executor_stats = db.query(
            User.id,
            User.first_name,
            User.last_name,
            func.count(Shift.id).label('shift_count'),
            func.sum(
                func.extract('epoch', Shift.end_time - Shift.start_time) / 3600
            ).label('total_hours')
        ).join(
            Shift, Shift.user_id == User.id
        ).filter(
            User.active_role == 'executor',
            Shift.start_time.between(datetime.now(), end_date)
        ).group_by(
            User.id, User.first_name, User.last_name
        ).order_by(
            func.count(Shift.id).desc()
        ).all()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –±–µ–∑ —Å–º–µ–Ω
        assigned_executor_ids = [stat.id for stat in executor_stats]
        unassigned_executors = db.query(User).filter(
            User.role == 'executor',
            User.is_active == True,
            ~User.id.in_(assigned_executor_ids)
        ).all()

        text = "üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n\n"
        text += f"<b>–ü–µ—Ä–∏–æ–¥:</b> {date.today().strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"

        if executor_stats:
            text += "<b>üë• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b>\n"
            for stat in executor_stats[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                hours = stat.total_hours or 0
                load_level = "üî¥" if hours > 40 else "üü°" if hours > 20 else "üü¢"
                text += (f"{load_level} <b>{stat.first_name} {stat.last_name}</b>\n"
                        f"   –°–º–µ–Ω: {stat.shift_count}, –ß–∞—Å–æ–≤: {hours:.1f}—á\n")
            text += "\n"

        if unassigned_executors:
            text += f"<b>üò¥ –°–≤–æ–±–æ–¥–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ({len(unassigned_executors)}):</b>\n"
            for executor in unassigned_executors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                text += f"‚Ä¢ {executor.first_name} {executor.last_name}\n"

            if len(unassigned_executors) > 5:
                text += f"... –∏ –µ—â—ë {len(unassigned_executors) - 5} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
        if executor_stats:
            max_hours = max([stat.total_hours or 0 for stat in executor_stats])
            min_hours = min([stat.total_hours or 0 for stat in executor_stats])

            if max_hours - min_hours > 20:
                text += "\n‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ë–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ–Ω."

        await callback.message.edit_text(
            text,
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "redistribute_load")
@require_role(['admin', 'manager'])
async def handle_redistribute_load(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        from uk_management_bot.services.shift_assignment_service import ShiftAssignmentService
        assignment_service = ShiftAssignmentService(db)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        result = await assignment_service.redistribute_workload(
            start_date=date.today(),
            days_ahead=7,
            max_hours_per_executor=40
        )

        if result.get('error'):
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</b>\n\n"
                f"{result['error']}",
                reply_markup=get_executor_assignment_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        redistributed = result.get('redistributed_shifts', [])
        summary = result.get('summary', {})

        text = "üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
        text += f"‚úÖ <b>–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–º–µ–Ω:</b> {len(redistributed)}\n"
        text += f"üìà <b>–£–ª—É—á—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b> {summary.get('balance_improvement', 0):.1f}%\n"
        text += f"‚öñÔ∏è <b>–ù–æ–≤—ã–π —Ä–∞–∑–±—Ä–æ—Å –Ω–∞–≥—Ä—É–∑–∫–∏:</b> {summary.get('load_variance', 0):.1f}—á\n\n"

        if redistributed:
            text += "<b>üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö:</b>\n"
            for change in redistributed[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                shift = change.get('shift')
                old_executor = change.get('old_executor')
                new_executor = change.get('new_executor')

                if shift and new_executor:
                    text += (f"‚Ä¢ {shift.date.strftime('%d.%m')} {shift.start_time.strftime('%H:%M')}\n"
                            f"  {old_executor.first_name if old_executor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} "
                            f"‚Üí {new_executor.first_name} {new_executor.last_name}\n")

            if len(redistributed) > 5:
                text += f"... –∏ –µ—â—ë {len(redistributed) - 5} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"

        await callback.message.edit_text(
            text,
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "schedule_conflicts")
@require_role(['admin', 'manager'])
async def handle_schedule_conflicts(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        end_date = date.today() + timedelta(days=7)

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å–º–µ–Ω—ã —É –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from sqlalchemy import and_
        conflicts = []

        shifts = db.query(Shift).filter(
            Shift.user_id.is_not(None),
            Shift.start_time.between(datetime.now(), end_date)
        ).order_by(Shift.user_id, Shift.start_time).all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ –∏—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        from itertools import groupby
        for executor_id, executor_shifts in groupby(shifts, key=lambda s: s.user_id):
            executor_shifts = list(executor_shifts)
            for i in range(len(executor_shifts) - 1):
                shift1 = executor_shifts[i]
                shift2 = executor_shifts[i + 1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
                if (shift1.date == shift2.date and
                    shift1.end_time > shift2.start_time):
                    conflicts.append({
                        'executor': shift1.executor,
                        'shift1': shift1,
                        'shift2': shift2,
                        'type': 'time_overlap'
                    })

        # –ù–∞—Ö–æ–¥–∏–º —Å–º–µ–Ω—ã –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–µ–Ω–µ–µ 1 —á–∞—Å–∞)
        for executor_id, executor_shifts in groupby(shifts, key=lambda s: s.executor_id):
            executor_shifts = list(executor_shifts)
            for i in range(len(executor_shifts) - 1):
                shift1 = executor_shifts[i]
                shift2 = executor_shifts[i + 1]

                if shift1.date == shift2.date:
                    break_time = (datetime.combine(shift2.date, shift2.start_time) -
                                 datetime.combine(shift1.date, shift1.end_time)).total_seconds() / 3600

                    if 0 < break_time < 1:  # –ú–µ–Ω–µ–µ —á–∞—Å–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
                        conflicts.append({
                            'executor': shift1.executor,
                            'shift1': shift1,
                            'shift2': shift2,
                            'type': 'short_break',
                            'break_hours': break_time
                        })

        text = "‚ö†Ô∏è <b>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        text += f"<b>–ü–µ—Ä–∏–æ–¥:</b> {date.today().strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
        text += f"<b>–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:</b> {len(conflicts)}\n\n"

        if not conflicts:
            text += "‚úÖ <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n"
            text += "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã."
        else:
            text += "<b>üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:</b>\n\n"

            for i, conflict in enumerate(conflicts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                executor = conflict['executor']
                shift1 = conflict['shift1']
                shift2 = conflict['shift2']
                conflict_type = conflict['type']

                text += f"<b>{i}. {executor.first_name} {executor.last_name}</b>\n"
                text += f"üìÖ {shift1.date.strftime('%d.%m.%Y')}\n"

                if conflict_type == 'time_overlap':
                    text += f"‚ùå –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–º–µ–Ω:\n"
                    text += f"   {shift1.start_time.strftime('%H:%M')}-{shift1.end_time.strftime('%H:%M')}\n"
                    text += f"   {shift2.start_time.strftime('%H:%M')}-{shift2.end_time.strftime('%H:%M')}\n"
                elif conflict_type == 'short_break':
                    break_hours = conflict['break_hours']
                    text += f"‚ö° –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ ({break_hours:.1f}—á):\n"
                    text += f"   {shift1.start_time.strftime('%H:%M')}-{shift1.end_time.strftime('%H:%M')}\n"
                    text += f"   {shift2.start_time.strftime('%H:%M')}-{shift2.end_time.strftime('%H:%M')}\n"

                text += "\n"

            if len(conflicts) > 5:
                text += f"... –∏ –µ—â—ë {len(conflicts) - 5} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n\n"

            text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."

        await callback.message.edit_text(
            text,
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


# Additional handlers for bulk assignment and shift selection

@router.callback_query(F.data == "bulk_auto_assign")
@require_role(['admin', 'manager'])
async def handle_bulk_auto_assign(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ–Ω"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        from uk_management_bot.services.shift_assignment_service import ShiftAssignmentService
        assignment_service = ShiftAssignmentService(db)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
        result = await assignment_service.auto_assign_executors_to_shifts(
            target_date=date.today(),
            days_ahead=30  # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        )

        if result.get('error'):
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                f"{result['error']}",
                reply_markup=get_executor_assignment_keyboard(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        assignments = result.get('assignments', [])
        unassigned = result.get('unassigned_shifts', [])

        text = "üöÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
        text += f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ:</b> {len(assignments)} —Å–º–µ–Ω\n"
        text += f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å:</b> {len(unassigned)} —Å–º–µ–Ω\n\n"

        if assignments:
            text += f"üìä <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {(len(assignments) / (len(assignments) + len(unassigned)) * 100):.1f}%\n\n"

        if unassigned:
            text += "<b>‚ö†Ô∏è –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>"

        await callback.message.edit_text(
            text,
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("select_shift_for_assignment:"))
@require_role(['admin', 'manager'])
async def handle_select_shift_for_assignment(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ–Ω—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        shift_id = int(callback.data.split(":")[1])
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        if not shift:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–æ–ª—å 'executor' –≤ JSON-–ø–æ–ª–µ roles
        all_users = db.query(User).filter(User.status == 'approved').all()

        available_executors = []
        for user in all_users:
            try:
                import json
                if user.roles:
                    parsed_roles = json.loads(user.roles)
                    if isinstance(parsed_roles, list) and 'executor' in parsed_roles:
                        available_executors.append(user)
                elif user.active_role == 'executor':
                    available_executors.append(user)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º active_role
                if user.active_role == 'executor':
                    available_executors.append(user)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤ specialization_focus
        if shift.specialization_focus and isinstance(shift.specialization_focus, list):
            import json
            filtered_executors = []
            for executor in available_executors:
                # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ JSON
                try:
                    if executor.specialization:
                        if isinstance(executor.specialization, str):
                            executor_specs = json.loads(executor.specialization)
                        else:
                            executor_specs = executor.specialization

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
                        if isinstance(executor_specs, list):
                            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –ø–æ–¥—Ö–æ–¥–∏—Ç
                            if any(spec in executor_specs for spec in shift.specialization_focus):
                                filtered_executors.append(executor)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —Å–ø–∏—Å–æ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                            continue
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                except (json.JSONDecodeError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    continue

            available_executors = filtered_executors

        text = f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Å–º–µ–Ω—É</b>\n\n"
        text += f"<b>üìÖ –°–º–µ–Ω–∞:</b> {shift.start_time.strftime('%d.%m.%Y')} "

        end_time_str = shift.end_time.strftime('%H:%M') if shift.end_time else "‚Äî"
        text += f"{shift.start_time.strftime('%H:%M')}-{end_time_str}\n"

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        spec_text = translate_specializations(shift.specialization_focus, lang)
        text += f"<b>üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {spec_text}\n"

        text += f"<b>üìç –ó–æ–Ω–∞:</b> {shift.geographic_zone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

        if not available_executors:
            text += "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</b>\n"
            text += "–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."

            keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="assign_to_shift")]]
        else:
            text += f"<b>üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ({len(available_executors)}):</b>\n\n"

            keyboard = []
            for executor in available_executors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                from datetime import datetime, timedelta
                shift_date = shift.start_time.date()
                day_start = datetime.combine(shift_date, datetime.min.time())
                day_end = day_start + timedelta(days=1)

                day_shifts = db.query(Shift).filter(
                    Shift.user_id == executor.id,
                    Shift.start_time >= day_start,
                    Shift.start_time < day_end
                ).count()

                load_indicator = "üî¥" if day_shifts >= 3 else "üü°" if day_shifts >= 1 else "üü¢"

                keyboard.append([InlineKeyboardButton(
                    text=f"{load_indicator} {executor.first_name} {executor.last_name} ({day_shifts} —Å–º–µ–Ω)",
                    callback_data=f"assign_executor_to_shift:{shift_id}:{executor.id}"
                )])

            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="assign_to_shift")])

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

        await state.set_state(ExecutorAssignmentStates.viewing_available_executors)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("assign_executor_to_shift:"))
@require_role(['admin', 'manager'])
async def handle_assign_executor_to_shift(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ —Å–º–µ–Ω—É"""
    try:
        parts = callback.data.split(":")
        shift_id = int(parts[1])
        executor_id = int(parts[2])

        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        executor = db.query(User).filter(User.id == executor_id).first()

        if not shift or not executor:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω —É —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
        from datetime import datetime, timedelta

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º 8 —á–∞—Å–æ–≤)
        shift_end = shift.end_time if shift.end_time else shift.start_time + timedelta(hours=8)

        conflicts = db.query(Shift).filter(
            Shift.user_id == executor_id,
            Shift.start_time < shift_end,
            Shift.end_time > shift.start_time
        ).count()

        if conflicts > 0:
            shift_date_str = shift.start_time.strftime('%d.%m.%Y')
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n"
                f"–£ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è <b>{executor.first_name} {executor.last_name}</b> "
                f"—É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å–º–µ–Ω—ã –Ω–∞ {shift_date_str}.\n\n"
                f"–í—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"force_assign:{shift_id}:{executor_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"select_shift_for_assignment:{shift_id}")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        shift.user_id = executor_id
        shift.status = 'active'  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é
        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        try:
            from uk_management_bot.services.notification_service import NotificationService
            notification_service = NotificationService(db)
            await notification_service.send_shift_assignment_notification(
                executor_id=executor_id,
                shift_id=shift_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        spec_text = translate_specializations(shift.specialization_focus, lang)

        shift_date_str = shift.start_time.strftime('%d.%m.%Y')
        start_time_str = shift.start_time.strftime('%H:%M')
        end_time_str = shift.end_time.strftime('%H:%M') if shift.end_time else "‚Äî"

        await callback.message.edit_text(
            f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"<b>üìÖ –°–º–µ–Ω–∞:</b> {shift_date_str} "
            f"{start_time_str}-{end_time_str}\n"
            f"<b>üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor.first_name} {executor.last_name}\n"
            f"<b>üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {spec_text}\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        if db:
            db.rollback()
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("force_assign:"))
@require_role(['admin', 'manager'])
async def handle_force_assign(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        parts = callback.data.split(":")
        shift_id = int(parts[1])
        executor_id = int(parts[2])

        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        executor = db.query(User).filter(User.id == executor_id).first()

        if not shift or not executor:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        shift.user_id = executor_id
        shift.notes = (shift.notes or "") + f"\n[–ö–û–ù–§–õ–ò–ö–¢ –†–ê–°–ü–ò–°–ê–ù–ò–Ø] –ù–∞–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ {date.today().strftime('%d.%m.%Y')}"
        db.commit()

        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ</b>\n\n"
            f"<b>üìÖ –°–º–µ–Ω–∞:</b> {shift.start_time.date().strftime('%d.%m.%Y')} "
            f"{shift.start_time.strftime('%H:%M')}-{shift.end_time.strftime('%H:%M')}\n"
            f"<b>üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor.first_name} {executor.last_name}\n\n"
            f"‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–º–µ–Ω–∞–º–∏!\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer("‚ö†Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        if db:
            db.rollback()
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "executor_assignment")
@require_role(['admin', 'manager'])
async def handle_executor_assignment_back(callback: CallbackQuery, state: FSMContext, db: Session = None, user: User = None, roles: list = None):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    try:
        if not db:
            db = SessionLocal()
        lang = get_user_language(callback.from_user.id, db)

        await callback.message.edit_text(
            "üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ —Å–º–µ–Ω—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_executor_assignment_keyboard(lang),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()