"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ó–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
"""

import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from uk_management_bot.services.user_verification_service import UserVerificationService
from uk_management_bot.services.notification_service import NotificationService
from uk_management_bot.keyboards.user_verification import (
    get_verification_main_keyboard,
    get_user_verification_keyboard,
    get_document_verification_keyboard,
    get_access_rights_keyboard,
    get_verification_request_keyboard,
    get_cancel_keyboard
)
from uk_management_bot.states.user_verification import UserVerificationStates
from uk_management_bot.database.models.user_verification import (
    DocumentType, VerificationStatus, AccessLevel
)
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.auth_helpers import has_admin_access

logger = logging.getLogger(__name__)
router = Router()


# ‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "user_verification_panel")
async def show_verification_panel(callback: CallbackQuery, db: Session, roles: list = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_service = UserVerificationService(db)
        stats = verification_service.get_verification_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text(
            get_text('verification.main_title', language=lang),
            reply_markup=get_verification_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("verification_user_"))
async def show_user_verification(callback: CallbackQuery, db: Session, roles: list = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        from uk_management_bot.database.models.user import User
        from uk_management_bot.database.models.user_verification import UserDocument, UserVerification, AccessRights
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        documents = db.query(UserDocument).filter(UserDocument.user_id == user_id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        access_rights = db.query(AccessRights).filter(
            AccessRights.user_id == user_id,
            AccessRights.is_active == True
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üìù **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìç **–ê–¥—Ä–µ—Å–∞:**"""

        # –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä
        if user.user_apartments:
            approved_apartments = [ua for ua in user.user_apartments if ua.status == 'approved']
            if approved_apartments:
                user_info += "\n"
                for ua in approved_apartments:
                    apartment = ua.apartment
                    primary_marker = " ‚≠ê" if ua.is_primary else ""
                    owner_marker = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if ua.is_owner else ""
                    address = apartment.full_address if hasattr(apartment, 'full_address') else f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment.apartment_number}"
                    user_info += f"‚Ä¢ {address}{primary_marker}{owner_marker}\n"
            else:
                user_info += "\n‚Ä¢ –ê–¥—Ä–µ—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã (–∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏)\n"
        else:
            user_info += "\n‚Ä¢ –ê–¥—Ä–µ—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"

        user_info += """

üìã **–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {get_text(f'verification.status.{user.verification_status}', language=lang)}
"""
        
        if user.verification_notes:
            user_info += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {user.verification_notes}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        if documents:
            user_info += f"\n\nüìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã ({len(documents)}):**"
            for doc in documents:
                status_emoji = "‚úÖ" if doc.verification_status == VerificationStatus.APPROVED else "‚è≥" if doc.verification_status == VerificationStatus.PENDING else "‚ùå"
                doc_type_name = get_text(f'verification.document_types.{doc.document_type.value}', language=lang)
                user_info += f"\n{status_emoji} {doc_type_name}"
        else:
            user_info += f"\n\nüìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞
        if access_rights:
            user_info += f"\n\nüîë **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ({len(access_rights)}):**"
            for right in access_rights:
                user_info += f"\n‚Ä¢ {right.access_level.value}"
                if right.apartment_number:
                    user_info += f" (–∫–≤. {right.apartment_number})"
                elif right.house_number:
                    user_info += f" (–¥–æ–º {right.house_number})"
                elif right.yard_name:
                    user_info += f" (–¥–≤–æ—Ä {right.yard_name})"
        
        await callback.message.edit_text(
            user_info,
            reply_markup=get_user_verification_keyboard(user_id, lang),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ó–ê–ü–†–û–° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("verification_request_"))
async def request_additional_info(callback: CallbackQuery, db: Session, roles: list = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await callback.message.edit_text(
            get_text('verification.request_info_title', language=lang),
            reply_markup=get_verification_request_keyboard(user_id, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )

# ‚ïê‚ïê‚ïê –ü–†–û–°–ú–û–¢–† –î–û–ö–£–ú–ï–ù–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("view_user_documents_"))
async def view_user_documents(callback: CallbackQuery, db: Session, roles: list = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        from uk_management_bot.database.models.user import User
        from uk_management_bot.database.models.user_verification import UserDocument
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        documents = db.query(UserDocument).filter(UserDocument.user_id == user_id).order_by(UserDocument.created_at.desc()).all()
        
        if not documents:
            await callback.message.edit_text(
                f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name or user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}**\n\n"
                f"–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                reply_markup=get_cancel_keyboard(lang),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents_text = f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name or user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}**\n\n"
        
        for i, doc in enumerate(documents, 1):
            status_emoji = "‚úÖ" if doc.verification_status == VerificationStatus.APPROVED else "‚è≥" if doc.verification_status == VerificationStatus.PENDING else "‚ùå"
            doc_type_name = get_text(f'verification.document_types.{doc.document_type.value}', language=lang)
            
            documents_text += f"{i}. {status_emoji} **{doc_type_name}**\n"
            documents_text += f"   üìÅ –§–∞–π–ª: {doc.file_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            if doc.file_size:
                documents_text += f"   üìè –†–∞–∑–º–µ—Ä: {doc.file_size // 1024} KB\n"
            documents_text += f"   üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if doc.verification_notes:
                documents_text += f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {doc.verification_notes}\n"
            
            documents_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        from uk_management_bot.keyboards.user_verification import get_document_management_keyboard
        keyboard = get_document_management_keyboard(user_id, lang)
        
        await callback.message.edit_text(
            documents_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )

@router.callback_query(F.data.startswith("download_document_"))
async def download_user_document(callback: CallbackQuery, db: Session, roles: list = None):
    """–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    document_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        from uk_management_bot.database.models.user_verification import UserDocument
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = db.query(UserDocument).filter(UserDocument.id == document_id).first()
        if not document:
            await callback.answer(
                "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                show_alert=True
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram import Bot
        from uk_management_bot.config.settings import settings
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        try:
            caption = (f"üìÑ {get_text(f'verification.document_types.{document.document_type.value}', language=lang)}\n"
                      f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {document.created_at.strftime('%d.%m.%Y %H:%M')}")

            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∫–∞–∫ —Ñ–æ—Ç–æ
            try:
                await bot.send_document(
                    chat_id=callback.from_user.id,
                    document=document.file_id,
                    caption=caption
                )
                await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception as doc_error:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "can't use file of type Photo", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                if "can't use file of type Photo" in str(doc_error):
                    logger.info(f"–§–∞–π–ª {document.file_id} —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ photo")
                    await bot.send_photo(
                        chat_id=callback.from_user.id,
                        photo=document.file_id,
                        caption=caption
                    )
                    await callback.answer("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                else:
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", show_alert=True)
        finally:
            await bot.session.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("request_info_"))
async def select_info_type(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    lang = callback.from_user.language_code or 'ru'
    parts = callback.data.split("_")
    user_id = int(parts[2])
    info_type = parts[3]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            target_user_id=user_id,
            info_type=info_type
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(UserVerificationStates.enter_request_comment)
        
        await callback.message.edit_text(
            get_text('verification.enter_request_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.message(UserVerificationStates.enter_request_comment)
async def process_request_comment(message: Message, state: FSMContext, db: Session, roles: list = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    lang = message.from_user.language_code or 'ru'
    comment = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await message.answer(get_text('errors.permission_denied', language=lang))
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get('target_user_id')
        info_type = data.get('info_type')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_service = UserVerificationService(db)
        requested_info = {
            'type': info_type,
            'comment': comment
        }
        
        verification = verification_service.create_verification_request(
            user_id=user_id,
            admin_id=message.from_user.id,
            requested_info=requested_info
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        notification_service = NotificationService(db)
        await notification_service.send_verification_request_notification(user_id, info_type, comment)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            get_text('verification.request_sent_successfully', language=lang),
            reply_markup=get_verification_main_keyboard({}, lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(get_text('errors.unknown_error', language=lang))


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("document_verify_"))
async def verify_document(callback: CallbackQuery, db: Session, roles: list = None):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    document_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        from uk_management_bot.database.models.user_verification import UserDocument
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = db.query(UserDocument).filter(UserDocument.id == document_id).first()
        if not document:
            await callback.answer(
                get_text('errors.document_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        document_info = f"""
üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ**

üìã **–¢–∏–ø:** {document.document_type.value}
üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω:** {document.created_at.strftime('%d.%m.%Y %H:%M')}
üìä **–†–∞–∑–º–µ—Ä:** {document.file_size or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –±–∞–π—Ç
üìù **–°—Ç–∞—Ç—É—Å:** {get_text(f'verification.document_status.{document.verification_status.value}', language=lang)}
"""
        
        if document.verification_notes:
            document_info += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** {document.verification_notes}"
        
        await callback.message.edit_text(
            document_info,
            reply_markup=get_document_verification_keyboard(document_id, lang),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("document_approve_"))
async def approve_document(callback: CallbackQuery, db: Session, roles: list = None):
    """–û–¥–æ–±—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    lang = callback.from_user.language_code or 'ru'
    document_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        verification_service = UserVerificationService(db)
        success = verification_service.verify_document(
            document_id=document_id,
            admin_id=callback.from_user.id,
            status=VerificationStatus.APPROVED
        )
        
        if success:
            await callback.answer(
                get_text('verification.document_approved', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("document_reject_"))
async def reject_document(callback: CallbackQuery, db: Session, roles: list = None):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    lang = callback.from_user.language_code or 'ru'
    document_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        verification_service = UserVerificationService(db)
        success = verification_service.verify_document(
            document_id=document_id,
            admin_id=callback.from_user.id,
            status=VerificationStatus.REJECTED,
            notes="–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        
        if success:
            await callback.answer(
                get_text('verification.document_rejected', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ê–í–ê–ú–ò –î–û–°–¢–£–ü–ê ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("access_rights_"))
async def manage_access_rights(callback: CallbackQuery, db: Session, roles: list = None):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        from uk_management_bot.database.models.user import User
        from uk_management_bot.database.models.user_verification import AccessRights
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        current_rights = db.query(AccessRights).filter(
            AccessRights.user_id == user_id,
            AccessRights.is_active == True
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞
        rights_info = f"""
üîë **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} {user.last_name or ''}

üìã **–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ ({len(current_rights)}):**
"""
        
        if current_rights:
            for right in current_rights:
                rights_info += f"‚Ä¢ {right.access_level.value}"
                if right.apartment_number:
                    rights_info += f" (–∫–≤. {right.apartment_number})"
                elif right.house_number:
                    rights_info += f" (–¥–æ–º {right.house_number})"
                elif right.yard_name:
                    rights_info += f" (–¥–≤–æ—Ä {right.yard_name})"
                rights_info += "\n"
        else:
            rights_info += "‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n"
        
        await callback.message.edit_text(
            rights_info,
            reply_markup=get_access_rights_keyboard(user_id, lang),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –û–î–û–ë–†–ï–ù–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("verify_approve_"))
async def approve_user_verification(callback: CallbackQuery, db: Session, roles: list = None):
    """–û–¥–æ–±—Ä–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        verification_service = UserVerificationService(db)
        success = await verification_service.approve_verification(
            user_id=user_id,
            admin_id=callback.from_user.id
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification_service = NotificationService(db)
            await notification_service.send_verification_approved_notification(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                from aiogram import Bot
                from uk_management_bot.config.settings import settings
                from uk_management_bot.keyboards.base import get_main_keyboard_for_role
                from uk_management_bot.database.models.user import User
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                target_user = db.query(User).filter(User.id == user_id).first()
                if target_user:
                    bot = Bot(token=settings.BOT_TOKEN)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_roles = []
                    if target_user.roles:
                        try:
                            import json
                            user_roles = json.loads(target_user.roles) if isinstance(target_user.roles, str) else target_user.roles
                        except:
                            user_roles = ["applicant"]
                    else:
                        user_roles = ["applicant"]
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    restart_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    await bot.send_message(
                        chat_id=target_user.telegram_id,
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
                        reply_markup=restart_keyboard
                    )
                    
                    await bot.session.close()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await callback.answer(
                get_text('verification.user_approved', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("verify_reject_"))
async def reject_user_verification(callback: CallbackQuery, db: Session, roles: list = None):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        verification_service = UserVerificationService(db)
        success = verification_service.reject_verification(
            user_id=user_id,
            admin_id=callback.from_user.id,
            notes="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification_service = NotificationService(db)
            await notification_service.send_verification_rejected_notification(user_id)
            
            await callback.answer(
                get_text('verification.user_rejected', language=lang),
                show_alert=True
            )
        else:
            await callback.answer(
                get_text('errors.operation_failed', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )
