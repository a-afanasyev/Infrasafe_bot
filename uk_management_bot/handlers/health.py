"""
Health Check handlers –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import logging
import time
from datetime import datetime
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.orm import Session
from sqlalchemy import text

from uk_management_bot.config.settings import settings
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.auth_helpers import has_admin_access

logger = logging.getLogger(__name__)
router = Router()

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_start_time = time.time()


async def check_database_health(db: Session) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î
    """
    try:
        start_time = time.time()
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        result = db.execute(text("SELECT 1 as health_check"))
        result.fetchone()
        
        response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        return {
            "status": "healthy",
            "response_time_ms": round(response_time, 2),
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }


async def check_redis_health() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Redis
    """
    if not settings.USE_REDIS_RATE_LIMIT:
        return {
            "status": "disabled",
            "message": "Redis rate limiting is disabled"
        }
    
    try:
        from uk_management_bot.utils.redis_rate_limiter import get_redis_client
        
        start_time = time.time()
        redis = await get_redis_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
        await redis.ping()
        
        response_time = (time.time() - start_time) * 1000
        
        return {
            "status": "healthy",
            "response_time_ms": round(response_time, 2),
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error(f"Redis health check failed: {e}")
        return {
            "status": "unhealthy", 
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }


async def get_system_info() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    
    Returns:
        Dict —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    uptime_seconds = time.time() - _start_time
    
    return {
        "uptime_seconds": round(uptime_seconds, 2),
        "uptime_human": f"{int(uptime_seconds // 3600)}h {int((uptime_seconds % 3600) // 60)}m {int(uptime_seconds % 60)}s",
        "debug_mode": settings.DEBUG,
        "log_level": settings.LOG_LEVEL,
        "supported_languages": settings.SUPPORTED_LANGUAGES,
        "timestamp": datetime.utcnow().isoformat()
    }


@router.message(Command("health"))
async def health_check_command(message: Message, db: Session):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
    """
    lang = message.from_user.language_code or 'ru'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db_health = await check_database_health(db)
        redis_health = await check_redis_health()
        system_info = await get_system_info()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = "healthy"
        if db_health["status"] == "unhealthy":
            overall_status = "unhealthy"
        elif redis_health["status"] == "unhealthy":
            overall_status = "degraded"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status_emoji = {
            "healthy": "‚úÖ",
            "degraded": "‚ö†Ô∏è", 
            "unhealthy": "‚ùå"
        }
        
        message_text = f"""
{status_emoji[overall_status]} **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {overall_status.upper()}**

üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚îî –°—Ç–∞—Ç—É—Å: {db_health['status']}
‚îî –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {db_health.get('response_time_ms', 'N/A')} ms

üîÑ **Redis –∫—ç—à:**
‚îî –°—Ç–∞—Ç—É—Å: {redis_health['status']}
‚îî –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {redis_health.get('response_time_ms', 'N/A')} ms

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
‚îî –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_info['uptime_human']}
‚îî –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if system_info['debug_mode'] else '–í—ã–∫–ª—é—á–µ–Ω'}
‚îî –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {system_info['log_level']}

üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """.strip()
        
        await message.answer(message_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Health check command failed: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
            parse_mode="Markdown"
        )


@router.message(Command("health_detailed"))
async def detailed_health_check_command(message: Message, db: Session, roles: list = None):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
    """
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not roles or not any(role in ['admin', 'manager'] for role in roles):
        await message.answer(
            get_text('errors.permission_denied', language=lang)
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        db_health = await check_database_health(db)
        redis_health = await check_redis_health()
        system_info = await get_system_info()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        config_info = {
            "invite_secret_set": bool(settings.INVITE_SECRET),
            "admin_password_secure": settings.ADMIN_PASSWORD != "12345" and settings.ADMIN_PASSWORD != "dev_password_change_me",
            "redis_enabled": settings.USE_REDIS_RATE_LIMIT,
            "notifications_enabled": settings.ENABLE_NOTIFICATIONS,
            "admin_users_count": len(settings.ADMIN_USER_IDS)
        }
        
        message_text = f"""
üîß **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ**

üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
```json
{db_health}
```

üîÑ **Redis:**
```json  
{redis_health}
```

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
```json
{system_info}
```

‚öôÔ∏è **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚îî INVITE_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if config_info['invite_secret_set'] else '‚ùå'}
‚îî –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞: {'‚úÖ' if config_info['admin_password_secure'] else '‚ùå'}
‚îî Redis –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if config_info['redis_enabled'] else '‚ö†Ô∏è'}
‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {'‚úÖ' if config_info['notifications_enabled'] else '‚ö†Ô∏è'}
‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {config_info['admin_users_count']}

üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """.strip()
        
        await message.answer(message_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Detailed health check failed: {e}")
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="Markdown"
        )


@router.message(Command("ping"))
async def ping_command(message: Message):
    """–ü—Ä–æ—Å—Ç–∞—è ping –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    await message.answer("üèì Pong! Bot is alive and responding.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö health check (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è load balancer)
async def get_health_status(db: Session) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    Returns:
        Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        db_health = await check_database_health(db)
        redis_health = await check_redis_health()
        system_info = await get_system_info()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = "healthy"
        components_healthy = 0
        total_components = 2  # DB + Redis (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        
        if db_health["status"] == "healthy":
            components_healthy += 1
        
        if redis_health["status"] in ["healthy", "disabled"]:
            components_healthy += 1
        elif redis_health["status"] == "unhealthy":
            overall_status = "degraded"
        
        if components_healthy == 0:
            overall_status = "unhealthy"
        elif components_healthy < total_components:
            overall_status = "degraded"
        
        return {
            "status": overall_status,
            "timestamp": datetime.utcnow().isoformat(),
            "components": {
                "database": db_health,
                "redis": redis_health,
                "system": system_info
            },
            "summary": {
                "healthy_components": components_healthy,
                "total_components": total_components,
                "uptime_seconds": system_info["uptime_seconds"]
            }
        }
        
    except Exception as e:
        logger.error(f"Health status check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }
