from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from sqlalchemy import or_
from uk_management_bot.database.models.request import Request
from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.user import User
from uk_management_bot.keyboards.requests import (
    get_categories_keyboard,
    get_urgency_keyboard,
    get_cancel_keyboard,
    get_media_keyboard,
    get_confirmation_keyboard,
    get_address_selection_keyboard,
    get_yard_selection_keyboard,
    get_building_selection_keyboard,
    get_apartment_selection_keyboard,
    parse_selected_address,
    get_categories_inline_keyboard,
    get_categories_inline_keyboard_with_cancel,
    get_urgency_inline_keyboard,
    get_inline_confirmation_keyboard,
)
from uk_management_bot.keyboards.base import get_main_keyboard, get_contextual_keyboard, get_user_contextual_keyboard
from uk_management_bot.keyboards.requests import (
    get_status_filter_inline_keyboard,
    get_category_filter_inline_keyboard,
    get_reset_filters_inline_keyboard,
    get_period_filter_inline_keyboard,
    get_executor_filter_inline_keyboard,
)
from uk_management_bot.utils.validators import (
    validate_address, 
    validate_description, 
    validate_media_file
)
from uk_management_bot.config.settings import settings
from uk_management_bot.utils.constants import REQUEST_CATEGORIES, REQUEST_URGENCIES
from uk_management_bot.utils.constants import REQUEST_CATEGORIES
import logging
from datetime import datetime
from uk_management_bot.services.request_service import RequestService
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.notification_service import async_notify_action_denied
from uk_management_bot.utils.constants import ERROR_MESSAGES
from typing import Optional

logger = logging.getLogger(__name__)

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ —Ä–æ—É—Ç–µ—Ä
from uk_management_bot.middlewares.auth import auth_middleware, role_mode_middleware
router.message.middleware(auth_middleware)
router.message.middleware(role_mode_middleware)
router.callback_query.middleware(auth_middleware)
router.callback_query.middleware(role_mode_middleware)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ UX

async def _deny_if_pending_message(message: Message, user_status: Optional[str]) -> bool:
    """–ï–¥–∏–Ω—ã–π —Ä–∞–Ω–Ω–∏–π –æ—Ç–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending (Message).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å.
    """
    if user_status == "pending":
        try:
            from uk_management_bot.utils.helpers import get_text
            lang = getattr(message.from_user, "language_code", None) or "ru"
            await message.answer(get_text("auth.pending", language=lang))
        except Exception:
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        return True
    return False

async def _deny_if_pending_callback(callback: CallbackQuery, user_status: Optional[str]) -> bool:
    """–ï–¥–∏–Ω—ã–π —Ä–∞–Ω–Ω–∏–π –æ—Ç–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending (CallbackQuery).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å.
    """
    if user_status == "pending":
        try:
            from uk_management_bot.utils.helpers import get_text
            lang = getattr(callback.from_user, "language_code", None) or "ru"
            await callback.answer(get_text("auth.pending", language=lang), show_alert=True)
        except Exception:
            await callback.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return True
    return False

def get_contextual_help(address_type: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–º–æ—â—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
    
    Args:
        address_type: –¢–∏–ø –∞–¥—Ä–µ—Å–∞ (home/apartment/yard)
        
    Returns:
        str: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    """
    help_templates = {
        "home": "üè† –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–º. –û–±—ã—á–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω—ã —Å:\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–æ–π\n‚Ä¢ –û—Ç–æ–ø–ª–µ–Ω–∏–µ–º\n‚Ä¢ –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        "apartment": "üè¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É. –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n‚Ä¢ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–∞\n‚Ä¢ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è\n‚Ä¢ –õ–∏—Ñ—Ç\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        "yard": "üå≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–≤–æ—Ä. –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n‚Ä¢ –ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –£–±–æ—Ä–∫–∞\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
    }
    return help_templates.get(address_type, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")

async def graceful_fallback(message: Message, error_type: str):
    """
    Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
    """
    fallback_messages = {
        "auth_service_error": "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        "parsing_error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        "keyboard_error": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        "critical_error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:"
    }
    
    error_message = fallback_messages.get(error_type, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    await message.answer(error_message, reply_markup=get_cancel_keyboard())
    
    logger.warning(f"[GRACEFUL_FALLBACK] –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

async def auto_assign_request_by_category(request_number: str, db_session: Session, manager_telegram_id: int):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    Args:
        request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager_telegram_id: Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞—è–≤–∫—É
    """
    try:
        from uk_management_bot.database.models.request_assignment import RequestAssignment
        from uk_management_bot.database.models.user import User
        from uk_management_bot.database.models.request import Request
        import json
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            logger.error(f"–ó–∞—è–≤–∫–∞ {request_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = db_session.query(User).filter(User.telegram_id == manager_telegram_id).first()
        if not manager:
            logger.error(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        category_to_specialization = {
            "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞": "plumber",
            "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞": "electrician", 
            "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": "landscaping",
            "–£–±–æ—Ä–∫–∞": "cleaning",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "security",
            "–†–µ–º–æ–Ω—Ç": "repair",
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞": "installation",
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": "maintenance",
            "HVAC": "hvac"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏
        specialization = category_to_specialization.get(request.category)
        if not specialization:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏: {request.category}")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        executors = db_session.query(User).filter(
            User.active_role == "executor",
            User.status == "approved"
        ).all()
        
        matching_executors = []
        for executor in executors:
            if executor.specialization:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    if isinstance(executor.specialization, str):
                        executor_specializations = json.loads(executor.specialization)
                    else:
                        executor_specializations = executor.specialization
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    if specialization in executor_specializations:
                        matching_executors.append(executor)
                except (json.JSONDecodeError, TypeError):
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if executor.specialization == specialization:
                        matching_executors.append(executor)
        
        if not matching_executors:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {specialization}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
        existing_assignment = db_session.query(RequestAssignment).filter(
            RequestAssignment.request_number == request_number,
            RequestAssignment.status == "active"
        ).first()
        
        if existing_assignment:
            logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–π –∂–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        existing_group_assignment = db_session.query(RequestAssignment).filter(
            RequestAssignment.request_number == request_number,
            RequestAssignment.assignment_type == "group",
            RequestAssignment.group_specialization == specialization,
            RequestAssignment.status == "active"
        ).first()
        
        if existing_group_assignment:
            logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–µ {specialization}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignment = RequestAssignment(
            request_number=request_number,
            assignment_type="group",
            group_specialization=specialization,
            status="active",
            created_by=manager.id
        )
        
        db_session.add(assignment)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        request.assignment_type = "group"
        request.assigned_group = specialization
        request.assigned_at = datetime.now()
        request.assigned_by = manager.id
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–µ {specialization} ({len(matching_executors)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {request_number}: {e}")


def smart_address_validation(address_text: str) -> dict:
    """
    –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    
    Args:
        address_text: –¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    """
    suggestions = []
    is_valid = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(address_text) < 10:
        suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–ª–∏—Ü—ã
    street_indicators = ["—É–ª.", "—É–ª–∏—Ü–∞", "–ø—Ä–æ—Å–ø–µ–∫—Ç", "–ø—Ä–æ—Å–ø.", "–ø–µ—Ä–µ—É–ª–æ–∫", "–ø–µ—Ä."]
    has_street = any(indicator in address_text.lower() for indicator in street_indicators)
    if not has_street:
        suggestions.append("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É–ª–∏—Ü—ã (—É–ª., –ø—Ä–æ—Å–ø–µ–∫—Ç, –ø–µ—Ä–µ—É–ª–æ–∫)")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    house_indicators = ["–¥.", "–¥–æ–º", "‚Ññ"]
    has_house = any(indicator in address_text.lower() for indicator in house_indicators)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –µ—Å—Ç—å
    import re
    if not has_house:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —É–ª–∏—Ü–∞ + –∑–∞–ø—è—Ç–∞—è/–ø—Ä–æ–±–µ–ª + —Ü–∏—Ñ—Ä–∞
        house_pattern = r'[,\s]\d+'
        if re.search(house_pattern, address_text):
            has_house = True
    
    if not has_house:
        suggestions.append("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä (–Ω–æ–º–µ—Ä–∞)
    if not any(char.isdigit() for char in address_text):
        suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ (–¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)")
        is_valid = False
    
    return {
        'is_valid': is_valid,
        'suggestions': suggestions
    }

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# @router.message(F.text)
# async def debug_all_messages(message: Message):
#     """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

class RequestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    category = State()           # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    address_yard = State()       # –í—ã–±–æ—Ä –¥–≤–æ—Ä–∞ (—à–∞–≥ 1)
    address_building = State()   # –í—ã–±–æ—Ä –∑–¥–∞–Ω–∏—è (—à–∞–≥ 2)
    address_apartment = State()  # –í—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (—à–∞–≥ 3)
    address = State()            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π: –ø—Ä—è–º–æ–π –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞
    address_manual = State()     # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
    description = State()        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    urgency = State()           # –í—ã–±–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    media = State()             # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    confirm = State()           # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    waiting_clarify_reply = State()  # –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_request_creation(message: Message, state: FSMContext, user_status: Optional[str] = None):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if await _deny_if_pending_message(message, user_status):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from uk_management_bot.database.session import get_db
    from uk_management_bot.database.models.user import User
    from uk_management_bot.utils.helpers import get_text
    
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and not user.phone:
            lang = getattr(message.from_user, "language_code", None) or "ru"
            await message.answer(get_text("requests.phone_required", language=lang))
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
    finally:
        db.close()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'")
    await state.set_state(RequestStates.category)
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) –Ω–∞ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏‚Ä¶", reply_markup=ReplyKeyboardRemove())
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:", reply_markup=get_categories_inline_keyboard_with_cancel())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_request_creation_emoji(message: Message, state: FSMContext, user_status: Optional[str] = None):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (—Å —ç–º–æ–¥–∑–∏)"""
    if await _deny_if_pending_message(message, user_status):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from uk_management_bot.database.session import get_db
    from uk_management_bot.database.models.user import User
    from uk_management_bot.utils.helpers import get_text
    
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and not user.phone:
            lang = getattr(message.from_user, "language_code", None) or "ru"
            await message.answer(get_text("requests.phone_required", language=lang))
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
    finally:
        db.close()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'")
    await state.set_state(RequestStates.category)
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) –Ω–∞ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏‚Ä¶", reply_markup=ReplyKeyboardRemove())
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:", reply_markup=get_categories_inline_keyboard_with_cancel())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç —Ä–æ–≤–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
@router.message(RequestStates.category, F.text.in_(REQUEST_CATEGORIES))
async def process_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    category_text = message.text
    
    logger.info(f"[CATEGORY_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{category_text}'")
    
    if category_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
    await state.update_data(category=category_text)
    await state.set_state(RequestStates.address)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏, –¥–æ–º–∞–º–∏ –∏ –¥–≤–æ—Ä–∞–º–∏
    try:
        logger.info(f"[CATEGORY_SELECTION] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        keyboard = get_address_selection_keyboard(user_id)
        logger.info(f"[CATEGORY_SELECTION] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        await message.answer(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:\n"
            "‚Ä¢ üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ - –¥–ª—è –ø—Ä–æ–±–ª–µ–º –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ\n"
            "‚Ä¢ üè¢ –î–æ–º - –¥–ª—è –æ–±—â–µ–¥–æ–º–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º\n"
            "‚Ä¢ üèòÔ∏è –î–≤–æ—Ä - –¥–ª—è –ø—Ä–æ–±–ª–µ–º –≤–æ –¥–≤–æ—Ä–µ",
            reply_markup=keyboard
        )
        logger.info(f"[CATEGORY_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_text}', –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞")
    except Exception as e:
        logger.error(f"[CATEGORY_SELECTION] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞: {e}")
        await graceful_fallback(message, "keyboard_error")

# –ò–≥–Ω–æ—Ä/–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(RequestStates.category)
async def process_category_other_inputs(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º: –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
@router.message(RequestStates.address)
async def process_address(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞

    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    """
    user_id = message.from_user.id
    selected_text = message.text

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{selected_text}'")
    logger.info(f"[ADDRESS_SELECTION] –í—Ä–µ–º—è: {datetime.now()}")
    logger.info(f"[ADDRESS_SELECTION] –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")

    try:
        from uk_management_bot.services.address_service import AddressService

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞

        # 1. –ö–í–ê–†–¢–ò–†–ê (üè†) - –¥–ª—è –ø—Ä–æ–±–ª–µ–º –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        if selected_text.startswith("üè† "):
            address_text = selected_text[2:].strip()
            db = next(get_db())
            try:
                apartments = await AddressService.get_user_approved_apartments(db, user_id)

                selected_apartment = None
                for apartment in apartments:
                    formatted_address = AddressService.format_apartment_address(apartment)
                    if formatted_address == address_text or formatted_address.startswith(address_text.replace("...", "")):
                        selected_apartment = apartment
                        break

                if selected_apartment:
                    full_address = AddressService.format_apartment_address(selected_apartment)
                    await state.update_data(
                        address=full_address,
                        apartment_id=selected_apartment.id,
                        building_id=selected_apartment.building_id if selected_apartment.building else None,
                        yard_id=selected_apartment.building.yard_id if selected_apartment.building and selected_apartment.building.yard else None,
                        address_type='apartment'
                    )
                    await state.set_state(RequestStates.description)

                    await message.answer(
                        f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: üè† {full_address}\n\n"
                        f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ:",
                        reply_markup=get_cancel_keyboard()
                    )

                    logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–≤–∞—Ä—Ç–∏—Ä—É: {full_address}")
                    return
                else:
                    logger.warning(f"[ADDRESS_SELECTION] –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{address_text}'")
                    await message.answer(
                        "‚ö†Ô∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=get_address_selection_keyboard(user_id)
                    )
                    return
            finally:
                db.close()

        # 2. –î–û–ú/–ó–î–ê–ù–ò–ï (üè¢) - –¥–ª—è –æ–±—â–µ–¥–æ–º–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
        elif selected_text.startswith("üè¢ "):
            address_text = selected_text[2:].strip()
            db = next(get_db())
            try:
                from uk_management_bot.database.models import Building

                # –ù–∞—Ö–æ–¥–∏–º –∑–¥–∞–Ω–∏–µ –ø–æ –∞–¥—Ä–µ—Å—É
                building = db.query(Building).filter(Building.address == address_text).first()

                if building:
                    await state.update_data(
                        address=f"–î–æ–º: {building.address}",
                        apartment_id=None,
                        building_id=building.id,
                        yard_id=building.yard_id if building.yard else None,
                        address_type='building'
                    )
                    await state.set_state(RequestStates.description)

                    await message.answer(
                        f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: üè¢ {building.address}\n\n"
                        f"–û–ø–∏—à–∏—Ç–µ –æ–±—â–µ–¥–æ–º–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É:",
                        reply_markup=get_cancel_keyboard()
                    )

                    logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–º: {building.address}")
                    return
                else:
                    logger.warning(f"[ADDRESS_SELECTION] –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: '{address_text}'")
                    await message.answer(
                        "‚ö†Ô∏è –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=get_address_selection_keyboard(user_id)
                    )
                    return
            finally:
                db.close()

        # 3. –î–í–û–† (üèòÔ∏è) - –¥–ª—è –ø—Ä–æ–±–ª–µ–º –≤–æ –¥–≤–æ—Ä–µ
        elif selected_text.startswith("üèòÔ∏è "):
            address_text = selected_text[2:].strip()
            db = next(get_db())
            try:
                from uk_management_bot.database.models import Yard

                # –ù–∞—Ö–æ–¥–∏–º –¥–≤–æ—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                yard = db.query(Yard).filter(Yard.name == address_text).first()

                if yard:
                    await state.update_data(
                        address=f"–î–≤–æ—Ä: {yard.name}",
                        apartment_id=None,
                        building_id=None,
                        yard_id=yard.id,
                        address_type='yard'
                    )
                    await state.set_state(RequestStates.description)

                    await message.answer(
                        f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: üèòÔ∏è {yard.name}\n\n"
                        f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤–æ –¥–≤–æ—Ä–µ:",
                        reply_markup=get_cancel_keyboard()
                    )

                    logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–≤–æ—Ä: {yard.name}")
                    return
                else:
                    logger.warning(f"[ADDRESS_SELECTION] –î–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: '{address_text}'")
                    await message.answer(
                        "‚ö†Ô∏è –î–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=get_address_selection_keyboard(user_id)
                    )
                    return
            finally:
                db.close()

        # –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ legacy –∞–¥—Ä–µ—Å–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
        # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await parse_selected_address(selected_text)
        logger.info(f"[ADDRESS_SELECTION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")

        if result['type'] == 'predefined':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å; –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –∞–¥—Ä–µ—Å–µ
            # NOTE: Legacy path - –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ apartment_id
            await state.update_data(address=result['address'], apartment_id=None)
            await state.set_state(RequestStates.description)

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
            context_message = get_contextual_help(result['address_type'])
            await message.answer(context_message, reply_markup=get_cancel_keyboard())

            logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: {result['address']}, —Ç–∏–ø: {result['address_type']}")

        elif result['type'] == 'cancel':
            # –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            await cancel_request(message, state)
            return

        elif result['type'] == 'unknown':
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logger.warning(f"[ADDRESS_SELECTION] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞: '{selected_text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
            try:
                keyboard = get_address_selection_keyboard(user_id)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=keyboard)
            except Exception as keyboard_error:
                logger.error(f"[ADDRESS_SELECTION] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_error}")
                await graceful_fallback(message, "keyboard_error")

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            logger.error(f"[ADDRESS_SELECTION] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result['type']}")
            await graceful_fallback(message, "parsing_error")

    except Exception as e:
        logger.error(f"[ADDRESS_SELECTION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞: {e}")
        await graceful_fallback(message, "critical_error")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ (–Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@router.message(RequestStates.address_manual)
async def process_address_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Å —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    address_text = message.text
    
    logger.info(f"[ADDRESS_MANUAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{address_text}'")
    
    if address_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    validation_result = smart_address_validation(address_text)
    if not validation_result['is_valid']:
        suggestions_text = "\n".join([f"‚Ä¢ {suggestion}" for suggestion in validation_result['suggestions']])
        await message.answer(
            f"‚ö†Ô∏è –ê–¥—Ä–µ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏:\n{suggestions_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å (–±–µ–∑ apartment_id –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
    await state.update_data(address=address_text, apartment_id=None)

    # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤–≤–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ –∞–¥—Ä–µ—Å–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
    await state.set_state(RequestStates.description)
    await message.answer(
        "‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=get_cancel_keyboard()
    )
    logger.info(f"[ADDRESS_MANUAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é: {address_text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(RequestStates.description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    from uk_management_bot.utils.validators import Validator
    is_valid, error_message = Validator.validate_description(message.text)
    if not is_valid:
        await message.answer(error_message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    await state.update_data(description=message.text)
    await state.set_state(RequestStates.urgency)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:",
        reply_markup=get_urgency_inline_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
@router.message(RequestStates.urgency)
async def process_urgency(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–∫–≤–∞—Ä—Ç–∏—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    valid_urgency_levels = REQUEST_URGENCIES
    
    if message.text not in valid_urgency_levels:
        # –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞.
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_urgency_inline_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–¥–∏–∞
    await state.update_data(urgency=message.text)
    await state.set_state(RequestStates.media)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤):\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
        reply_markup=get_media_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {message.text}")

## –®–∞–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞.

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@router.message(RequestStates.media, F.photo | F.video)
async def process_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    media_files = data.get('media_files', [])
    
    if len(media_files) >= 5:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º file_id
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    else:
        file_id = message.video.file_id
        file_type = "video"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if not validate_media_file(0, file_type):  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ Telegram
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
        return
    
    media_files.append(file_id)
    await state.update_data(media_files=media_files)
    
    await message.answer(
        f"–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(media_files)}/5). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
        reply_markup=get_media_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ media (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–æ—Ç–º–µ–Ω–∞)
@router.message(RequestStates.media)
async def process_media_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ media"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    if message.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await state.set_state(RequestStates.confirm)
        await show_confirmation(message, state)
        return
    
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
        reply_markup=get_media_keyboard()
    )

# –ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏
async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    summary = (
        "üìã –°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:\n\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n"
        f"üì∏ –§–∞–π–ª–æ–≤: {len(data.get('media_files', []))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    
    await message.answer(
        summary,
        reply_markup=get_inline_confirmation_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.message(RequestStates.confirm)
async def process_confirmation(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(RequestStates.media)
        await message.answer(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
            reply_markup=get_media_keyboard()
        )
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await save_request(data, message.from_user.id, db, message.bot)
        
        if success:
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_contextual_keyboard(roles, active_role) if roles and active_role else get_user_contextual_keyboard(message.from_user.id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É")
        else:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫—Ä—ã—Ç—å –ú–æ–∏ –∑–∞—è–≤–∫–∏)
            await state.clear()
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_user_contextual_keyboard(message.from_user.id)
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        return
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirmation_keyboard()
    )

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async def cancel_request(message: Message, state: FSMContext, roles: list = None, active_role: str = None):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_user_contextual_keyboard(message.from_user.id)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_request(data: dict, user_id: int, db: Session, bot: Bot = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        request_number = Request.generate_request_number(db)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –≤ Media Service (–µ—Å–ª–∏ –µ—Å—Ç—å)
        media_file_ids = data.get('media_files', [])
        if media_file_ids and bot:
            from uk_management_bot.utils.media_helpers import upload_multiple_telegram_files
            try:
                uploaded_files = await upload_multiple_telegram_files(
                    bot=bot,
                    file_ids=media_file_ids,
                    request_number=request_number,
                    uploaded_by=user.id
                )
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤ Media Service –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Media Service: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å

        request = Request(
            request_number=request_number,
            category=data['category'],
            address=data['address'],
            description=data['description'],
            urgency=data['urgency'],
            apartment=data.get('apartment'),  # Legacy field
            apartment_id=data.get('apartment_id'),  # NEW: Link to address directory
            # –í –º–æ–¥–µ–ª–∏ media_files –æ–∂–∏–¥–∞–µ—Ç—Å—è JSON (—Å–ø–∏—Å–æ–∫), –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
            # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º file_ids –∫–∞–∫ backup, –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - Media Service
            media_files=list(media_file_ids),
            user_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            status='–ù–æ–≤–∞—è'
        )

        db.add(request)
        db.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False

# =====================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK_QUERY –î–õ–Ø INLINE –ö–õ–ê–í–ò–ê–¢–£–†
# =====================================

@router.callback_query(F.data.startswith("category_"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        category = callback.data.replace("category_", "")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        valid_categories = REQUEST_CATEGORIES
        
        if category not in valid_categories:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await state.update_data(category=category)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(RequestStates.address)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ ReplyKeyboardMarkup)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
        keyboard = get_address_selection_keyboard(callback.from_user.id)
        await callback.message.answer(
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_create")
async def handle_cancel_create(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (inline)."""
    try:
        await state.clear()
        await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_user_contextual_keyboard(callback.from_user.id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("urgency_"))
async def handle_urgency_selection(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        urgency = callback.data.replace("urgency_", "")
        valid_urgency = REQUEST_URGENCIES
        
        if urgency not in valid_urgency:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏", show_alert=True)
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å '{urgency}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            return
        
        await state.update_data(urgency=urgency)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ ReplyKeyboardMarkup)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}"
        )

        # –®–∞–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏—Å–∫–ª—é—á—ë–Ω: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–¥–∏–∞
        await state.set_state(RequestStates.media)
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤):\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
            reply_markup=get_media_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_"))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        action = callback.data.replace("confirm_", "")
        
        if action == "yes":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
            data = await state.get_data()

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_session = next(get_db())
            success = await save_request(data, callback.from_user.id, db_session, callback.bot)
            
            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ReplyKeyboardMarkup
                await callback.message.edit_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"–ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {data.get('urgency', '–û–±—ã—á–Ω–∞—è')}"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer(
                    "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=get_user_contextual_keyboard(callback.from_user.id)
                )
                await state.clear()
                logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            else:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                await state.clear()
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=get_user_contextual_keyboard(callback.from_user.id)
                )
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", show_alert=True)
                
        elif action == "no":
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            )
            await callback.message.answer(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_user_contextual_keyboard(callback.from_user.id)
            )
            await state.clear()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞—è–≤–æ–∫"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        current_page = int(callback.data.replace("page_", ""))

        # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–∑ FSM
        data = await state.get_data()
        active_status = data.get("my_requests_status")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        db_session = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        
        query = db_session.query(Request).filter(Request.user_id == user.id)
        if active_status == "active":
            query = query.filter(~Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        elif active_status == "archive":
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        user_requests = query.order_by(Request.created_at.desc()).all()

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_requests = len(user_requests)
        requests_per_page = 5
        total_pages = max(1, (total_requests + requests_per_page - 1) // requests_per_page)
        
        if current_page < 1 or current_page > total_pages:
            await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * requests_per_page
        end_idx = start_idx + requests_per_page
        page_requests = user_requests[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
        message_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        def _icon(st: str) -> str:
            mapping = {
                "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                "–ó–∞–∫—É–ø": "üí∞",
                "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                "–ü—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
                "–ù–æ–≤–∞—è": "üÜï",
            }
            return mapping.get(st, "")
        for i, request in enumerate(page_requests, 1):
            message_text += f"{i}. {_icon(request.status)} #{request.request_number} - {request.category} - {request.status}\n"
            message_text += f"   –ê–¥—Ä–µ—Å: {request.address}\n"
            message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y')}\n"
            if request.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and request.notes:
                message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {request.notes}\n"
            elif request.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" and request.notes:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
                notes_lines = request.notes.strip().split('\n')
                last_messages = [line for line in notes_lines[-3:] if line.strip()]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                if last_messages:
                    preview = '\n'.join(last_messages)
                    if len(preview) > 100:
                        preview = preview[:97] + '...'
                    message_text += f"   –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {preview}\n"
            message_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —Ñ–∏–ª—å—Ç—Ä + –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ –∫–∞–∂–¥–æ–π) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        from uk_management_bot.keyboards.requests import get_pagination_keyboard
        from uk_management_bot.keyboards.requests import get_status_filter_inline_keyboard
        filter_kb = get_status_filter_inline_keyboard(active_status if active_status != "all" else None)
        rows = list(filter_kb.inline_keyboard)
        for i, r in enumerate(page_requests, 1):
            if r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                rows.append([InlineKeyboardButton(text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ #{r.request_number}", callback_data=f"replyclarify_{r.request_number}")])
        pagination_kb = get_pagination_keyboard(current_page, total_pages, request_number=None, show_reply_clarify=False)
        rows += pagination_kb.inline_keyboard
        combined = InlineKeyboardMarkup(inline_keyboard=rows)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ FSM
        await state.update_data(my_requests_page=current_page)

        try:
            await callback.message.edit_text(message_text, reply_markup=combined)
        except TelegramBadRequest:
            pass
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("view_") and not c.data.startswith("view_comments") and not c.data.startswith("view_report") and not c.data.startswith("view_assignments") and not c.data.startswith("view_schedule") and not c.data.startswith("view_week") and not c.data.startswith("view_completed") and not c.data.startswith("view_completion_media") and not c.data.startswith("view_user"))
async def handle_view_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ callback_data (view_ –∏–ª–∏ view_request_)
        request_number = callback.data.replace("view_request_", "").replace("view_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        from uk_management_bot.database.models.user import User
        from uk_management_bot.database.models.request_assignment import RequestAssignment
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles = []
        if user.roles:
            try:
                import json
                user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            except (json.JSONDecodeError, TypeError):
                user_roles = []

        active_role = user.active_role or (user_roles[0] if user_roles else "applicant")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        has_access = False

        if active_role == "executor":
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            assignment = db_session.query(RequestAssignment).filter(
                RequestAssignment.request_number == request.request_number,
                RequestAssignment.status == "active"
            ).first()

            if assignment:
                # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                if assignment.executor_id == user.id:
                    has_access = True
                # –ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
                elif assignment.assignment_type == "group":
                    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    executor_specializations = []
                    if user.specialization:
                        try:
                            if isinstance(user.specialization, str) and user.specialization.startswith('['):
                                executor_specializations = json.loads(user.specialization)
                            else:
                                executor_specializations = [user.specialization]
                        except (json.JSONDecodeError, TypeError):
                            executor_specializations = [user.specialization] if user.specialization else []

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    if assignment.group_specialization in executor_specializations:
                        has_access = True
        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π
            if request.user_id == user.id:
                has_access = True

        if not has_access:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        message_text = f"üìã –ó–∞—è–≤–∫–∞ #{request.request_number}\n\n"
        message_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        message_text += f"–°—Ç–∞—Ç—É—Å: {request.status}\n"
        message_text += f"–ê–¥—Ä–µ—Å: {request.address}\n"
        message_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n"
        message_text += f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency}\n"
        if request.apartment:
            message_text += f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {request.apartment}\n"
        message_text += f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if request.updated_at:
            message_text += f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {request.updated_at.strftime('%d.%m.%Y %H:%M')}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π
        if active_role != "executor" and request.executor_id:
            executor = db_session.query(User).filter(User.id == request.executor_id).first()
            if executor:
                executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
                message_text += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
        has_media = bool(request.media_files)
        media_count = 0
        if has_media:
            try:
                import json
                media_files = json.loads(request.media_files) if isinstance(request.media_files, str) else request.media_files
                media_count = len(media_files) if media_files else 0
                if media_count > 0:
                    message_text += f"\nüìé –ú–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤: {media_count}\n"
                else:
                    has_media = False
            except (json.JSONDecodeError, TypeError):
                has_media = False

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        rows = []

        if active_role == "executor":
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞—è–≤–∫–æ–π
            if request.status == "–í —Ä–∞–±–æ—Ç–µ":
                rows.append([InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"executor_complete_{request.request_number}")])
                rows.append([InlineKeyboardButton(text="üí∞ –ù—É–∂–µ–Ω –∑–∞–∫—É–ø", callback_data=f"executor_purchase_{request.request_number}")])
            elif request.status == "–ó–∞–∫—É–ø":
                rows.append([InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"executor_work_{request.request_number}")])
            elif request.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                rows.append([InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"executor_work_{request.request_number}")])
            elif request.status in ["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü—Ä–∏–Ω—è—Ç–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"]:
                # –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                pass

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if has_media:
                rows.append([InlineKeyboardButton(text="üìé –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞", callback_data=f"executor_view_media_{request.request_number}")])
        elif active_role in ["admin", "manager"]:
            # –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤: –ø–æ–ª–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            from uk_management_bot.keyboards.requests import get_request_actions_keyboard
            actions_kb = get_request_actions_keyboard(request.request_number)
            rows = list(actions_kb.inline_keyboard)
        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è)
            if request.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ - –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞
                rows.append([InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyclarify_{request.request_number}")])
            elif request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                rows.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"approve_{request.request_number}")])

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if has_media:
                rows.append([InlineKeyboardButton(text="üìé –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞", callback_data=f"view_request_media_{request.request_number}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
        data = await state.get_data()
        current_page = int(data.get("my_requests_page", 1))
        rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_list_{current_page}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ {request.request_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("back_list_"))
async def handle_back_to_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
        page = int(callback.data.replace("back_list_", ""))
        await state.update_data(my_requests_page=page)

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        await callback.message.delete()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = callback.from_user.id
        data = await state.get_data()
        active_status = data.get("my_requests_status", "active")
        current_page = int(data.get("my_requests_page", 1))

        db_session = next(get_db())
        user = db_session.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await callback.answer()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles = []
        if user.roles:
            try:
                import json
                user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                user_roles = []

        active_role = user.active_role or (user_roles[0] if user_roles else "applicant")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if active_role == "executor":
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º –∏–ª–∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ)
            from uk_management_bot.database.models.request_assignment import RequestAssignment
            from uk_management_bot.database.models.shift import Shift
            from datetime import datetime

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            executor_specializations = []
            if user.specialization:
                try:
                    import json
                    if isinstance(user.specialization, str) and user.specialization.startswith('['):
                        executor_specializations = json.loads(user.specialization)
                    else:
                        executor_specializations = [user.specialization]
                except (json.JSONDecodeError, TypeError) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                    executor_specializations = [user.specialization] if user.specialization else []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
            now = datetime.now()
            active_shift = db_session.query(Shift).filter(
                Shift.user_id == user.id,
                Shift.status == "active",
                Shift.start_time <= now,
                or_(Shift.end_time.is_(None), Shift.end_time >= now)
            ).first()

            has_active_shift = active_shift is not None

            # –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            query = db_session.query(Request).join(RequestAssignment).filter(
                RequestAssignment.status == "active"
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º
            assignment_conditions = []

            # 1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
            assignment_conditions.append(RequestAssignment.executor_id == user.id)

            # 2. –ì—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ)
            if has_active_shift and executor_specializations:
                for spec in executor_specializations:
                    assignment_conditions.append(
                        (RequestAssignment.assignment_type == "group") &
                        (RequestAssignment.group_specialization == spec)
                    )

            if assignment_conditions:
                query = query.filter(or_(*assignment_conditions))
            else:
                query = query.filter(RequestAssignment.executor_id == user.id)

        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            query = db_session.query(Request).filter(Request.user_id == user.id)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if active_role != "executor":
            if active_status == "active":
                query = query.filter(Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]))
            elif active_status == "archive":
                query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü—Ä–∏–Ω—è—Ç–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
            elif active_status == "all":
                # –í—Å–µ –∑–∞—è–≤–∫–∏: –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                pass

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        if active_role != "executor" and active_status == "all":
            from sqlalchemy import case
            # –î–ª—è "all" —Å–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ, –≤–Ω—É—Ç—Ä–∏ –ø–æ –¥–∞—Ç–µ
            status_priority = case(
                (Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]), 0),  # –ê–∫—Ç–∏–≤–Ω—ã–µ
                else_=1  # –ê—Ä—Ö–∏–≤–Ω—ã–µ
            )
            query = query.order_by(status_priority, Request.created_at.desc())
        else:
            query = query.order_by(Request.created_at.desc())

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        total_requests = query.count()

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        ITEMS_PER_PAGE = 5
        total_pages = (total_requests + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        offset = (current_page - 1) * ITEMS_PER_PAGE

        requests = query.offset(offset).limit(ITEMS_PER_PAGE).all()

        if not requests:
            if active_role == "executor":
                message_text = "üìã <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
            else:
                if active_status == "active":
                    message_text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
                elif active_status == "archive":
                    message_text = "üìã <b>–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ."
                else:
                    message_text = "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."

            await callback.message.answer(message_text, parse_mode="HTML")
            await callback.answer()
            return

        # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        def _icon(st: str) -> str:
            mapping = {
                "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                "–ó–∞–∫—É–ø": "üí∞",
                "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                "–ü—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
                "–ù–æ–≤–∞—è": "üÜï",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
            }
            return mapping.get(st, "üìã")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if active_role == "executor":
            message_text = f"üìã <b>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b> (—Å—Ç—Ä. {current_page}/{total_pages})\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
        else:
            if active_status == "active":
                status_name = "–ê–∫—Ç–∏–≤–Ω—ã–µ"
            elif active_status == "archive":
                status_name = "–ê—Ä—Ö–∏–≤"
            else:
                status_name = "–í—Å–µ"
            message_text = f"üìã <b>{status_name} –∑–∞—è–≤–∫–∏</b> (—Å—Ç—Ä. {current_page}/{total_pages})\n\n"

        # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –∫–Ω–æ–ø–∫–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()

        if active_role != "executor":
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π
            for i, req in enumerate(requests, 1):
                address = req.address
                if len(address) > 60:
                    address = address[:60] + "‚Ä¶"
                message_text += f"{i}. {_icon(req.status)} #{req.request_number} - {req.category} - {req.status}\n"
                message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%d.%m.%Y')}\n"
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if req.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and req.notes:
                    message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {req.notes[:100]}...\n" if len(req.notes) > 100 else f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {req.notes}\n"
                elif req.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" and req.notes:
                    notes_lines = req.notes.strip().split('\n')
                    last_messages = [line for line in notes_lines[-2:] if line.strip()]
                    if last_messages:
                        preview = '\n'.join(last_messages)
                        if len(preview) > 80:
                            preview = preview[:77] + '...'
                        message_text += f"   –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {preview}\n"
                message_text += "\n"
        else:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            for req in requests:
                button_text = f"{_icon(req.status)} #{req.request_number} - {req.category}"
                builder.button(text=button_text, callback_data=f"view_request_{req.request_number}")

            builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if current_page > 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"requests_page_{current_page - 1}"))
        if current_page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"requests_page_{current_page + 1}"))

        if pagination_buttons:
            builder.row(*pagination_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if active_role != "executor":
            filter_buttons = [
                InlineKeyboardButton(text="üìã –í—Å–µ" if active_status == "all" else "‚ö™Ô∏è –í—Å–µ", callback_data="requests_filter_all"),
                InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ" if active_status == "active" else "‚ö™Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="requests_filter_active"),
                InlineKeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤" if active_status == "archive" else "‚ö™Ô∏è –ê—Ä—Ö–∏–≤", callback_data="requests_filter_archive")
            ]
            builder.row(*filter_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞—è–≤–∏—Ç–µ–ª—è
            for req in requests:
                if req.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                    builder.row(InlineKeyboardButton(
                        text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ #{req.request_number}",
                        callback_data=f"replyclarify_{req.request_number}"
                    ))
                elif req.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                    builder.row(InlineKeyboardButton(
                        text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{req.request_number}",
                        callback_data=f"approve_{req.request_number}"
                    ))

        await callback.message.answer(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("edit_") & ~F.data.startswith("edit_employee_") & ~F.data.startswith("edit_profile") & ~F.data.startswith("edit_first_name") & ~F.data.startswith("edit_last_name"))
async def handle_edit_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        request_number = callback.data.replace("edit_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user or request.user_id != user.id:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(editing_request_number=request_number)
        await state.set_state(RequestStates.category)
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_number}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_categories_keyboard()
        )
        
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ {request_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(
    F.data.startswith("delete_") &
    ~F.data.startswith("delete_employee_")
)
async def handle_delete_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        request_number = callback.data.replace("delete_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user or request.user_id != user.id:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
        db_session.delete(request)
        db_session.commit()
        
        await callback.message.edit_text(
            "üóëÔ∏è –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("accept_") and not c.data.startswith("accept_request_"))
async def handle_accept_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return

        request_number = callback.data.replace("accept_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–í —Ä–∞–±–æ—Ç–µ",
            actor_telegram_id=callback.from_user.id,
        )

        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        from uk_management_bot.keyboards.admin import get_assignment_type_keyboard

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
            reply_markup=get_assignment_type_keyboard(request_number),
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}, –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("complete_"))
async def handle_complete_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_executor(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", show_alert=True)
            return
        # –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –∏–∑ middleware (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä)
        try:
            shift_ctx = state and (await state.get_data()).get("__shift_ctx__")  # —Ä–µ–∑–µ—Ä–≤, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≤ FSM
        except Exception:
            shift_ctx = None
        # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –±–µ—Ä–µ–º –∏–∑ data –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ aiogram (–µ—Å–ª–∏ middleware —É—Å—Ç–∞–Ω–æ–≤–∏–ª)
        # Aiogram 3 –ø–µ—Ä–µ–¥–∞–µ—Ç data –≤ handler, –Ω–æ –≤ –Ω–∞—à–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –µ–≥–æ –Ω–µ—Ç. –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∂–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞—Ä—å–µ—Ä.
        # –î–ª—è —Ä–∞–Ω–Ω–µ–π UX-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–º–µ–Ω—É –±—ã—Å—Ç—Ä–∏–º —Å–ø–æ—Å–æ–±–æ–º:
        from uk_management_bot.services.shift_service import ShiftService
        quick_service = ShiftService(db_session)
        if not quick_service.is_user_in_active_shift(callback.from_user.id):
            await callback.answer(ERROR_MESSAGES.get("not_in_shift", "–í—ã –Ω–µ –≤ —Å–º–µ–Ω–µ"), show_alert=True)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (best-effort)
            try:
                from aiogram import Bot
                bot: Bot = callback.message.bot
                await async_notify_action_denied(bot, db_session, callback.from_user.id, "not_in_shift")
            except Exception:
                pass
            return
        request_number = callback.data.replace("complete_", "")
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )

        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return

        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("clarify_"))
async def handle_clarify_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å '–£—Ç–æ—á–Ω–µ–Ω–∏–µ'"""
    try:
        # –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        request_number = callback.data.replace("clarify_", "")
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–£—Ç–æ—á–Ω–µ–Ω–∏–µ",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚ùì –ó–∞—è–≤–∫–∞ #{request_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–£—Ç–æ—á–Ω–µ–Ω–∏–µ'",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ '–£—Ç–æ—á–Ω–µ–Ω–∏–µ': {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("purchase_") and not c.data.startswith("purchase_materials_"))
async def handle_purchase_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'"""
    try:
        # –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        request_number = callback.data.replace("purchase_", "")
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–ó–∞–∫—É–ø",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"üí∞ –ó–∞—è–≤–∫–∞ #{request_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ '–ó–∞–∫—É–ø': {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(
    F.data.startswith("cancel_") &
    ~F.data.startswith("cancel_document_selection_") &
    ~F.data.in_(["cancel_action", "cancel_apartment_selection"])
)
async def handle_cancel_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏"""
    try:
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü (–≤ RequestService —Ç–∞–∫–∂–µ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞)
        request_number = callback.data.replace("cancel_", "")
        db_session = next(get_db())
        auth = AuthService(db_session)
        is_manager = await auth.is_user_manager(callback.from_user.id)
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–û—Ç–º–µ–Ω–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{request_number} –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("deny_"))
async def handle_executor_propose_deny(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫–∞–∑ (—ç—Å–∫–∞–ª–∏—Ä—É–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É). –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ notes –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        request_number = callback.data.replace("deny_", "")
        db_session = next(get_db())
        auth = AuthService(db_session)
        # –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if not await auth.is_user_executor(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", show_alert=True)
            return
        service = RequestService(db_session)
        req = service.get_request_by_number(request_number)
        if not req:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        existing = (req.notes or "").strip()
        new_notes = (existing + "\n" if existing else "") + "[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        req.notes = new_notes
        db_session.commit()
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("approve_") & ~F.data.startswith("approve_employee_") & ~F.data.startswith("approve_user_"))
async def handle_approve_request(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º -> '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'"""
    try:
        request_number = callback.data.replace("approve_", "")
        db_session = next(get_db())
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_number=request_number,
            new_status="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ============================
# –ú–æ–∏ –∑–∞—è–≤–∫–∏ (—Å–ø–∏—Å–æ–∫ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# ============================

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_requests(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)"""
    try:
        telegram_id = message.from_user.id
        # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ FSM
        data = await state.get_data()
        active_status = data.get("my_requests_status", "all")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        current_page = int(data.get("my_requests_page", 1))

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ FSM
        if not data.get("my_requests_status"):
            await state.update_data(my_requests_status="all")
        db_session = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles = []
        if user.roles:
            try:
                import json
                user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                user_roles = []
        
        active_role = user.active_role or (user_roles[0] if user_roles else "applicant")

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"show_my_requests: telegram_id={telegram_id}, active_role={active_role}, active_status={active_status}, user_id={user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if active_role == "executor":
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º –∏–ª–∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ)
            from uk_management_bot.database.models.request_assignment import RequestAssignment
            from uk_management_bot.database.models.shift import Shift
            from datetime import datetime

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            executor_specializations = []
            if user.specialization:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –º–∞—Å—Å–∏–≤–æ–º
                    if isinstance(user.specialization, str) and user.specialization.startswith('['):
                        executor_specializations = json.loads(user.specialization)
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                        executor_specializations = [user.specialization]
                except (json.JSONDecodeError, TypeError) as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                    executor_specializations = [user.specialization] if user.specialization else []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ
            now = datetime.now()
            active_shift = db_session.query(Shift).filter(
                Shift.user_id == user.id,
                Shift.status == "active",
                Shift.start_time <= now,
                or_(Shift.end_time.is_(None), Shift.end_time >= now)
            ).first()

            has_active_shift = active_shift is not None
            logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {user.id}: –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞ = {has_active_shift}")

            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            query = db_session.query(Request).join(RequestAssignment).filter(
                RequestAssignment.status == "active"
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º
            assignment_conditions = []

            # 1. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
            assignment_conditions.append(RequestAssignment.executor_id == user.id)

            # 2. –ì—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω–µ)
            if has_active_shift and executor_specializations:
                for spec in executor_specializations:
                    assignment_conditions.append(
                        (RequestAssignment.assignment_type == "group") &
                        (RequestAssignment.group_specialization == spec)
                    )
                logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ —Å–º–µ–Ω–µ: –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π {executor_specializations}")
            else:
                if not has_active_shift:
                    logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ù–ï –≤ —Å–º–µ–Ω–µ: –≥—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
            if assignment_conditions:
                query = query.filter(or_(*assignment_conditions))
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                query = query.filter(RequestAssignment.executor_id == user.id)

            logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {user.id}: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏={executor_specializations}, —É—Å–ª–æ–≤–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è={len(assignment_conditions)}")

        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            query = db_session.query(Request).filter(Request.user_id == user.id)
            logger.info(f"–ó–∞—è–≤–∏—Ç–µ–ª—å/–¥—Ä—É–≥–∞—è —Ä–æ–ª—å {user.id}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ —Å user_id={user.id}")
        
        # –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞: –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–ª—è –í–°–ï–• —Ä–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
        if active_status == "active":
            # –ê–∫—Ç–∏–≤–Ω—ã–µ: —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞—Ç—É—Å—ã (–æ–∂–∏–¥–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏–π)
            query = query.filter(Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]))
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä active_status='active': —Å—Ç–∞—Ç—É—Å—ã=['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–∫—É–ø', '–£—Ç–æ—á–Ω–µ–Ω–∏–µ']")
        elif active_status == "archive":
            # –ê—Ä—Ö–∏–≤: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü—Ä–∏–Ω—è—Ç–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä active_status='archive': —Å—Ç–∞—Ç—É—Å—ã=['–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–ü—Ä–∏–Ω—è—Ç–æ', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', '–û—Ç–º–µ–Ω–µ–Ω–∞']")
        elif active_status == "all":
            # –í—Å–µ –∑–∞—è–≤–∫–∏: –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä active_status='all': –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞")
        else:
            logger.warning(f"–§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω! active_status={active_status}")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "all" —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ, –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ
        if active_role != "executor" and active_status == "all":
            from sqlalchemy import case
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤: –∞–∫—Ç–∏–≤–Ω—ã–µ (0) –∏–¥—É—Ç –ø–µ—Ä–µ–¥ –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ (1)
            status_priority = case(
                (Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]), 0),  # –ê–∫—Ç–∏–≤–Ω—ã–µ
                else_=1  # –ê—Ä—Ö–∏–≤–Ω—ã–µ
            )
            user_requests = query.order_by(status_priority, Request.created_at.desc()).all()
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - –ø—Ä–æ—Å—Ç–æ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            user_requests = query.order_by(Request.created_at.desc()).all()

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (—Ä–æ–ª—å: {active_role}, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {executor_specializations if active_role == 'executor' else 'N/A'}) - –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(user_requests)}")
        if user_requests:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏: {[(r.request_number, r.status, r.category) for r in user_requests[:3]]}")
        if active_role == "executor" and len(user_requests) == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–æ–≤
            test_query = db_session.query(Request).join(RequestAssignment).filter(
                RequestAssignment.status == "active",
                RequestAssignment.assignment_type == "group",
                RequestAssignment.group_specialization == "plumber",
                Request.status.in_(["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"])
            ).all()
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–æ–≤ –≤–µ—Ä–Ω—É–ª {len(test_query)} –∑–∞—è–≤–æ–∫")

        total_requests = len(user_requests)
        requests_per_page = 5
        total_pages = max(1, (total_requests + requests_per_page - 1) // requests_per_page)
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤—ã—à–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
        if current_page > total_pages:
            current_page = total_pages

        start_idx = (current_page - 1) * requests_per_page
        end_idx = start_idx + requests_per_page
        page_requests = user_requests[start_idx:end_idx]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if active_role == "executor":
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            message_text = f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π - —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
            if active_status == "active":
                status_title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
            elif active_status == "archive":
                status_title = "–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫"
            else:
                status_title = "–í—Å–µ –∑–∞—è–≤–∫–∏"
            message_text = f"üìã {status_title} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"

        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        def _icon(st: str) -> str:
            mapping = {
                "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                "–ó–∞–∫—É–ø": "üí∞",
                "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                "–ù–æ–≤–∞—è": "üÜï",
                "–ü—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
            }
            return mapping.get(st, "")

        if not page_requests:
            if active_role == "executor":
                message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞—è–≤–æ–∫."
            else:
                message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            if active_role != "executor":
                for i, r in enumerate(page_requests, 1):
                    address = r.address
                    if len(address) > 60:
                        address = address[:60] + "‚Ä¶"
                    message_text += f"{i}. {_icon(r.status)} #{r.request_number} - {r.category} - {r.status}\n"
                    message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
                    message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {r.created_at.strftime('%d.%m.%Y')}\n"
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    if r.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and r.notes:
                        message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {r.notes[:100]}...\n" if len(r.notes) > 100 else f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {r.notes}\n"
                    elif r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" and r.notes:
                        notes_lines = r.notes.strip().split('\n')
                        last_messages = [line for line in notes_lines[-2:] if line.strip()]
                        if last_messages:
                            preview = '\n'.join(last_messages)
                            if len(preview) > 80:
                                preview = preview[:77] + '...'
                            message_text += f"   –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {preview}\n"
                    message_text += "\n"

        from uk_management_bot.keyboards.requests import get_pagination_keyboard

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        rows = []

        # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ê–∫—Ç–∏–≤–Ω—ã–µ/–ê—Ä—Ö–∏–≤)
        # –û–Ω–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º
        if active_role != "executor":
            # –î–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filter_status_kb = get_status_filter_inline_keyboard(active_status)
            rows = list(filter_status_kb.inline_keyboard)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞—è–≤–∏—Ç–µ–ª—è
            for r in page_requests:
                if r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
                    rows.append([InlineKeyboardButton(
                        text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ #{r.request_number}",
                        callback_data=f"replyclarify_{r.request_number}"
                    )])
                elif r.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    rows.append([InlineKeyboardButton(
                        text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{r.request_number}",
                        callback_data=f"approve_{r.request_number}"
                    )])
        else:
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
            for i, r in enumerate(page_requests, 1):
                button_text = f"{_icon(r.status)} #{r.request_number} - {r.category}"
                rows.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_request_{r.request_number}"
                )])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
        pagination_kb = get_pagination_keyboard(current_page, total_pages)
        rows += pagination_kb.inline_keyboard
        combined = InlineKeyboardMarkup(inline_keyboard=rows)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ FSM
        await state.update_data(my_requests_page=current_page)
        try:
            await message.answer(message_text, reply_markup=combined)
        except TelegramBadRequest:
            # –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(message_text, reply_markup=combined)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.")


@router.message(Command("my_requests"))
async def cmd_my_requests(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /my_requests –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É 1 —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
    await state.update_data(my_requests_status="active")
    await show_my_requests(message, state)


@router.callback_query(F.data.startswith("replyclarify_"))
async def handle_reply_clarify_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."""
    try:
        request_number = callback.data.replace("replyclarify_", "")
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–∑ notes –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º
        db_session = next(get_db())
        req = db_session.query(Request).filter(Request.request_number == request_number).first()
        await state.update_data(reply_request_number=request_number)
        await state.set_state(RequestStates.waiting_clarify_reply)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if req and user and req.user_id == user.id:
            notes_text = (req.notes or "").strip()
            if notes_text:
                await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n{notes_text}")
            else:
                await callback.message.answer("–î–∏–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ):",
            reply_markup=get_cancel_keyboard(),
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.message(RequestStates.waiting_clarify_reply)
async def handle_reply_clarify_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ notes –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        data = await state.get_data()
        request_number = data.get("reply_request_number")
        if not request_number:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        db_session = next(get_db())
        service = RequestService(db_session)
        req = service.get_request_by_number(request_number)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not req or not user or req.user_id != user.id:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            await state.clear()
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=get_user_contextual_keyboard(message.from_user.id))
            return
        existing = (req.notes or "").strip()
        to_add = message.text.strip()
        # –î–æ–±–∞–≤–ª—è–µ–º —Å —Ä–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_notes = (existing + "\n" if existing else "") + f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {to_add}"
        req.notes = new_notes
        db_session.commit()
        await message.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {e}")
        await state.clear()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())


@router.callback_query(F.data.startswith("status_"))
async def handle_status_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏: –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã, –Ω–æ –º–∞–ø–ø–∏—Ç—å –Ω–∞ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ "active"/"archive"/"all"
        raw = callback.data.replace("status_", "")
        if raw in ("active", "archive", "all"):
            choice = raw
        elif raw == "–í —Ä–∞–±–æ—Ç–µ":
            choice = "–í —Ä–∞–±–æ—Ç–µ"
        else:
            choice = raw
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.update_data(my_requests_status=choice, my_requests_page=1)

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∑–∞—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        db_session = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return

        query = db_session.query(Request).filter(Request.user_id == user.id)
        if choice == "active" or choice == "–í —Ä–∞–±–æ—Ç–µ":
            # –ê–∫—Ç–∏–≤–Ω—ã–µ: —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞—Ç—É—Å—ã (–æ–∂–∏–¥–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏–π)
            query = query.filter(Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]))
        elif choice == "archive":
            # –ê—Ä—Ö–∏–≤: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü—Ä–∏–Ω—è—Ç–æ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        elif choice == "all":
            # –í—Å–µ –∑–∞—è–≤–∫–∏: –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            pass

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –¥–ª—è "all" —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ
        if choice == "all":
            from sqlalchemy import case
            status_priority = case(
                (Request.status.in_(["–ù–æ–≤–∞—è", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]), 0),  # –ê–∫—Ç–∏–≤–Ω—ã–µ
                else_=1  # –ê—Ä—Ö–∏–≤–Ω—ã–µ
            )
            user_requests = query.order_by(status_priority, Request.created_at.desc()).all()
        else:
            user_requests = query.order_by(Request.created_at.desc()).all()
        current_page = 1
        requests_per_page = 5
        total_pages = max(1, (len(user_requests) + requests_per_page - 1) // requests_per_page)
        page_requests = user_requests[:requests_per_page]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        if choice == "active":
            status_title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
        elif choice == "archive":
            status_title = "–ê—Ä—Ö–∏–≤ –∑–∞—è–≤–æ–∫"
        else:
            status_title = "–í—Å–µ –∑–∞—è–≤–∫–∏"
        message_text = f"üìã {status_title} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        if not page_requests:
            message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            def _icon(st: str) -> str:
                mapping = {
                    "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                    "–ó–∞–∫—É–ø": "üí∞",
                    "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                    "–ü—Ä–∏–Ω—è—Ç–æ": "‚úÖ",
                    "–ù–æ–≤–∞—è": "üÜï",
                }
                return mapping.get(st, "")
            for i, request in enumerate(page_requests, 1):
                address = request.address
                if len(address) > 60:
                    address = address[:60] + "‚Ä¶"
                message_text += f"{i}. {_icon(request.status)} #{request.request_number} - {request.category} - {request.status}\n"
                message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y')}\n"
                if choice == "archive" and request.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and request.notes:
                    message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {request.notes}\n"
                elif request.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" and request.notes:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
                    notes_lines = request.notes.strip().split('\n')
                    last_messages = [line for line in notes_lines[-3:] if line.strip()]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    if last_messages:
                        preview = '\n'.join(last_messages)
                        if len(preview) > 100:
                            preview = preview[:97] + '...'
                        message_text += f"   –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {preview}\n"
                message_text += "\n"

        from uk_management_bot.keyboards.requests import get_pagination_keyboard
        filter_status_kb = get_status_filter_inline_keyboard(choice)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        combined_rows = list(filter_status_kb.inline_keyboard)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞—è–≤–∏—Ç–µ–ª—è
        for r in page_requests:
            if r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
                combined_rows.append([InlineKeyboardButton(
                    text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ #{r.request_number}",
                    callback_data=f"replyclarify_{r.request_number}"
                )])
            elif r.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                combined_rows.append([InlineKeyboardButton(
                    text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{r.request_number}",
                    callback_data=f"approve_{r.request_number}"
                )])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        pagination_kb = get_pagination_keyboard(current_page, total_pages)
        combined_rows += pagination_kb.inline_keyboard
        combined = type(pagination_kb)(inline_keyboard=combined_rows)

        try:
            await callback.message.edit_text(message_text, reply_markup=combined)
        except TelegramBadRequest:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ —Ç–æ–º—É –∂–µ —Ñ–∏–ª—å—Ç—Ä—É/—Ç–∞–∫–æ–º—É –∂–µ —Ç–µ–∫—Å—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
            pass
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
@router.callback_query(F.data.startswith("categoryfilter_"))
async def handle_category_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        choice = callback.data.replace("categoryfilter_", "")
        await state.update_data(my_requests_category=choice, my_requests_page=1)
        fake_message = callback.message
        fake_message.from_user = callback.from_user
        await show_my_requests(fake_message, state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "filters_reset")
async def handle_filters_reset(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        await state.update_data(
            my_requests_status="all",
            my_requests_category="all",
            my_requests_period="all",
            my_requests_executor="all",
            my_requests_page=1,
        )
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("period_"))
async def handle_period_filter(callback: CallbackQuery, state: FSMContext):
    try:
        choice = callback.data.replace("period_", "")
        await state.update_data(my_requests_period=choice, my_requests_page=1)
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("executorfilter_"))
async def handle_executor_filter(callback: CallbackQuery, state: FSMContext):
    try:
        choice = callback.data.replace("executorfilter_", "")
        await state.update_data(my_requests_executor=choice, my_requests_page=1)
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô =====

@router.callback_query(F.data.startswith("assign_duty_"))
async def handle_assign_duty_executor(callback: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ —Å–º–µ–Ω–∞–º)"""
    try:
        request_number = callback.data.replace("assign_duty_", "")
        logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

        db_session = next(get_db())

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É auto_assign
        await auto_assign_request_by_category(request_number, db_session, callback.from_user.id)

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</b>\n\n"
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏—Ö —Å–º–µ–Ω\n"
            f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )

        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("assign_specific_"))
async def handle_assign_specific_executor(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    try:
        request_number = callback.data.replace("assign_specific_", "")
        logger.info(f"–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

        db_session = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_to_spec = {
            "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞": "electrician",
            "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞": "plumber",
            "–û—Ö—Ä–∞–Ω–∞": "security",
            "–£–±–æ—Ä–∫–∞": "cleaner",
        }

        spec = category_to_spec.get(request.category, "other")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        from uk_management_bot.database.models.user import User
        import json

        executors = db_session.query(User).filter(
            User.roles.contains('"executor"'),
            User.status == "approved"
        ).all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        filtered_executors = []
        for ex in executors:
            if ex.specialization:
                try:
                    specializations = json.loads(ex.specialization) if isinstance(ex.specialization, str) else ex.specialization
                    if spec in specializations or "other" in specializations:
                        filtered_executors.append(ex)
                except:
                    pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
        from uk_management_bot.keyboards.admin import get_executors_by_category_keyboard

        executors_text = f"–ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(filtered_executors)}" if filtered_executors else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            f"üë§ <b>–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞: #{request_number}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec}\n\n"
            f"{executors_text}\n\n"
            f"üü¢ - –ù–∞ —Å–º–µ–Ω–µ\n"
            f"‚ö™ - –ù–µ –Ω–∞ —Å–º–µ–Ω–µ",
            reply_markup=get_executors_by_category_keyboard(request_number, request.category, filtered_executors),
            parse_mode="HTML"
        )

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(filtered_executors)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("assign_executor_"))
async def handle_final_executor_assignment(callback: CallbackQuery):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: assign_executor_251013-001_123
        parts = callback.data.replace("assign_executor_", "").split("_")
        request_number = parts[0]
        executor_id = int(parts[1])

        logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id} –Ω–∞ –∑–∞—è–≤–∫—É {request_number}")

        db_session = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        request = db_session.query(Request).filter(Request.request_number == request_number).first()
        from uk_management_bot.database.models.user import User
        executor = db_session.query(User).filter(User.id == executor_id).first()

        if not request or not executor:
            await callback.answer("–ó–∞—è–≤–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        request.executor_id = executor_id
        request.assignment_type = "manual"  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä—É—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        db_session.commit()

        executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
        if not executor_name:
            executor_name = f"@{executor.username}" if executor.username else f"ID{executor.id}"

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é</b>\n\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        try:
            from aiogram import Bot
            bot = Bot.get_current()

            notification_text = (
                f"üìã <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
                f"‚Ññ –∑–∞—è–≤–∫–∏: #{request.format_number_for_display()}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
                f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é."
            )

            await bot.send_message(executor.telegram_id, notification_text, parse_mode="HTML")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor.telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("back_to_assignment_type_"))
async def handle_back_to_assignment_type(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        request_number = callback.data.replace("back_to_assignment_type_", "")

        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        from uk_management_bot.keyboards.admin import get_assignment_type_keyboard

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
            reply_markup=get_assignment_type_keyboard(request_number),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø
# ============================

class ExecutorRequestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∑–∞—è–≤–∫–∞–º–∏"""
    waiting_purchase_comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞–∫—É–ø–∞
    waiting_completion_comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    waiting_completion_media = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è


@router.callback_query(F.data.startswith("executor_view_media_"))
async def executor_view_media(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
    try:
        request_number = callback.data.replace("executor_view_media_", "")
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
        from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument
        import json

        media_group = []

        if request.media_files:
            try:
                media_files = json.loads(request.media_files) if isinstance(request.media_files, str) else request.media_files
                if media_files:
                    for media in media_files:
                        file_id = media.get('file_id') if isinstance(media, dict) else media
                        media_type = media.get('type', 'photo') if isinstance(media, dict) else 'photo'

                        if media_type == 'photo':
                            media_group.append(InputMediaPhoto(media=file_id))
                        elif media_type == 'video':
                            media_group.append(InputMediaVideo(media=file_id))
                        elif media_type == 'document':
                            media_group.append(InputMediaDocument(media=file_id))
            except (json.JSONDecodeError, TypeError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ media_files: {e}")

        if media_group:
            await callback.message.answer_media_group(media=media_group)
            await callback.answer("‚úÖ –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        else:
            await callback.answer("–ù–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("executor_purchase_"))
async def executor_request_purchase(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞—è–≤–∫—É –≤ '–ó–∞–∫—É–ø'"""
    try:
        request_number = callback.data.replace("executor_purchase_", "")
        await state.update_data(executor_request_number=request_number)
        await state.set_state(ExecutorRequestStates.waiting_purchase_comment)

        await callback.message.edit_text(
            f"üí∞ <b>–ü–µ—Ä–µ–≤–æ–¥ –∑–∞—è–≤–∫–∏ #{request_number} –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'</b>\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—É–ø–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ExecutorRequestStates.waiting_purchase_comment)
async def executor_process_purchase_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞–∫—É–ø–∞"""
    try:
        data = await state.get_data()
        request_number = data.get("executor_request_number")

        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        old_status = request.status
        request.status = "–ó–∞–∫—É–ø"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ notes
        purchase_note = f"\n[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å] –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–∫—É–ø: {message.text}"
        request.notes = (request.notes or "") + purchase_note
        request.updated_at = db_session.query(Request).filter(Request.request_number == request_number).first().updated_at

        db_session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from uk_management_bot.services.notification_service import async_notify_request_status_changed
        try:
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db_session, request, old_status, "–ó–∞–∫—É–ø")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'\n\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–∫—É–ø–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(F.data.startswith("executor_complete_"))
async def executor_complete_request(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞—è–≤–∫—É –≤ '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'"""
    try:
        request_number = callback.data.replace("executor_complete_", "")
        await state.update_data(executor_request_number=request_number, completion_media=[])
        await state.set_state(ExecutorRequestStates.waiting_completion_comment)

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_number}</b>\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:",
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ExecutorRequestStates.waiting_completion_comment)
async def executor_process_completion_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        data = await state.get_data()
        request_number = data.get("executor_request_number")

        await state.update_data(completion_comment=message.text)
        await state.set_state(ExecutorRequestStates.waiting_completion_media)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞", callback_data=f"executor_finish_completion_{request_number}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_request_{request_number}")]
        ])

        await message.answer(
            f"üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞'",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.message(ExecutorRequestStates.waiting_completion_media, F.photo | F.video | F.document)
async def executor_collect_completion_media(message: Message, state: FSMContext):
    """–°–±–æ—Ä –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        data = await state.get_data()
        completion_media = data.get("completion_media", [])
        request_number = data.get("executor_request_number")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
        if message.photo:
            completion_media.append({"type": "photo", "file_id": message.photo[-1].file_id})
        elif message.video:
            completion_media.append({"type": "video", "file_id": message.video.file_id})
        elif message.document:
            completion_media.append({"type": "document", "file_id": message.document.file_id})

        await state.update_data(completion_media=completion_media)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—á–µ—Ç—á–∏–∫–æ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å ({len(completion_media)} —Ñ–∞–π–ª–æ–≤)", callback_data=f"executor_finish_completion_{request_number}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_request_{request_number}")]
        ])

        await message.answer(
            f"üìé –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(completion_media)}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("executor_finish_completion_"))
async def executor_finish_completion(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        request_number = callback.data.replace("executor_finish_completion_", "")
        data = await state.get_data()
        completion_comment = data.get("completion_comment", "")
        completion_media = data.get("completion_media", [])

        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –≤ Media Service (–µ—Å–ª–∏ –µ—Å—Ç—å)
        media_service_files = []
        if completion_media:
            from uk_management_bot.utils.media_helpers import upload_report_file_to_media_service
            bot = callback.bot

            # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è uploaded_by
            from uk_management_bot.database.models.user import User
            user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
            uploaded_by = user.id if user else None

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(completion_media)} —Ñ–∞–π–ª–æ–≤ –≤ Media Service –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

            for idx, media_item in enumerate(completion_media, 1):
                file_id = media_item.get("file_id")
                file_type = media_item.get("type", "photo")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º report_type –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if file_type == "video":
                    report_type = "completion_video"
                elif file_type == "document":
                    report_type = "completion_document"
                else:
                    report_type = "completion_photo"

                try:
                    result = await upload_report_file_to_media_service(
                        bot=bot,
                        file_id=file_id,
                        request_number=request_number,
                        report_type=report_type,
                        description=f"–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã #{idx}",
                        uploaded_by=uploaded_by
                    )

                    if result:
                        media_service_files.append({
                            "media_id": result["media_file"]["id"],
                            "file_url": result["media_file"]["file_url"],
                            "type": file_type
                        })
                        logger.info(f"–§–∞–π–ª #{idx} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Media Service: media_id={result['media_file']['id']}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª #{idx} –≤ Media Service")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ #{idx} –≤ Media Service: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        old_status = request.status
        request.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        completion_note = f"\n[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å] –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {completion_comment}"
        request.notes = (request.notes or "") + completion_note

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ (–∏ Telegram file_id, –∏ Media Service IDs)
        if media_service_files:
            import json
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ Media Service
            request.completion_media = json.dumps(media_service_files)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(media_service_files)} —Ñ–∞–π–ª–æ–≤ –≤ completion_media")
        elif completion_media:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Media Service –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã Telegram file_id
            import json
            request.completion_media = json.dumps(completion_media)
            logger.warning(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ Telegram file_id, –±–µ–∑ Media Service")

        db_session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from uk_management_bot.services.notification_service import async_notify_request_status_changed
        try:
            await async_notify_request_status_changed(callback.bot, db_session, request, old_status, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        message_text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
        message_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {completion_comment}\n"
        if media_service_files:
            message_text += f"üìé –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ Media Service: {len(media_service_files)}"
        elif completion_media:
            message_text += f"‚ö†Ô∏è –§–∞–π–ª–æ–≤: {len(completion_media)} (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ)"

        await callback.message.edit_text(message_text, parse_mode="HTML")

        await state.clear()
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


@router.callback_query(F.data.startswith("executor_work_"))
async def executor_return_to_work(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –ó–∞–∫—É–ø/–£—Ç–æ—á–Ω–µ–Ω–∏–µ"""
    try:
        request_number = callback.data.replace("executor_work_", "")
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        old_status = request.status
        request.status = "–í —Ä–∞–±–æ—Ç–µ"
        db_session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from uk_management_bot.services.notification_service import async_notify_request_status_changed
        try:
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db_session, request, old_status, "–í —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        await callback.message.edit_text(
            f"üîÑ –ó–∞—è–≤–∫–∞ #{request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
