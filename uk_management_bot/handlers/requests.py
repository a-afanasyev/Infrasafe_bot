from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from uk_management_bot.database.models.request import Request
from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.user import User
from uk_management_bot.keyboards.requests import (
    get_categories_keyboard, 
    get_urgency_keyboard,
    get_cancel_keyboard,
    get_media_keyboard,
    get_confirmation_keyboard,
    get_address_selection_keyboard,
    parse_selected_address,
    get_categories_inline_keyboard,
    get_categories_inline_keyboard_with_cancel,
    get_urgency_inline_keyboard,
    get_inline_confirmation_keyboard,
)
from uk_management_bot.keyboards.base import get_main_keyboard, get_contextual_keyboard, get_user_contextual_keyboard
from uk_management_bot.keyboards.requests import (
    get_status_filter_inline_keyboard,
    get_category_filter_inline_keyboard,
    get_reset_filters_inline_keyboard,
    get_period_filter_inline_keyboard,
    get_executor_filter_inline_keyboard,
)
from uk_management_bot.utils.validators import (
    validate_address, 
    validate_description, 
    validate_media_file
)
from uk_management_bot.config.settings import settings
from uk_management_bot.utils.constants import REQUEST_CATEGORIES, REQUEST_URGENCIES
from uk_management_bot.utils.constants import REQUEST_CATEGORIES
import logging
from datetime import datetime
from uk_management_bot.services.request_service import RequestService
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.notification_service import async_notify_action_denied
from uk_management_bot.utils.constants import ERROR_MESSAGES
from typing import Optional

logger = logging.getLogger(__name__)

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ —Ä–æ—É—Ç–µ—Ä
from uk_management_bot.middlewares.auth import auth_middleware, role_mode_middleware
router.message.middleware(auth_middleware)
router.message.middleware(role_mode_middleware)
router.callback_query.middleware(auth_middleware)
router.callback_query.middleware(role_mode_middleware)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ UX

async def _deny_if_pending_message(message: Message, user_status: Optional[str]) -> bool:
    """–ï–¥–∏–Ω—ã–π —Ä–∞–Ω–Ω–∏–π –æ—Ç–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending (Message).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å.
    """
    if user_status == "pending":
        try:
            from uk_management_bot.utils.helpers import get_text
            lang = getattr(message.from_user, "language_code", None) or "ru"
            await message.answer(get_text("auth.pending", language=lang))
        except Exception:
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        return True
    return False

async def _deny_if_pending_callback(callback: CallbackQuery, user_status: Optional[str]) -> bool:
    """–ï–¥–∏–Ω—ã–π —Ä–∞–Ω–Ω–∏–π –æ—Ç–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending (CallbackQuery).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å.
    """
    if user_status == "pending":
        try:
            from uk_management_bot.utils.helpers import get_text
            lang = getattr(callback.from_user, "language_code", None) or "ru"
            await callback.answer(get_text("auth.pending", language=lang), show_alert=True)
        except Exception:
            await callback.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return True
    return False

def get_contextual_help(address_type: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–º–æ—â—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
    
    Args:
        address_type: –¢–∏–ø –∞–¥—Ä–µ—Å–∞ (home/apartment/yard)
        
    Returns:
        str: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    """
    help_templates = {
        "home": "üè† –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–º. –û–±—ã—á–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω—ã —Å:\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–æ–π\n‚Ä¢ –û—Ç–æ–ø–ª–µ–Ω–∏–µ–º\n‚Ä¢ –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ–º\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        "apartment": "üè¢ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É. –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n‚Ä¢ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–∞\n‚Ä¢ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è\n‚Ä¢ –õ–∏—Ñ—Ç\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        "yard": "üå≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–≤–æ—Ä. –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n‚Ä¢ –ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –£–±–æ—Ä–∫–∞\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
    }
    return help_templates.get(address_type, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")

async def graceful_fallback(message: Message, error_type: str):
    """
    Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
    """
    fallback_messages = {
        "auth_service_error": "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        "parsing_error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        "keyboard_error": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
        "critical_error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:"
    }
    
    error_message = fallback_messages.get(error_type, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    await message.answer(error_message, reply_markup=get_cancel_keyboard())
    
    logger.warning(f"[GRACEFUL_FALLBACK] –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ '{error_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

def smart_address_validation(address_text: str) -> dict:
    """
    –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    
    Args:
        address_text: –¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    """
    suggestions = []
    is_valid = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(address_text) < 10:
        suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–ª–∏—Ü—ã
    street_indicators = ["—É–ª.", "—É–ª–∏—Ü–∞", "–ø—Ä–æ—Å–ø–µ–∫—Ç", "–ø—Ä–æ—Å–ø.", "–ø–µ—Ä–µ—É–ª–æ–∫", "–ø–µ—Ä."]
    has_street = any(indicator in address_text.lower() for indicator in street_indicators)
    if not has_street:
        suggestions.append("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É–ª–∏—Ü—ã (—É–ª., –ø—Ä–æ—Å–ø–µ–∫—Ç, –ø–µ—Ä–µ—É–ª–æ–∫)")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    house_indicators = ["–¥.", "–¥–æ–º", "‚Ññ"]
    has_house = any(indicator in address_text.lower() for indicator in house_indicators)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –µ—Å—Ç—å
    import re
    if not has_house:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —É–ª–∏—Ü–∞ + –∑–∞–ø—è—Ç–∞—è/–ø—Ä–æ–±–µ–ª + —Ü–∏—Ñ—Ä–∞
        house_pattern = r'[,\s]\d+'
        if re.search(house_pattern, address_text):
            has_house = True
    
    if not has_house:
        suggestions.append("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞")
        is_valid = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä (–Ω–æ–º–µ—Ä–∞)
    if not any(char.isdigit() for char in address_text):
        suggestions.append("–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ (–¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)")
        is_valid = False
    
    return {
        'is_valid': is_valid,
        'suggestions': suggestions
    }

# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# @router.message(F.text)
# async def debug_all_messages(message: Message):
#     """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: '{message.text}'")

class RequestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    category = State()           # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    address = State()            # –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
    address_manual = State()     # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ (–Ω–æ–≤–æ–µ)
    description = State()        # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    urgency = State()           # –í—ã–±–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    media = State()             # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    confirm = State()           # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    waiting_clarify_reply = State()  # –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_request_creation(message: Message, state: FSMContext, user_status: Optional[str] = None):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if await _deny_if_pending_message(message, user_status):
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'")
    await state.set_state(RequestStates.category)
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) –Ω–∞ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏‚Ä¶", reply_markup=ReplyKeyboardRemove())
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:", reply_markup=get_categories_inline_keyboard_with_cancel())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_request_creation_emoji(message: Message, state: FSMContext, user_status: Optional[str] = None):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (—Å —ç–º–æ–¥–∑–∏)"""

    
    if await _deny_if_pending_message(message, user_status):
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'")
    await state.set_state(RequestStates.category)
    # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) –Ω–∞ –≤—Ä–µ–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏‚Ä¶", reply_markup=ReplyKeyboardRemove())
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:", reply_markup=get_categories_inline_keyboard_with_cancel())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–∫—Å—Ç —Ä–æ–≤–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
@router.message(RequestStates.category, F.text.in_(REQUEST_CATEGORIES))
async def process_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    category_text = message.text
    
    logger.info(f"[CATEGORY_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{category_text}'")
    
    if category_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞
    await state.update_data(category=category_text)
    await state.set_state(RequestStates.address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
    try:
        logger.info(f"[CATEGORY_SELECTION] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        keyboard = await get_address_selection_keyboard(user_id)
        logger.info(f"[CATEGORY_SELECTION] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.answer(
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é",
            reply_markup=keyboard
        )
        logger.info(f"[CATEGORY_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_text}', –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞")
    except Exception as e:
        logger.error(f"[CATEGORY_SELECTION] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞: {e}")
        await graceful_fallback(message, "keyboard_error")

# –ò–≥–Ω–æ—Ä/–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(RequestStates.category)
async def process_category_other_inputs(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º: –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
@router.message(RequestStates.address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    user_id = message.from_user.id
    selected_text = message.text
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{selected_text}'")
    logger.info(f"[ADDRESS_SELECTION] –í—Ä–µ–º—è: {datetime.now()}")
    logger.info(f"[ADDRESS_SELECTION] –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await parse_selected_address(selected_text)
        logger.info(f"[ADDRESS_SELECTION] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {result}")
        
        if result['type'] == 'predefined':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å; –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –∞–¥—Ä–µ—Å–µ
            await state.update_data(address=result['address'])
            await state.set_state(RequestStates.description)
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
            context_message = get_contextual_help(result['address_type'])
            await message.answer(context_message, reply_markup=get_cancel_keyboard())
            
            logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å: {result['address']}, —Ç–∏–ø: {result['address_type']}")
            
        elif result['type'] == 'manual':
            # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
            await state.set_state(RequestStates.address_manual)
            await message.answer(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 1, –∫–≤. 5",
                reply_markup=get_cancel_keyboard()
            )
            logger.info(f"[ADDRESS_SELECTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞")
            
        elif result['type'] == 'cancel':
            # –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            await cancel_request(message, state)
            return
            
        elif result['type'] == 'unknown':
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logger.warning(f"[ADDRESS_SELECTION] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞: '{selected_text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é"
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
            try:
                keyboard = await get_address_selection_keyboard(user_id)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=keyboard)
            except Exception as keyboard_error:
                logger.error(f"[ADDRESS_SELECTION] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_error}")
                await graceful_fallback(message, "keyboard_error")
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            logger.error(f"[ADDRESS_SELECTION] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result['type']}")
            await graceful_fallback(message, "parsing_error")
            
    except Exception as e:
        logger.error(f"[ADDRESS_SELECTION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞: {e}")
        await graceful_fallback(message, "critical_error")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ (–Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@router.message(RequestStates.address_manual)
async def process_address_manual(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —Å —É–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    address_text = message.text
    
    logger.info(f"[ADDRESS_MANUAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: '{address_text}'")
    
    if address_text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    validation_result = smart_address_validation(address_text)
    if not validation_result['is_valid']:
        suggestions_text = "\n".join([f"‚Ä¢ {suggestion}" for suggestion in validation_result['suggestions']])
        await message.answer(
            f"‚ö†Ô∏è –ê–¥—Ä–µ—Å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏:\n{suggestions_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(address=address_text)
    
    # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤–≤–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ –∞–¥—Ä–µ—Å–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
    await state.set_state(RequestStates.description)
    await message.answer(
        "‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=get_cancel_keyboard()
    )
    logger.info(f"[ADDRESS_MANUAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {address_text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(RequestStates.description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    from uk_management_bot.utils.validators import Validator
    is_valid, error_message = Validator.validate_description(message.text)
    if not is_valid:
        await message.answer(error_message)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    await state.update_data(description=message.text)
    await state.set_state(RequestStates.urgency)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:",
        reply_markup=get_urgency_inline_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
@router.message(RequestStates.urgency)
async def process_urgency(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–∫–≤–∞—Ä—Ç–∏—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    valid_urgency_levels = REQUEST_URGENCIES
    
    if message.text not in valid_urgency_levels:
        # –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞.
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_urgency_inline_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–¥–∏–∞
    await state.update_data(urgency=message.text)
    await state.set_state(RequestStates.media)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤):\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
        reply_markup=get_media_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {message.text}")

## –®–∞–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞.

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@router.message(RequestStates.media, F.photo | F.video)
async def process_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    media_files = data.get('media_files', [])
    
    if len(media_files) >= 5:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º file_id
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    else:
        file_id = message.video.file_id
        file_type = "video"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if not validate_media_file(0, file_type):  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ Telegram
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
        return
    
    media_files.append(file_id)
    await state.update_data(media_files=media_files)
    
    await message.answer(
        f"–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(media_files)}/5). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
        reply_markup=get_media_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ media (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–æ—Ç–º–µ–Ω–∞)
@router.message(RequestStates.media)
async def process_media_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ media"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    if message.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await state.set_state(RequestStates.confirm)
        await show_confirmation(message, state)
        return
    
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
        reply_markup=get_media_keyboard()
    )

# –ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏
async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    summary = (
        "üìã –°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:\n\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n"
        f"üì∏ –§–∞–π–ª–æ–≤: {len(data.get('media_files', []))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    
    await message.answer(
        summary,
        reply_markup=get_inline_confirmation_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.message(RequestStates.confirm)
async def process_confirmation(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_request(message, state)
        return
    
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(RequestStates.media)
        await message.answer(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'",
            reply_markup=get_media_keyboard()
        )
        return
    
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = await save_request(data, message.from_user.id, db)
        
        if success:
            await state.clear()
            await message.answer(
                "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_contextual_keyboard(roles, active_role) if roles and active_role else get_user_contextual_keyboard(message.from_user.id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É")
        else:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫—Ä—ã—Ç—å –ú–æ–∏ –∑–∞—è–≤–∫–∏)
            await state.clear()
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_user_contextual_keyboard(message.from_user.id)
            )
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        return
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirmation_keyboard()
    )

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async def cancel_request(message: Message, state: FSMContext, roles: list = None, active_role: str = None):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_user_contextual_keyboard(message.from_user.id)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_request(data: dict, user_id: int, db: Session) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        request = Request(
            category=data['category'],
            address=data['address'],
            description=data['description'],
            urgency=data['urgency'],
            apartment=data.get('apartment'),
            # –í –º–æ–¥–µ–ª–∏ media_files –æ–∂–∏–¥–∞–µ—Ç—Å—è JSON (—Å–ø–∏—Å–æ–∫), –ø–æ—ç—Ç–æ–º—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
            media_files=list(data.get('media_files', [])),
            user_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            status='–ù–æ–≤–∞—è'
        )
        
        db.add(request)
        db.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False

# =====================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK_QUERY –î–õ–Ø INLINE –ö–õ–ê–í–ò–ê–¢–£–†
# =====================================

@router.callback_query(F.data.startswith("category_"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        category = callback.data.replace("category_", "")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        valid_categories = REQUEST_CATEGORIES
        
        if category not in valid_categories:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
        await state.update_data(category=category)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(RequestStates.address)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ ReplyKeyboardMarkup)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
        keyboard = await get_address_selection_keyboard(callback.from_user.id)
        await callback.message.answer(
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=keyboard
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_create")
async def handle_cancel_create(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (inline)."""
    try:
        await state.clear()
        await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_user_contextual_keyboard(callback.from_user.id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("urgency_"))
async def handle_urgency_selection(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        urgency = callback.data.replace("urgency_", "")
        valid_urgency = REQUEST_URGENCIES
        
        if urgency not in valid_urgency:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏", show_alert=True)
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å '{urgency}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            return
        
        await state.update_data(urgency=urgency)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ ReplyKeyboardMarkup)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}"
        )

        # –®–∞–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏—Å–∫–ª—é—á—ë–Ω: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–¥–∏–∞
        await state.set_state(RequestStates.media)
        await callback.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤):\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
            reply_markup=get_media_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_"))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext, user_status: Optional[str] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    if await _deny_if_pending_callback(callback, user_status):
        return
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        action = callback.data.replace("confirm_", "")
        
        if action == "yes":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
            data = await state.get_data()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_session = next(get_db())
            success = await save_request(data, callback.from_user.id, db_session)
            
            if success:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ReplyKeyboardMarkup
                await callback.message.edit_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"–ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {data.get('urgency', '–û–±—ã—á–Ω–∞—è')}"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer(
                    "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=get_user_contextual_keyboard(callback.from_user.id)
                )
                await state.clear()
                logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            else:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                await state.clear()
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=get_user_contextual_keyboard(callback.from_user.id)
                )
                await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", show_alert=True)
                
        elif action == "no":
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            )
            await callback.message.answer(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_user_contextual_keyboard(callback.from_user.id)
            )
            await state.clear()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞—è–≤–æ–∫"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        current_page = int(callback.data.replace("page_", ""))

        # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–∑ FSM
        data = await state.get_data()
        active_status = data.get("my_requests_status")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        db_session = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        
        query = db_session.query(Request).filter(Request.user_id == user.id)
        if active_status == "active":
            query = query.filter(~Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        elif active_status == "archive":
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        user_requests = query.order_by(Request.created_at.desc()).all()

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_requests = len(user_requests)
        requests_per_page = 5
        total_pages = max(1, (total_requests + requests_per_page - 1) // requests_per_page)
        
        if current_page < 1 or current_page > total_pages:
            await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (current_page - 1) * requests_per_page
        end_idx = start_idx + requests_per_page
        page_requests = user_requests[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞
        message_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        def _icon(st: str) -> str:
            mapping = {
                "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                "–ó–∞–∫—É–ø": "üí∞",
                "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                "–ù–æ–≤–∞—è": "üÜï",
            }
            return mapping.get(st, "")
        for i, request in enumerate(page_requests, 1):
            message_text += f"{i}. {_icon(request.status)} {request.category} - {request.status}\n"
            message_text += f"   –ê–¥—Ä–µ—Å: {request.address}\n"
            message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y')}\n"
            if request.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and request.notes:
                message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {request.notes}\n"
            message_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —Ñ–∏–ª—å—Ç—Ä + –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ –∫–∞–∂–¥–æ–π) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        from uk_management_bot.keyboards.requests import get_pagination_keyboard
        from uk_management_bot.keyboards.requests import get_status_filter_inline_keyboard
        filter_kb = get_status_filter_inline_keyboard(active_status if active_status != "all" else None)
        rows = list(filter_kb.inline_keyboard)
        for r in page_requests:
            if r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                rows.append([InlineKeyboardButton(text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ #{r.id}", callback_data=f"replyclarify_{r.id}")])
        pagination_kb = get_pagination_keyboard(current_page, total_pages, request_id=None, show_reply_clarify=False)
        rows += pagination_kb.inline_keyboard
        combined = InlineKeyboardMarkup(inline_keyboard=rows)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ FSM
        await state.update_data(my_requests_page=current_page)

        try:
            await callback.message.edit_text(message_text, reply_markup=combined)
        except TelegramBadRequest:
            pass
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("view_"))
async def handle_view_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        request_id = int(callback.data.replace("view_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.id == request_id).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user or request.user_id != user.id:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        message_text = f"üìã –ó–∞—è–≤–∫–∞ #{request.id}\n\n"
        message_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        message_text += f"–°—Ç–∞—Ç—É—Å: {request.status}\n"
        message_text += f"–ê–¥—Ä–µ—Å: {request.address}\n"
        message_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n"
        message_text += f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency}\n"
        if request.apartment:
            message_text += f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {request.apartment}\n"
        message_text += f"–°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if request.updated_at:
            message_text += f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {request.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π + –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
        from uk_management_bot.keyboards.requests import get_request_actions_keyboard
        actions_kb = get_request_actions_keyboard(request.id)
        rows = list(actions_kb.inline_keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ callback_data –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: back_list_{page}
        data = await state.get_data()
        current_page = int(data.get("my_requests_page", 1))
        rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_list_{current_page}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ {request.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("back_list_"))
async def handle_back_to_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
        page = int(callback.data.replace("back_list_", ""))
        await state.update_data(my_requests_page=page)
        # –ü—Ä–æ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        # –ù–µ–ª—å–∑—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å frozen from_user —É Message –≤ Aiogram 3 ‚Äî –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("edit_") & ~F.data.startswith("edit_employee_"))
async def handle_edit_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        request_id = int(callback.data.replace("edit_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.id == request_id).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if request.user_id != callback.from_user.id:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(editing_request_id=request_id)
        await state.set_state(RequestStates.category)
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_categories_keyboard()
        )
        
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("delete_"))
async def handle_delete_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        request_id = int(callback.data.replace("delete_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = next(get_db())
        request = db_session.query(Request).filter(Request.id == request_id).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if request.user_id != callback.from_user.id:
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
        db_session.delete(request)
        db_session.commit()
        
        await callback.message.edit_text(
            "üóëÔ∏è –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("accept_"))
async def handle_accept_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return
        request_id = int(callback.data.replace("accept_", ""))
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–í —Ä–∞–±–æ—Ç–µ",
            actor_telegram_id=callback.from_user.id,
        )

        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return

        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É"
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("complete_"))
async def handle_complete_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_executor(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", show_alert=True)
            return
        # –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –∏–∑ middleware (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ—É—Ç–µ—Ä)
        try:
            shift_ctx = state and (await state.get_data()).get("__shift_ctx__")  # —Ä–µ–∑–µ—Ä–≤, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≤ FSM
        except Exception:
            shift_ctx = None
        # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –±–µ—Ä–µ–º –∏–∑ data –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ aiogram (–µ—Å–ª–∏ middleware —É—Å—Ç–∞–Ω–æ–≤–∏–ª)
        # Aiogram 3 –ø–µ—Ä–µ–¥–∞–µ—Ç data –≤ handler, –Ω–æ –≤ –Ω–∞—à–µ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –µ–≥–æ –Ω–µ—Ç. –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∂–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞—Ä—å–µ—Ä.
        # –î–ª—è —Ä–∞–Ω–Ω–µ–π UX-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–º–µ–Ω—É –±—ã—Å—Ç—Ä–∏–º —Å–ø–æ—Å–æ–±–æ–º:
        from uk_management_bot.services.shift_service import ShiftService
        quick_service = ShiftService(db_session)
        if not quick_service.is_user_in_active_shift(callback.from_user.id):
            await callback.answer(ERROR_MESSAGES.get("not_in_shift", "–í—ã –Ω–µ –≤ —Å–º–µ–Ω–µ"), show_alert=True)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (best-effort)
            try:
                from aiogram import Bot
                bot: Bot = callback.message.bot
                await async_notify_action_denied(bot, db_session, callback.from_user.id, "not_in_shift")
            except Exception:
                pass
            return
        request_id = int(callback.data.replace("complete_", ""))
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )

        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return

        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"
        )
        await callback.message.answer(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_user_contextual_keyboard(callback.from_user.id)
        )
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("clarify_"))
async def handle_clarify_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å '–£—Ç–æ—á–Ω–µ–Ω–∏–µ'"""
    try:
        # –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        request_id = int(callback.data.replace("clarify_", ""))
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–£—Ç–æ—á–Ω–µ–Ω–∏–µ",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚ùì –ó–∞—è–≤–∫–∞ #{request_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–£—Ç–æ—á–Ω–µ–Ω–∏–µ'",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ '–£—Ç–æ—á–Ω–µ–Ω–∏–µ': {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("purchase_"))
async def handle_purchase_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'"""
    try:
        # –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        request_id = int(callback.data.replace("purchase_", ""))
        db_session = next(get_db())
        auth = AuthService(db_session)
        if not await auth.is_user_manager(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
            return
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–ó–∞–∫—É–ø",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"üí∞ –ó–∞—è–≤–∫–∞ #{request_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ '–ó–∞–∫—É–ø': {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel_") & ~F.data.startswith("cancel_document_selection_"))
async def handle_cancel_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏"""
    try:
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü (–≤ RequestService —Ç–∞–∫–∂–µ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞)
        request_id = int(callback.data.replace("cancel_", ""))
        db_session = next(get_db())
        auth = AuthService(db_session)
        is_manager = await auth.is_user_manager(callback.from_user.id)
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–û—Ç–º–µ–Ω–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("deny_"))
async def handle_executor_propose_deny(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫–∞–∑ (—ç—Å–∫–∞–ª–∏—Ä—É–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É). –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ notes –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        request_id = int(callback.data.replace("deny_", ""))
        db_session = next(get_db())
        auth = AuthService(db_session)
        # –¢–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if not await auth.is_user_executor(callback.from_user.id):
            await callback.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", show_alert=True)
            return
        service = RequestService(db_session)
        req = service.get_request_by_id(request_id)
        if not req:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        existing = (req.notes or "").strip()
        new_notes = (existing + "\n" if existing else "") + "[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        req.notes = new_notes
        db_session.commit()
        await callback.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("approve_") & ~F.data.startswith("approve_employee_"))
async def handle_approve_request(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º -> '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'"""
    try:
        request_id = int(callback.data.replace("approve_", ""))
        db_session = next(get_db())
        service = RequestService(db_session)
        result = service.update_status_by_actor(
            request_id=request_id,
            new_status="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            actor_telegram_id=callback.from_user.id,
        )
        if not result.get("success"):
            await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
            return
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ============================
# –ú–æ–∏ –∑–∞—è–≤–∫–∏ (—Å–ø–∏—Å–æ–∫ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
# ============================

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_requests(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)"""
    try:
        telegram_id = message.from_user.id
        # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ FSM
        data = await state.get_data()
        active_status = data.get("my_requests_status")
        current_page = int(data.get("my_requests_page", 1))
        db_session = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        query = db_session.query(Request).filter(Request.user_id == user.id)
        # –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞: —Ç–æ–ª—å–∫–æ "active" –∏–ª–∏ "archive"
        if active_status == "active":
            # –ê–∫—Ç–∏–≤–Ω—ã–µ: –≤—Å–µ, –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö
            query = query.filter(~Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        elif active_status == "archive":
            # –ê—Ä—Ö–∏–≤: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        # –ü—Ä–æ—á–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–µ—Ä–∏–æ–¥/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å) –æ—Ç–∫–ª—é—á–µ–Ω—ã
        user_requests = query.order_by(Request.created_at.desc()).all()

        total_requests = len(user_requests)
        requests_per_page = 5
        total_pages = max(1, (total_requests + requests_per_page - 1) // requests_per_page)
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –≤—ã—à–ª–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
        if current_page > total_pages:
            current_page = total_pages

        start_idx = (current_page - 1) * requests_per_page
        end_idx = start_idx + requests_per_page
        page_requests = user_requests[start_idx:end_idx]

        message_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        if not page_requests:
            message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            def _icon(st: str) -> str:
                mapping = {
                    "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                    "–ó–∞–∫—É–ø": "üí∞",
                    "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                    "–ù–æ–≤–∞—è": "üÜï",
                }
                return mapping.get(st, "")
            for i, request in enumerate(page_requests, 1):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∞–¥—Ä–µ—Å–∞ –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤
                address = request.address
                if len(address) > 60:
                    address = address[:60] + "‚Ä¶"
                message_text += f"{i}. {_icon(request.status)} {request.category} - {request.status}\n"
                message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y')}\n\n"

        from uk_management_bot.keyboards.requests import get_pagination_keyboard
        # –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ/–ê—Ä—Ö–∏–≤) –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è + –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –≤ —É—Ç–æ—á–Ω–µ–Ω–∏–∏
        filter_status_kb = get_status_filter_inline_keyboard(active_status)
        pagination_kb = get_pagination_keyboard(current_page, total_pages)
        rows = list(filter_status_kb.inline_keyboard)
        for r in page_requests:
            if r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
                rows.append([InlineKeyboardButton(text=f"üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ #{r.id}", callback_data=f"replyclarify_{r.id}")])
        rows += pagination_kb.inline_keyboard
        combined = InlineKeyboardMarkup(inline_keyboard=rows)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ FSM
        await state.update_data(my_requests_page=current_page)
        try:
            await message.answer(message_text, reply_markup=combined)
        except TelegramBadRequest:
            # –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(message_text, reply_markup=combined)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.")


@router.message(Command("my_requests"))
async def cmd_my_requests(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /my_requests –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É 1 —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
    await state.update_data(my_requests_status="active")
    await show_my_requests(message, state)


@router.callback_query(F.data.startswith("replyclarify_"))
async def handle_reply_clarify_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."""
    try:
        request_id = int(callback.data.replace("replyclarify_", ""))
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–∑ notes –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º
        db_session = next(get_db())
        req = db_session.query(Request).filter(Request.id == request_id).first()
        await state.update_data(reply_request_id=request_id)
        await state.set_state(RequestStates.waiting_clarify_reply)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if req and user and req.user_id == user.id:
            notes_text = (req.notes or "").strip()
            if notes_text:
                await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n{notes_text}")
            else:
                await callback.message.answer("–î–∏–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ):",
            reply_markup=get_cancel_keyboard(),
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")


@router.message(RequestStates.waiting_clarify_reply)
async def handle_reply_clarify_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ notes –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        data = await state.get_data()
        request_id = int(data.get("reply_request_id"))
        db_session = next(get_db())
        service = RequestService(db_session)
        req = service.get_request_by_id(request_id)
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not req or not user or req.user_id != user.id:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            await state.clear()
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=get_user_contextual_keyboard(message.from_user.id))
            return
        existing = (req.notes or "").strip()
        to_add = message.text.strip()
        # –î–æ–±–∞–≤–ª—è–µ–º —Å —Ä–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_notes = (existing + "\n" if existing else "") + f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {to_add}"
        req.notes = new_notes
        db_session.commit()
        await message.answer("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {e}")
        await state.clear()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())


@router.callback_query(F.data.startswith("status_"))
async def handle_status_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ—Å—Ç–∞–º–∏: –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã, –Ω–æ –º–∞–ø–ø–∏—Ç—å –Ω–∞ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ "active"/"archive"
        raw = callback.data.replace("status_", "")
        if raw in ("active", "archive"):
            choice = raw
        elif raw == "–í —Ä–∞–±–æ—Ç–µ":
            choice = "–í —Ä–∞–±–æ—Ç–µ"
        else:
            choice = raw
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.update_data(my_requests_status=choice, my_requests_page=1)

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∑–∞—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = await state.get_data()
        db_session = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        from uk_management_bot.database.models.user import User
        user = db_session.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        
        query = db_session.query(Request).filter(Request.user_id == user.id)
        if choice in ("active", "–í —Ä–∞–±–æ—Ç–µ"):
            # –ê–∫—Ç–∏–≤–Ω—ã–µ: –≤—Å–µ, –∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö
            query = query.filter(~Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))
        else:
            query = query.filter(Request.status.in_(["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]))

        user_requests = query.order_by(Request.created_at.desc()).all()
        current_page = 1
        requests_per_page = 5
        total_pages = max(1, (len(user_requests) + requests_per_page - 1) // requests_per_page)
        page_requests = user_requests[:requests_per_page]

        message_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n\n"
        if not page_requests:
            message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            def _icon(st: str) -> str:
                mapping = {
                    "–í —Ä–∞–±–æ—Ç–µ": "üõ†Ô∏è",
                    "–ó–∞–∫—É–ø": "üí∞",
                    "–£—Ç–æ—á–Ω–µ–Ω–∏–µ": "‚ùì",
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê",
                    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ",
                    "–ù–æ–≤–∞—è": "üÜï",
                }
                return mapping.get(st, "")
            for i, request in enumerate(page_requests, 1):
                address = request.address
                if len(address) > 60:
                    address = address[:60] + "‚Ä¶"
                message_text += f"{i}. {_icon(request.status)} {request.category} - {request.status}\n"
                message_text += f"   –ê–¥—Ä–µ—Å: {address}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y')}\n"
                if choice == "archive" and request.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and request.notes:
                    message_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {request.notes}\n"
                message_text += "\n"

        from uk_management_bot.keyboards.requests import get_pagination_keyboard
        filter_status_kb = get_status_filter_inline_keyboard(choice)
        show_reply = any(r.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" for r in page_requests)
        pagination_kb = get_pagination_keyboard(current_page, total_pages, show_reply_clarify=show_reply)
        combined_rows = filter_status_kb.inline_keyboard + pagination_kb.inline_keyboard
        combined = type(pagination_kb)(inline_keyboard=combined_rows)

        try:
            await callback.message.edit_text(message_text, reply_markup=combined)
        except TelegramBadRequest:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ —Ç–æ–º—É –∂–µ —Ñ–∏–ª—å—Ç—Ä—É/—Ç–∞–∫–æ–º—É –∂–µ —Ç–µ–∫—Å—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
            pass
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
@router.callback_query(F.data.startswith("categoryfilter_"))
async def handle_category_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        choice = callback.data.replace("categoryfilter_", "")
        await state.update_data(my_requests_category=choice, my_requests_page=1)
        fake_message = callback.message
        fake_message.from_user = callback.from_user
        await show_my_requests(fake_message, state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "filters_reset")
async def handle_filters_reset(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    try:
        await state.update_data(
            my_requests_status="all",
            my_requests_category="all",
            my_requests_period="all",
            my_requests_executor="all",
            my_requests_page=1,
        )
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("period_"))
async def handle_period_filter(callback: CallbackQuery, state: FSMContext):
    try:
        choice = callback.data.replace("period_", "")
        await state.update_data(my_requests_period=choice, my_requests_page=1)
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("executorfilter_"))
async def handle_executor_filter(callback: CallbackQuery, state: FSMContext):
    try:
        choice = callback.data.replace("executorfilter_", "")
        await state.update_data(my_requests_executor=choice, my_requests_page=1)
        await show_my_requests(Message.model_construct(from_user=callback.from_user, chat=callback.message.chat), state)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
