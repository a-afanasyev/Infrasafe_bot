from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.orm import Session

from services.auth_service import AuthService
from services.invite_service import InviteService, InviteRateLimiter
from utils.helpers import get_text
from keyboards.base import get_main_keyboard, get_cancel_keyboard, get_main_keyboard_for_role
import logging
import json

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "üîë –í–æ–π—Ç–∏")
async def login_via_button(message: Message, db: Session):
    auth = AuthService(db)
    user = await auth.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    if user.status == "approved":
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard())
        return
    ok = await auth.approve_user(message.from_user.id, role="applicant")
    if ok:
        await message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∑–∞—è–≤–∏—Ç–µ–ª—å.",
            reply_markup=get_main_keyboard(),
        )
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(F.text == "/login")
async def login_command(message: Message, db: Session):
    # –ê–Ω–∞–ª–æ–≥ –∫–Ω–æ–ø–∫–∏ ‚Äî –æ–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞—è–≤–∏—Ç–µ–ª—è
    await login_via_button(message, db)


@router.message(Command("join"))
async def join_with_invite(message: Message, db: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join <token>
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –ø–æ —Ç–æ–∫–µ–Ω—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    """
    lang = message.from_user.language_code or "ru"
    telegram_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not InviteRateLimiter.is_allowed(telegram_id):
            remaining_minutes = InviteRateLimiter.get_remaining_time(telegram_id) // 60
            await message.answer(
                get_text("invites.rate_limited", language=lang, minutes=remaining_minutes)
            )
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω rate limit –¥–ª—è /join –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        text_parts = message.text.split(maxsplit=1)
        if len(text_parts) < 2:
            await message.answer(
                get_text("invites.usage_help", language=lang),
                parse_mode="Markdown"
            )
            return
        
        token = text_parts[1].strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        invite_service = InviteService(db)
        
        try:
            invite_data = invite_service.validate_invite(token)
        except ValueError as e:
            error_msg = str(e).lower()
            if "expired" in error_msg:
                await message.answer(get_text("invites.expired_token", language=lang))
            elif "already used" in error_msg:
                await message.answer(get_text("invites.used_token", language=lang))
            else:
                await message.answer(get_text("invites.invalid_token", language=lang))
            
            logger.info(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç {telegram_id}: {e}")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        auth_service = AuthService(db)
        
        user = await auth_service.process_invite_join(
            telegram_id=telegram_id,
            invite_data=invite_data,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –û—Ç–º–µ—á–∞–µ–º nonce –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        invite_service.mark_nonce_used(
            invite_data["nonce"], 
            telegram_id, 
            invite_data
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        role = invite_data["role"]
        role_name = get_text(f"roles.{role}", language=lang)
        
        success_message = get_text(
            "invites.success_joined", 
            language=lang, 
            role=role_name
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if role == "executor" and invite_data.get("specialization"):
            specializations = invite_data["specialization"].split(",")
            spec_names = [get_text(f"specializations.{spec.strip()}", language=lang) for spec in specializations]
            success_message += f"\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        roles = []
        if user.roles:
            try:
                roles = json.loads(user.roles)
            except json.JSONDecodeError:
                roles = [role]  # fallback
        else:
            roles = [role]
        
        active_role = user.active_role or role
        
        await message.answer(
            success_message,
            reply_markup=get_main_keyboard_for_role(active_role, roles)
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç—É —Å —Ä–æ–ª—å—é {role}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /join –æ—Ç {telegram_id}: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )


