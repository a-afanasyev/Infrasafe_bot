from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from ..states.registration import RegistrationStates

from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.invite_service import InviteService, InviteRateLimiter
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.keyboards.base import get_main_keyboard, get_cancel_keyboard, get_main_keyboard_for_role
import logging
import json

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "üîë –í–æ–π—Ç–∏")
async def login_via_button(message: Message, db: Session, user_status: str = None):
    auth = AuthService(db)
    user = await auth.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    if user.status == "approved":
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user.status))
        return
    ok = await auth.approve_user(message.from_user.id, role="applicant")
    if ok:
        await message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∑–∞—è–≤–∏—Ç–µ–ª—å.",
            reply_markup=get_main_keyboard_for_role("applicant", ["applicant"], user.status),
        )
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(F.text == "/login")
async def login_command(message: Message, db: Session):
    # –ê–Ω–∞–ª–æ–≥ –∫–Ω–æ–ø–∫–∏ ‚Äî –æ–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞—è–≤–∏—Ç–µ–ª—è
    await login_via_button(message, db)


@router.message(Command("join"))
async def join_with_invite(message: Message, state: FSMContext, db: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /join <token>
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
    """
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /join –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    lang = message.from_user.language_code or "ru"
    telegram_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not await InviteRateLimiter.is_allowed(telegram_id):
            remaining_minutes = await InviteRateLimiter.get_remaining_time(telegram_id) // 60
            await message.answer(
                get_text("invites.rate_limited", language=lang, minutes=remaining_minutes)
            )
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω rate limit –¥–ª—è /join –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        text_parts = message.text.split(maxsplit=1)
        if len(text_parts) < 2:
            await message.answer(
                get_text("invites.usage_help", language=lang),
                parse_mode="Markdown"
            )
            return
        
        token = text_parts[1].strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        invite_service = InviteService(db)
        
        try:
            invite_data = invite_service.validate_invite(token)
        except ValueError as e:
            error_msg = str(e).lower()
            if "expired" in error_msg:
                await message.answer(get_text("invites.expired_token", language=lang))
            elif "already used" in error_msg:
                await message.answer(get_text("invites.used_token", language=lang))
            else:
                await message.answer(get_text("invites.invalid_token", language=lang))
            
            logger.info(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç {telegram_id}: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        auth_service = AuthService(db)
        existing_user = await auth_service.get_user_by_telegram_id(telegram_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {existing_user.status if existing_user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if existing_user.status == "approved":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
                await message.answer(
                    get_text("invites.already_registered", language=lang)
                )
                return
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ç–∞—Ç—É—Å–µ pending, –∑–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            elif existing_user.status == "pending":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
                await message.answer(
                    "üìã –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                return
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (blocked –∏ —Ç.–¥.) —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {existing_user.status}, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        role = invite_data["role"]
        role_name = get_text(f"roles.{role}", language=lang)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        invite_info = get_text("invites.registration_started", language=lang).format(
            role=role_name
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if role == "executor" and invite_data.get("specialization"):
            specializations = invite_data["specialization"].split(",")
            spec_names = [get_text(f"specializations.{spec.strip()}", language=lang) for spec in specializations]
            invite_info += f"\n\nüõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        import hashlib
        token_hash = hashlib.md5(token.encode()).hexdigest()[:16]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            invite_token=token,
            invite_role=role,
            invite_specialization=invite_data.get("specialization", ""),
            token_hash=token_hash
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –§–ò–û
        from ..states.registration import RegistrationStates
        await state.set_state(RegistrationStates.waiting_for_full_name)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_full_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        current_state = await state.get_state()
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {current_state}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –§–ò–û
        await message.answer(
            f"{invite_info}\n\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Ç–æ–∫–µ–Ω–æ–º {token}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /join –æ—Ç {telegram_id}: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

@router.message(RegistrationStates.waiting_for_full_name)
async def handle_full_name_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–ò–û –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {current_state}")
    
    lang = message.from_user.language_code or "ru"
    
    try:
        full_name = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
        if len(full_name.split()) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
        await state.update_data(full_name=full_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–ª–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        data = await state.get_data()
        role = data.get("invite_role")
        specialization = data.get("invite_specialization", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        role_name = get_text(f"roles.{role}", language=lang)
        confirmation_text = f"‚úÖ –§–ò–û: {full_name}\n\n"
        confirmation_text += f"üéØ –†–æ–ª—å: {role_name}\n"
        
        if role == "executor" and specialization:
            specializations = specialization.split(",")
            spec_names = [get_text(f"specializations.{spec.strip()}", language=lang) for spec in specializations]
            confirmation_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}\n"
        
        confirmation_text += "\nüìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_position"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_registration"
            )]
        ])
        
        await message.answer(confirmation_text, reply_markup=keyboard)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(RegistrationStates.waiting_for_phone)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(RegistrationStates.waiting_for_phone)
async def handle_phone_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    lang = message.from_user.language_code or "ru"
    
    try:
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
        if not phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '').isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67):")
            return
        
        phone_clean = phone.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
        if len(phone_clean) < 10:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        await state.update_data(phone=phone)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        full_name = data.get("full_name")
        role = data.get("invite_role")
        specialization = data.get("invite_specialization", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        role_name = get_text(f"roles.{role}", language=lang)
        confirmation_text = f"‚úÖ –§–ò–û: {full_name}\n"
        confirmation_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        confirmation_text += f"üéØ –†–æ–ª—å: {role_name}\n"
        
        if role == "executor" and specialization:
            specializations = specialization.split(",")
            spec_names = [get_text(f"specializations.{spec.strip()}", language=lang) for spec in specializations]
            confirmation_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}\n"
        
        confirmation_text += "\nüìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data="confirm_position"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_registration"
            )]
        ])
        
        await message.answer(confirmation_text, reply_markup=keyboard)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(RegistrationStates.waiting_for_position_confirmation)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.callback_query(F.data == "confirm_position")
async def handle_position_confirmation(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    lang = callback.from_user.language_code or "ru"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        full_name = data.get("full_name")
        phone = data.get("phone")
        token = data.get("invite_token")
        role = data.get("invite_role")
        specialization = data.get("invite_specialization", "")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService(db)
        user = await auth_service.get_or_create_user(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name,
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –†–∞–∑–±–∏–≤–∞–µ–º full_name –Ω–∞ first_name –∏ last_name
        name_parts = full_name.split()
        user.first_name = name_parts[0] if name_parts else ""
        user.last_name = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""
        user.phone = phone
        user.role = role
        user.status = "pending"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if role == "executor" and specialization:
            user.specialization = specialization
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        from ..keyboards.admin import get_user_approval_keyboard
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
        admin_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n"
        admin_message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        admin_message += f"üÜî Telegram ID: {callback.from_user.id}\n"
        admin_message += f"üéØ –†–æ–ª—å: {get_text(f'roles.{role}', language='ru')}\n"
        
        if role == "executor" and specialization:
            specializations = specialization.split(",")
            spec_names = [get_text(f"specializations.{spec.strip()}", language='ru') for spec in specializations]
            admin_message += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}\n"
        
        admin_message += f"üìÖ –î–∞—Ç–∞: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admin_users = await auth_service.get_users_by_role("admin")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin in admin_users:
            try:
                keyboard = get_user_approval_keyboard(user.id)
                await callback.bot.send_message(
                    admin.telegram_id,
                    admin_message,
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.telegram_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üéØ –†–æ–ª—å: {get_text(f'roles.{role}', language=lang)}\n\n"
            f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@router.callback_query(F.data == "cancel_registration")
async def handle_registration_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


