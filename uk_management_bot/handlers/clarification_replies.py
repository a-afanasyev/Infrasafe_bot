from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import Session
import re
import logging

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.user import User
from uk_management_bot.services.notification_service import NotificationService
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

class ReplyStates(StatesGroup):
    waiting_for_reply_text = State()

@router.message(F.text.startswith("/reply_"))
async def handle_reply_command(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split("_")
        if len(command_parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply_<–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
            return
        
        try:
            request_id = int(command_parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.id == request_id).first()
        if not request:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–º
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.id != request.user_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        if request.status != "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(request_id=request_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        await message.answer(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:\n\n"
            f"üìã –ó–∞—è–≤–∫–∞: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            reply_markup=None
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(ReplyStates.waiting_for_reply_text)
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(ReplyStates.waiting_for_reply_text)
async def handle_reply_text(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        request_id = data.get("request_id")
        
        if not request_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.id == request_id).first()
        if not request:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.id != request.user_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        reply_text = message.text.strip()
        
        if not reply_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∑–∞—è–≤–∏—Ç–µ–ª—è
        applicant_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not applicant_name:
            applicant_name = f"–ó–∞—è–≤–∏—Ç–µ–ª—å {user.telegram_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        new_note = f"\n\n--- –û–¢–í–ï–¢ {timestamp} ---\n"
        new_note += f"üë§ {applicant_name}:\n"
        new_note += f"{reply_text}\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if request.notes:
            request.notes += new_note
        else:
            request.notes = new_note
        
        request.updated_at = datetime.now()
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        try:
            notification_service = NotificationService(db)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            managers = db.query(User).filter(
                User.roles.contains('manager') | User.roles.contains('admin')
            ).all()
            
            notification_text = f"üí¨ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request.id}:\n\n"
            notification_text += f"üìã –ó–∞—è–≤–∫–∞: {request.category}\n"
            notification_text += f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            notification_text += f"üë§ –û—Ç–≤–µ—Ç –æ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—è:\n{reply_text}"
            
            for manager in managers:
                try:
                    notification_service.send_notification_to_user(
                        user_id=manager.id,
                        message=notification_text
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager.id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n"
            f"üí¨ –í–∞—à –æ—Ç–≤–µ—Ç: {reply_text[:100]}{'...' if len(reply_text) > 100 else ''}\n\n"
            f"üì± –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ {request_id} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
        await state.clear()
