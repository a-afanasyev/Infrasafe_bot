"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–ú–æ–∏ —Å–º–µ–Ω—ã"
"""

from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.shift import Shift
from uk_management_bot.database.models.shift_transfer import ShiftTransfer
from uk_management_bot.database.models.user import User
from uk_management_bot.keyboards.my_shifts import (
    get_my_shifts_menu,
    get_shift_list_keyboard,
    get_shift_actions_keyboard,
    get_shift_filter_keyboard
)
from uk_management_bot.keyboards.shift_transfer import (
    shift_selection_keyboard,
    transfers_list_keyboard
)
from uk_management_bot.states.my_shifts import MyShiftsStates
from uk_management_bot.middlewares.auth import require_role
from uk_management_bot.utils.helpers import get_user_language, format_datetime
from sqlalchemy import and_, func, or_
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("my_shifts"))
@require_role(['executor'])
async def cmd_my_shifts(message: Message, state: FSMContext, db=None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–∏—Ö —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        
        await message.answer(
            "üë§ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–º–µ–Ω–∞–º–∏:",
            reply_markup=get_my_shifts_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.main_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /my_shifts: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–∏—Ö —Å–º–µ–Ω")
    finally:
        if db:
            db.close()


@router.message(F.text == "üìã –ú–æ–∏ —Å–º–µ–Ω—ã")
@require_role(['executor'])
async def handle_my_shifts_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–º–µ–Ω—ã'"""
    await cmd_my_shifts(message, state)


@router.callback_query(F.data == "view_current_shifts")
@require_role(['executor'])
async def handle_current_shifts(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–º–µ–Ω"""
    try:
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        current_shifts = db.query(Shift).filter(
            and_(
                Shift.user_id == user_id,
                func.date(Shift.planned_start_time).in_([today, tomorrow]),
                Shift.status.in_(['planned', 'active'])
            )
        ).order_by(Shift.planned_start_time).all()
        
        if not current_shifts:
            await callback.message.edit_text(
                "üìÖ <b>–¢–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–º–µ–Ω.",
                reply_markup=get_my_shifts_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω
        shifts_text = "üìÖ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
        
        for shift in current_shifts:
            shift_date = shift.planned_start_time.date()
            is_today = shift_date == today
            date_prefix = "üî• –°–µ–≥–æ–¥–Ω—è" if is_today else "üìÖ –ó–∞–≤—Ç—Ä–∞"
            
            start_time = shift.planned_start_time.strftime("%H:%M")
            end_time = shift.planned_end_time.strftime("%H:%M") if shift.planned_end_time else "?"
            
            status_emoji = {
                'planned': '‚è±Ô∏è',
                'active': 'üî¥',
                'completed': '‚úÖ'
            }.get(shift.status, '‚ö™')
            
            specializations = ""
            if shift.specialization_focus:
                specializations = f"üîß {', '.join(shift.specialization_focus[:2])}"
                if len(shift.specialization_focus) > 2:
                    specializations += f" (+{len(shift.specialization_focus)-2})"
            
            geographic_zone = ""
            if shift.geographic_zone:
                geographic_zone = f"üó∫Ô∏è {shift.geographic_zone}"
            
            shifts_text += (
                f"{status_emoji} <b>{date_prefix}</b>\n"
                f"‚è∞ {start_time} - {end_time}\n"
            )
            
            if specializations:
                shifts_text += f"{specializations}\n"
            if geographic_zone:
                shifts_text += f"{geographic_zone}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
            if shift.max_requests:
                current_requests = shift.current_request_count or 0
                shifts_text += f"üìã –ó–∞—è–≤–∫–∏: {current_requests}/{shift.max_requests}\n"
            
            shifts_text += "\n"
        
        await callback.message.edit_text(
            shifts_text,
            reply_markup=get_shift_list_keyboard(current_shifts, lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.viewing_shifts)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Å–º–µ–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "view_week_schedule")
@require_role(['executor'])
async def handle_week_schedule(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        today = date.today()
        start_of_week = today - timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        end_of_week = start_of_week + timedelta(days=6)  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        week_shifts = db.query(Shift).filter(
            and_(
                Shift.user_id == user_id,
                func.date(Shift.planned_start_time) >= start_of_week,
                func.date(Shift.planned_start_time) <= end_of_week,
                Shift.status.in_(['planned', 'active', 'completed'])
            )
        ).order_by(Shift.planned_start_time).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        days_of_week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        week_schedule = {day: [] for day in days_of_week}
        
        for shift in week_shifts:
            day_name = days_of_week[shift.planned_start_time.weekday()]
            week_schedule[day_name].append(shift)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_text = (
            f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
            f"<b>–ü–µ—Ä–∏–æ–¥:</b> {start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m.%Y')}\n\n"
        )
        
        total_shifts = len(week_shifts)
        total_hours = 0
        
        for day_name, day_shifts in week_schedule.items():
            day_date = start_of_week + timedelta(days=days_of_week.index(day_name))
            is_today = day_date == today
            day_prefix = "üî•" if is_today else "üìÖ"
            
            if day_shifts:
                schedule_text += f"{day_prefix} <b>{day_name}</b> ({day_date.strftime('%d.%m')})\n"
                
                for shift in day_shifts:
                    start_time = shift.planned_start_time.strftime("%H:%M")
                    end_time = shift.planned_end_time.strftime("%H:%M") if shift.planned_end_time else "?"
                    
                    status_emoji = {
                        'planned': '‚è±Ô∏è',
                        'active': 'üî¥',
                        'completed': '‚úÖ'
                    }.get(shift.status, '‚ö™')
                    
                    duration = ""
                    if shift.planned_start_time and shift.planned_end_time:
                        hours = (shift.planned_end_time - shift.planned_start_time).total_seconds() / 3600
                        total_hours += hours
                        duration = f" ({hours:.0f}—á)"
                    
                    schedule_text += f"  {status_emoji} {start_time}-{end_time}{duration}\n"
                
                schedule_text += "\n"
            else:
                schedule_text += f"üìÖ <b>{day_name}</b> ({day_date.strftime('%d.%m')}): –í—ã—Ö–æ–¥–Ω–æ–π\n\n"
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        schedule_text += (
            f"üìä <b>–ò—Ç–æ–≥–æ:</b>\n"
            f"‚Ä¢ –°–º–µ–Ω: {total_shifts}\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤: {total_hours:.1f}\n"
        )
        
        await callback.message.edit_text(
            schedule_text,
            reply_markup=get_my_shifts_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.main_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("shift_details:"))
@require_role(['executor'])
async def handle_shift_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ"""
    try:
        shift_id = int(callback.data.split(':')[1])
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É
        shift = db.query(Shift).filter(
            and_(
                Shift.id == shift_id,
                Shift.user_id == user_id
            )
        ).first()
        
        if not shift:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        shift_date = shift.planned_start_time.date()
        is_today = shift_date == date.today()
        is_tomorrow = shift_date == date.today() + timedelta(days=1)
        
        date_text = "üî• –°–µ–≥–æ–¥–Ω—è" if is_today else "üìÖ –ó–∞–≤—Ç—Ä–∞" if is_tomorrow else shift_date.strftime('%d.%m.%Y')
        
        start_time = shift.planned_start_time.strftime("%H:%M")
        end_time = shift.planned_end_time.strftime("%H:%M") if shift.planned_end_time else "?"
        
        status_text = {
            'planned': '‚è±Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
            'active': 'üî¥ –ê–∫—Ç–∏–≤–Ω–∞',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
        }.get(shift.status, '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        details_text = (
            f"üìã <b>–î–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {date_text}\n"
            f"<b>–í—Ä–µ–º—è:</b> {start_time} - {end_time}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
        )
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if shift.planned_start_time and shift.planned_end_time:
            duration = (shift.planned_end_time - shift.planned_start_time).total_seconds() / 3600
            details_text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration:.1f} —á–∞—Å–æ–≤\n"
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if shift.specialization_focus:
            specializations = ', '.join(shift.specialization_focus)
            details_text += f"<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {specializations}\n"
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞
        if shift.geographic_zone:
            details_text += f"<b>–ó–æ–Ω–∞:</b> {shift.geographic_zone}\n"
        
        # –û–±–ª–∞—Å—Ç–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
        if shift.coverage_areas:
            coverage = ', '.join(shift.coverage_areas)
            details_text += f"<b>–û–±–ª–∞—Å—Ç–∏:</b> {coverage}\n"
        
        details_text += "\n"
        
        # –ó–∞—è–≤–∫–∏
        current_requests = shift.current_request_count or 0
        max_requests = shift.max_requests or 0
        
        if max_requests > 0:
            details_text += f"<b>üìã –ó–∞—è–≤–∫–∏:</b> {current_requests}/{max_requests}\n"
            
            if current_requests > 0:
                progress = (current_requests / max_requests) * 100
                progress_bar = "üü©" * int(progress // 20) + "‚¨ú" * (5 - int(progress // 20))
                details_text += f"–ó–∞–≥—Ä—É–∑–∫–∞: {progress_bar} {progress:.0f}%\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if shift.completed_requests:
            details_text += f"<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫:</b> {shift.completed_requests}\n"
        
        if shift.average_completion_time:
            avg_time = shift.average_completion_time
            details_text += f"<b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</b> {avg_time:.1f} –º–∏–Ω\n"
        
        if shift.efficiency_score:
            score = shift.efficiency_score
            details_text += f"<b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {score:.1f}%\n"
        
        # –ó–∞–º–µ—Ç–∫–∏
        if shift.notes:
            details_text += f"\n<b>–ó–∞–º–µ—Ç–∫–∏:</b>\n{shift.notes}"
        
        await callback.message.edit_text(
            details_text,
            reply_markup=get_shift_actions_keyboard(shift, lang),
            parse_mode="HTML"
        )
        
        await state.update_data(current_shift_id=shift_id)
        await state.set_state(MyShiftsStates.viewing_shift_details)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "start_shift")
@require_role(['executor'])
async def handle_start_shift(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"""
    try:
        data = await state.get_data()
        shift_id = data.get('current_shift_id')
        
        if not shift_id:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
            return
        
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É
        shift = db.query(Shift).filter(
            and_(
                Shift.id == shift_id,
                Shift.user_id == user_id,
                Shift.status == 'planned'
            )
        ).first()
        
        if not shift:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞", show_alert=True)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–º–µ–Ω—É
        shift.status = 'active'
        shift.start_time = datetime.now()
        db.commit()
        
        await callback.message.edit_text(
            "‚úÖ <b>–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%H:%M')}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=get_shift_actions_keyboard(shift, lang),
            parse_mode="HTML"
        )
        
        await callback.answer("–°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "end_shift")
@require_role(['executor'])
async def handle_end_shift(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"""
    try:
        data = await state.get_data()
        shift_id = data.get('current_shift_id')
        
        if not shift_id:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
            return
        
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ–Ω—É
        shift = db.query(Shift).filter(
            and_(
                Shift.id == shift_id,
                Shift.user_id == user_id,
                Shift.status == 'active'
            )
        ).first()
        
        if not shift:
            await callback.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", show_alert=True)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        end_time = datetime.now()
        shift.status = 'completed'
        shift.end_time = end_time
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if shift.start_time:
            actual_duration = (end_time - shift.start_time).total_seconds() / 3600
        else:
            actual_duration = 0
        
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏ —Å–º–µ–Ω—ã
        summary_text = (
            "‚úÖ <b>–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time.strftime('%H:%M')}\n"
        )
        
        if shift.start_time:
            summary_text += f"‚è±Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {actual_duration:.1f} —á\n"
        
        if shift.current_request_count:
            summary_text += f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {shift.current_request_count}\n"
        
        summary_text += (
            f"\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! üëç\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ."
        )
        
        await callback.message.edit_text(
            summary_text,
            reply_markup=get_my_shifts_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.main_menu)
        await callback.answer("–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "shift_history")
@require_role(['executor'])
async def handle_shift_history(callback: CallbackQuery, state: FSMContext):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω"""
    try:
        db = next(get_db())
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = date.today()
        start_date = end_date - timedelta(days=30)
        
        history_shifts = db.query(Shift).filter(
            and_(
                Shift.user_id == user_id,
                func.date(Shift.planned_start_time) >= start_date,
                func.date(Shift.planned_start_time) <= end_date,
                Shift.status.in_(['completed', 'cancelled'])
            )
        ).order_by(Shift.planned_start_time.desc()).limit(20).all()
        
        if not history_shifts:
            await callback.message.edit_text(
                "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω</b>\n\n"
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω.",
                reply_markup=get_my_shifts_menu(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        completed_shifts = [s for s in history_shifts if s.status == 'completed']
        cancelled_shifts = [s for s in history_shifts if s.status == 'cancelled']
        
        total_hours = 0
        total_requests = 0
        
        for shift in completed_shifts:
            if shift.start_time and shift.end_time:
                hours = (shift.end_time - shift.start_time).total_seconds() / 3600
                total_hours += hours
            
            if shift.completed_requests:
                total_requests += shift.completed_requests
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
        history_text = (
            f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω</b> (30 –¥–Ω–µ–π)\n\n"
            f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–º–µ–Ω: {len(completed_shifts)}\n"
            f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ —Å–º–µ–Ω: {len(cancelled_shifts)}\n"
            f"‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {total_hours:.1f}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_requests}\n\n"
            f"<b>üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–º–µ–Ω—ã:</b>\n"
        )
        
        for shift in history_shifts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            shift_date = shift.planned_start_time.strftime('%d.%m')
            start_time = shift.planned_start_time.strftime('%H:%M')
            
            status_emoji = {
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(shift.status, '‚ö™')
            
            duration = ""
            if shift.start_time and shift.end_time:
                hours = (shift.end_time - shift.start_time).total_seconds() / 3600
                duration = f" ({hours:.1f}—á)"
            
            requests = ""
            if shift.completed_requests:
                requests = f" ‚Ä¢ {shift.completed_requests} –∑–∞—è–≤–æ–∫"
            
            history_text += f"{status_emoji} {shift_date} {start_time}{duration}{requests}\n"
        
        if len(history_shifts) > 10:
            history_text += f"\n... –∏ –µ—â–µ {len(history_shifts) - 10} —Å–º–µ–Ω"
        
        await callback.message.edit_text(
            history_text,
            reply_markup=get_my_shifts_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.main_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_my_shifts")
async def handle_back_to_my_shifts(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –º–æ–∏—Ö —Å–º–µ–Ω"""
    try:
        lang = await get_user_language(callback.from_user.id)
        
        await callback.message.edit_text(
            "üë§ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å–º–µ–Ω–∞–º–∏:",
            reply_markup=get_my_shifts_menu(lang),
            parse_mode="HTML"
        )
        
        await state.set_state(MyShiftsStates.main_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–æ–∏–º —Å–º–µ–Ω–∞–º: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ========== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–ï–†–ï–î–ê–ß–ï–ô –°–ú–ï–ù ==========

@router.callback_query(F.data == "shift_transfer_menu")
async def handle_shift_transfer_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω"""
    try:
        user_lang = await get_user_language(callback.from_user.id)

        with get_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
            if not user:
                error_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if user_lang == "ru" else "Foydalanuvchi topilmadi"
                await callback.answer(error_text, show_alert=True)
                return

            active_shifts = db.query(Shift).filter(
                Shift.user_id == user.telegram_id,
                Shift.status.in_(['planned', 'active']),
                Shift.start_time >= datetime.now()
            ).order_by(Shift.start_time).limit(10).all()

            # –ü–æ–ª—É—á–∞–µ–º –º–æ–∏ –ø–µ—Ä–µ–¥–∞—á–∏
            my_transfers = db.query(ShiftTransfer).filter(
                or_(
                    ShiftTransfer.from_executor_id == user.telegram_id,
                    ShiftTransfer.to_executor_id == user.telegram_id
                )
            ).order_by(ShiftTransfer.created_at.desc()).limit(5).all()

            if user_lang == "ru":
                menu_text = f"""
üîÑ <b>–ú–µ–Ω—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {len(active_shifts)}
‚Ä¢ –í–∞—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á: {len(my_transfers)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            else:
                menu_text = f"""
üîÑ <b>Smena o'tkazish menyusi</b>

üìä <b>Holat:</b>
‚Ä¢ Faol smenalar: {len(active_shifts)}
‚Ä¢ Sizning o'tkazishlaringiz: {len(my_transfers)}

Amalni tanlang:
"""

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–µ—Ä–µ–¥–∞—á
            keyboard = []

            if active_shifts:
                transfer_text = "üì§ –ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É" if user_lang == "ru" else "üì§ Smenani o'tkazish"
                keyboard.append([InlineKeyboardButton(
                    text=transfer_text,
                    callback_data="initiate_transfer"
                )])

            if my_transfers:
                view_text = "üìã –ú–æ–∏ –ø–µ—Ä–µ–¥–∞—á–∏" if user_lang == "ru" else "üìã Mening o'tkazishlarim"
                keyboard.append([InlineKeyboardButton(
                    text=view_text,
                    callback_data="view_my_transfers"
                )])

            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            back_text = "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "üîô Menyuga qaytish"
            keyboard.append([InlineKeyboardButton(
                text=back_text,
                callback_data="back_to_my_shifts"
            )])

            await callback.message.edit_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω: {e}")
        error_text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é" if user_lang == "ru" else "Menyuni yuklashda xatolik"
        await callback.answer(error_text, show_alert=True)


@router.callback_query(F.data == "initiate_transfer")
async def handle_initiate_transfer(callback: CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ —Å–º–µ–Ω—ã'"""
    try:
        user_lang = await get_user_language(callback.from_user.id)

        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_shifts = db.query(Shift).filter(
                Shift.user_id == user.telegram_id,
                Shift.status.in_(['planned', 'active']),
                Shift.start_time >= datetime.now()
            ).order_by(Shift.start_time).limit(10).all()

            if not active_shifts:
                no_shifts_text = (
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏" if user_lang == "ru"
                    else "Sizda o'tkazish uchun faol smenalar yo'q"
                )
                await callback.answer(no_shifts_text, show_alert=True)
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
            select_text = (
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:" if user_lang == "ru"
                else "O'tkazish uchun smenani tanlang:"
            )

            await callback.message.edit_text(
                select_text,
                reply_markup=shift_selection_keyboard(active_shifts, user_lang)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏: {e}")
        error_text = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏" if user_lang == "ru" else "O'tkazishni boshlashda xatolik"
        await callback.answer(error_text, show_alert=True)


@router.callback_query(F.data == "view_my_transfers")
async def handle_view_my_transfers(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_lang = await get_user_language(callback.from_user.id)

        with get_db() as db:
            user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            my_transfers = db.query(ShiftTransfer).filter(
                or_(
                    ShiftTransfer.from_executor_id == user.telegram_id,
                    ShiftTransfer.to_executor_id == user.telegram_id
                )
            ).order_by(ShiftTransfer.created_at.desc()).limit(10).all()

            if not my_transfers:
                no_transfers_text = (
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞—á" if user_lang == "ru"
                    else "Sizda o'tkazishlar yo'q"
                )
                await callback.answer(no_transfers_text, show_alert=True)
                return

            view_text = "–í–∞—à–∏ –ø–µ—Ä–µ–¥–∞—á–∏:" if user_lang == "ru" else "Sizning o'tkazishlaringiz:"

            await callback.message.edit_text(
                view_text,
                reply_markup=transfers_list_keyboard(my_transfers, user_lang)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥–∞—á: {e}")
        error_text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥–∞—á" if user_lang == "ru" else "O'tkazishlarni yuklashda xatolik"
        await callback.answer(error_text, show_alert=True)