"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.user import User
from uk_management_bot.services.specialization_planning_service import SpecializationPlanningService
from uk_management_bot.services.shift_transfer_service import ShiftTransferService
from uk_management_bot.keyboards.quarterly_planning import (
    get_quarterly_planning_menu,
    get_specialization_selection_keyboard,
    get_quarter_selection_keyboard,
    get_planning_confirmation_keyboard,
    get_planning_results_keyboard
)
from uk_management_bot.middlewares.auth import require_role
from uk_management_bot.utils.helpers import get_user_language
import logging

logger = logging.getLogger(__name__)
router = Router()


class QuarterlyPlanningStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    selecting_quarter = State()
    selecting_specializations = State()
    confirming_plan = State()
    viewing_results = State()


@router.message(Command("quarterly_planning"))
@require_role(['admin', 'manager'])
async def cmd_quarterly_planning(message: Message, state: FSMContext, db=None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        
        lang = get_user_language(message.from_user.id, db)
        
        await message.answer(
            "üóìÔ∏è **–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_quarterly_planning_menu(lang),
            parse_mode="Markdown"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")


@router.callback_query(F.data == "quarterly_plan_create")
async def start_quarterly_planning(callback: CallbackQuery, state: FSMContext, db=None):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        if not db:
            db = next(get_db())
        
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∞–ª–∞
        await state.set_state(QuarterlyPlanningStates.selecting_quarter)
        
        await callback.message.edit_text(
            "üìÖ **–í—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_quarter_selection_keyboard(lang),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("quarter_"), StateFilter(QuarterlyPlanningStates.selecting_quarter))
async def select_quarter(callback: CallbackQuery, state: FSMContext, db=None):
    """–í—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        
        quarter_data = callback.data.replace("quarter_", "")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∞–ª–∞
        if quarter_data == "current":
            start_date = self._get_current_quarter_start()
            quarter_name = "–¢–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª"
        elif quarter_data == "next":
            start_date = self._get_next_quarter_start()
            quarter_name = "–°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª"
        elif quarter_data.startswith("custom_"):
            # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            start_date = self._parse_custom_date(quarter_data)
            quarter_name = f"–ö–≤–∞—Ä—Ç–∞–ª —Å {start_date.strftime('%d.%m.%Y')}"
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        await state.update_data(
            start_date=start_date.isoformat(),
            quarter_name=quarter_name
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        await state.set_state(QuarterlyPlanningStates.selecting_specializations)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        planning_service = SpecializationPlanningService(db)
        configs = planning_service.get_specialization_configs()
        
        await callback.message.edit_text(
            f"üë• **–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π**\n\n"
            f"–ü–µ—Ä–∏–æ–¥: {quarter_name}\n"
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"(–î–æ—Å—Ç—É–ø–Ω–æ {len(configs)} —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π)",
            reply_markup=get_specialization_selection_keyboard(list(configs.keys())),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–≤–∞—Ä—Ç–∞–ª–∞", show_alert=True)


@router.callback_query(F.data.startswith("spec_"), StateFilter(QuarterlyPlanningStates.selecting_specializations))
async def toggle_specialization(callback: CallbackQuery, state: FSMContext, db=None):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        if not db:
            db = next(get_db())
        
        specialization = callback.data.replace("spec_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        data = await state.get_data()
        selected_specs = data.get("selected_specializations", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if specialization in selected_specs:
            selected_specs.remove(specialization)
        else:
            selected_specs.append(specialization)
        
        await state.update_data(selected_specializations=selected_specs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        planning_service = SpecializationPlanningService(db)
        configs = planning_service.get_specialization_configs()
        
        await callback.message.edit_reply_markup(
            reply_markup=get_specialization_selection_keyboard(
                list(configs.keys()), 
                selected=selected_specs
            )
        )
        
        await callback.answer(f"‚úÖ {specialization}: {'–≤—ã–±—Ä–∞–Ω–æ' if specialization in selected_specs else '–æ—Ç–º–µ–Ω–µ–Ω–æ'}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "spec_confirm", StateFilter(QuarterlyPlanningStates.selecting_specializations))
async def confirm_specializations(callback: CallbackQuery, state: FSMContext, db=None):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    try:
        if not db:
            db = next(get_db())
        
        data = await state.get_data()
        selected_specs = data.get("selected_specializations", [])
        
        if not selected_specs:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", show_alert=True)
            return
        
        start_date = date.fromisoformat(data["start_date"])
        quarter_name = data["quarter_name"]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        planning_service = SpecializationPlanningService(db)
        validation = planning_service.validate_quarterly_plan(start_date, selected_specs)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        summary = f"üìã **–°–≤–æ–¥–∫–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        summary += f"**–ü–µ—Ä–∏–æ–¥:** {quarter_name}\n"
        summary += f"**–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {start_date.strftime('%d.%m.%Y')}\n"
        summary += f"**–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {(start_date + timedelta(days=91)).strftime('%d.%m.%Y')}\n"
        summary += f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:** {len(selected_specs)}\n\n"
        
        # –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        for spec in selected_specs:
            summary += f"‚Ä¢ {spec}\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation.get("warnings"):
            summary += f"\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in validation["warnings"]:
                summary += f"‚Ä¢ {warning}\n"
        
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation.get("errors"):
            summary += f"\n‚ùå **–û—à–∏–±–∫–∏:**\n"
            for error in validation["errors"]:
                summary += f"‚Ä¢ {error}\n"
            
            summary += f"\n‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫"
            
            await callback.message.edit_text(
                summary,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="spec_back")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="quarterly_cancel")]
                ]),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.set_state(QuarterlyPlanningStates.confirming_plan)
        
        await callback.message.edit_text(
            summary + "\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞?",
            reply_markup=get_planning_confirmation_keyboard(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "plan_execute", StateFilter(QuarterlyPlanningStates.confirming_plan))
async def execute_quarterly_plan(callback: CallbackQuery, state: FSMContext, db=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        
        data = await state.get_data()
        start_date = date.fromisoformat(data["start_date"])
        selected_specs = data["selected_specializations"]
        quarter_name = data["quarter_name"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await callback.message.edit_text(
            f"‚è≥ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...**\n\n"
            f"–ü–µ—Ä–∏–æ–¥: {quarter_name}\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {len(selected_specs)}\n\n"
            f"‚ö° –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        planning_service = SpecializationPlanningService(db)
        results = planning_service.create_quarterly_plan(start_date, selected_specs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await state.update_data(planning_results=results)
        await state.set_state(QuarterlyPlanningStates.viewing_results)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        report = f"‚úÖ **–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
        report += f"**–ü–µ—Ä–∏–æ–¥:** {start_date.strftime('%d.%m.%Y')} - {results['end_date'].strftime('%d.%m.%Y')}\n"
        report += f"**–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–º–µ–Ω:** {results['total_shifts_created']}\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
        report += f"**–î–µ—Ç–∞–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:**\n"
        for spec, info in results["specializations"].items():
            report += f"‚Ä¢ **{spec}**: {info['shifts_created']} —Å–º–µ–Ω\n"
            report += f"  –ì—Ä–∞—Ñ–∏–∫: {info['schedule_type']}\n"
            report += f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration_hours']}—á\n"
            if info["coverage_24_7"]:
                report += f"  üîÑ 24/7 –ø–æ–∫—Ä—ã—Ç–∏–µ\n"
            report += f"\n"
        
        # –û—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if results.get("errors"):
            report += f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for error in results["errors"]:
                report += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            report,
            reply_markup=get_planning_results_keyboard(),
            parse_mode="Markdown"
        )
        
        await callback.answer("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        logger.info(f"–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {results['total_shifts_created']} —Å–º–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="quarterly_menu")]
            ]),
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data == "view_statistics")
async def view_planning_statistics(callback: CallbackQuery, state: FSMContext, db=None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        if not db:
            db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –º–µ—Å—è—Ü–∞
        start_date = date.today()
        planning_service = SpecializationPlanningService(db)
        stats = planning_service.get_planning_statistics(start_date, days=91)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω**\n\n"
        report += f"**–ü–µ—Ä–∏–æ–¥:** {start_date.strftime('%d.%m.%Y')} - {(start_date + timedelta(days=91)).strftime('%d.%m.%Y')}\n"
        report += f"**–í—Å–µ–≥–æ —Å–º–µ–Ω:** {stats['total_shifts']}\n\n"
        
        if stats.get("by_specialization"):
            report += f"**–ü–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:**\n"
            for spec, count in sorted(stats["by_specialization"].items()):
                report += f"‚Ä¢ {spec}: {count} —Å–º–µ–Ω\n"
            report += f"\n"
        
        if stats.get("coverage_analysis"):
            report += f"**–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è 24/7:**\n"
            for spec, coverage in stats["coverage_analysis"].items():
                report += f"‚Ä¢ **{spec}**: {coverage['coverage_percentage']:.1f}%\n"
                if coverage.get("gaps"):
                    report += f"  –ü—Ä–æ–±–µ–ª–æ–≤: {len(coverage['gaps'])}\n"
                report += f"\n"
        
        if not stats["total_shifts"]:
            report += f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
            report += f"–°–æ–∑–¥–∞–π—Ç–µ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        
        await callback.message.edit_text(
            report,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="quarterly_menu")],
                [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="quarterly_plan_create")]
            ]),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "transfer_management")
async def transfer_management_menu(callback: CallbackQuery, state: FSMContext, db=None):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∞–º–∏ —Å–º–µ–Ω"""
    try:
        if not db:
            db = next(get_db())
        
        transfer_service = ShiftTransferService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥–∞—á
        stats = transfer_service.get_transfer_statistics()
        active_transfers = transfer_service.get_active_transfers()
        
        report = f"üîÑ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∞–º–∏ —Å–º–µ–Ω**\n\n"
        report += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:**\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–¥–∞—á: {stats.get('total_transfers', 0)}\n"
        report += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_transfers', 0)}\n"
        report += f"‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {stats.get('failed_transfers', 0)}\n"
        report += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('transfer_success_rate', 0):.1f}%\n\n"
        
        if active_transfers:
            report += f"**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏:** {len(active_transfers)}\n"
        else:
            report += f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á:** –Ω–µ—Ç\n"
        
        # –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–¥–∞—á
        required_transfers = transfer_service.auto_detect_required_transfers()
        if required_transfers:
            report += f"\n‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞:** {len(required_transfers)} —Å–º–µ–Ω\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á", callback_data="auto_initiate_transfers")],
            [InlineKeyboardButton(text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏", callback_data="view_active_transfers")],
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="transfer_detailed_stats")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="quarterly_menu")]
        ])
        
        await callback.message.edit_text(
            report,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∞–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "auto_initiate_transfers")
async def auto_initiate_transfers(callback: CallbackQuery, state: FSMContext, db=None):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á"""
    try:
        if not db:
            db = next(get_db())
        
        transfer_service = ShiftTransferService(db)
        
        await callback.message.edit_text(
            "‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á...\n\n"
            "üîç –ü–æ–∏—Å–∫ —Å–º–µ–Ω, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–µ—Ä–µ–¥–∞—á–∏...",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ü–∏—é
        initiated_transfers = transfer_service.auto_initiate_transfers()
        
        result = f"‚úÖ **–ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        result += f"**–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥–∞—á:** {len(initiated_transfers)}\n\n"
        
        if initiated_transfers:
            result += f"**–î–µ—Ç–∞–ª–∏:**\n"
            for transfer in initiated_transfers:
                result += f"‚Ä¢ –°–º–µ–Ω–∞ {transfer.outgoing_shift_id} ‚Üí {transfer.incoming_shift_id}\n"
                result += f"  –ó–∞—è–≤–æ–∫ –∫ –ø–µ—Ä–µ–¥–∞—á–µ: {transfer.total_requests}\n"
        else:
            result += f"‚ÑπÔ∏è –°–º–µ–Ω, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–µ—Ä–µ–¥–∞—á–∏, –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
            result += f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ."
        
        await callback.message.edit_text(
            result,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–µ–¥–∞—á–∞–º", callback_data="transfer_management")]
            ]),
            parse_mode="Markdown"
        )
        
        await callback.answer(f"‚úÖ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ {len(initiated_transfers)} –ø–µ—Ä–µ–¥–∞—á")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞—Ü–∏–∏", show_alert=True)


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

def _get_current_quarter_start() -> date:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞"""
    today = date.today()
    month = today.month
    
    if month <= 3:
        return date(today.year, 1, 1)
    elif month <= 6:
        return date(today.year, 4, 1)
    elif month <= 9:
        return date(today.year, 7, 1)
    else:
        return date(today.year, 10, 1)


def _get_next_quarter_start() -> date:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞"""
    current_start = _get_current_quarter_start()
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –º–µ—Å—è—Ü–∞
    if current_start.month == 1:
        return date(current_start.year, 4, 1)
    elif current_start.month == 4:
        return date(current_start.year, 7, 1)
    elif current_start.month == 7:
        return date(current_start.year, 10, 1)
    else:
        return date(current_start.year + 1, 1, 1)


def _parse_custom_date(quarter_data: str) -> date:
    """–ü–∞—Ä—Å–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–∞—Ç—É –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞—Ç
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
    return _get_next_quarter_start()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ –ò –í–û–ó–í–†–ê–¢–ê ==========

@router.callback_query(F.data == "quarterly_menu")
async def back_to_quarterly_menu(callback: CallbackQuery, state: FSMContext, db=None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await state.clear()
        await cmd_quarterly_planning(callback.message, state, db)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "quarterly_cancel")
async def cancel_quarterly_planning(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await state.clear()
        
        await callback.message.edit_text(
            "‚ùå **–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="quarterly_plan_create")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quarterly_menu")]
            ]),
            parse_mode="Markdown"
        )
        
        await callback.answer("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)