"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)

–í–∫–ª—é—á–∞–µ—Ç:
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
- –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è (—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –±–µ–∑ –∑–≤–µ–∑–¥)
- –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from datetime import datetime, timezone

from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.user import User
from uk_management_bot.keyboards.admin import get_manager_main_keyboard, get_manager_request_list_kb
from uk_management_bot.states.request_acceptance import ManagerAcceptanceStates
from uk_management_bot.services.auth_service import AuthService

import logging

router = Router()
logger = logging.getLogger(__name__)


def has_admin_access(roles: list = None, user: User = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if not roles and not user:
        return False
    if roles and ("admin" in roles or "manager" in roles):
        return True
    if user and (user.role in ["admin", "manager"]):
        return True
    return False


@router.callback_query(F.data.startswith("unaccepted_remind_"))
async def handle_remind_applicant(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞—è–≤–∏—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            return

        request_number = callback.data.replace("unaccepted_remind_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞
        if request.status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" or not request.manager_confirmed or request.is_returned:
            await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
        applicant = db.query(User).filter(User.id == request.user_id).first()

        if not applicant:
            await callback.answer("–ó–∞—è–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é
        completed_at = request.completed_at if request.completed_at else request.updated_at
        if completed_at:
            if completed_at.tzinfo is None:
                from datetime import timezone as dt_tz
                completed_at = completed_at.replace(tzinfo=dt_tz.utc)
            completed_str = completed_at.strftime('%d.%m.%Y %H:%M')
        else:
            completed_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        notification_text = (
            f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–∫–µ –∑–∞—è–≤–∫–∏</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{request.request_number}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_str}\n\n"
            f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.</b>\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏—ë–º–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏\"."
        )

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É",
                callback_data=f"view_completed_{request.request_number}"
            )]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é
        try:
            await callback.bot.send_message(
                chat_id=applicant.telegram_id,
                text=notification_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–∏—Ç–µ–ª—é", show_alert=True)

            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é {applicant.telegram_id} –æ –∑–∞—è–≤–∫–µ {request_number}")

        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—é: {send_error}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("unaccepted_accept_"))
async def handle_manager_accept_request(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            return

        request_number = callback.data.replace("unaccepted_accept_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞
        if request.status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" or not request.manager_confirmed or request.is_returned:
            await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(request_number=request_number)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await state.set_state(ManagerAcceptanceStates.awaiting_manager_acceptance_comment)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{request_number}\n\n"
            f"<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> (–ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è):\n\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ó–∞—è–≤–∏—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ–ª–µ–µ 3 –¥–Ω–µ–π\", \"–ó–∞—è–≤–∏—Ç–µ–ª—å –Ω–∞ —Å–≤—è–∑–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\" –∏ —Ç.–¥.</i>",
            parse_mode="HTML"
        )

        await callback.answer()

        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ {request_number} –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ManagerAcceptanceStates.awaiting_manager_acceptance_comment)
async def process_manager_acceptance_comment(message: Message, state: FSMContext, db: Session, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        request_number = data.get("request_number")

        if not request_number:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤—Å—ë –µ—â—ë –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞
        if request.status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" or not request.manager_confirmed or request.is_returned:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            await state.clear()
            return

        comment = message.text.strip()

        if len(comment) < 10:
            await message.answer(
                "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è:"
            )
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        request.status = "–ü—Ä–∏–Ω—è—Ç–æ"
        request.manager_confirmed = True
        request.manager_confirmed_by = user.id if user else None
        request.manager_confirmed_at = datetime.now(timezone.utc)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ë–ï–ó –∑–≤—ë–∑–¥)
        manager_comment = (
            f"\n\n--- –ü–†–ò–ù–Ø–¢–û –ú–ï–ù–ï–î–ñ–ï–†–û–ú {datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')} ---\n"
            f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {user.first_name or 'Unknown'} {user.last_name or ''}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –±–µ–∑ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è"
        )

        if request.manager_confirmation_notes:
            request.manager_confirmation_notes += manager_comment
        else:
            request.manager_confirmation_notes = manager_comment

        db.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—è
        applicant = db.query(User).filter(User.id == request.user_id).first()

        if applicant:
            try:
                await message.bot.send_message(
                    chat_id=applicant.telegram_id,
                    text=(
                        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
                        f"üìã –ó–∞—è–≤–∫–∞ #{request_number}\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
                        f"üìç –ê–¥—Ä–µ—Å: {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{comment}\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                    ),
                    parse_mode="HTML"
                )
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—é: {send_error}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        if request.executor_id:
            executor = db.query(User).filter(User.id == request.executor_id).first()
            if executor:
                try:
                    await message.bot.send_message(
                        chat_id=executor.telegram_id,
                        text=(
                            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>\n\n"
                            f"üìã –ó–∞—è–≤–∫–∞ #{request_number}\n"
                            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n\n"
                            f"–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
                        ),
                        parse_mode="HTML"
                    )
                except Exception as send_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {send_error}")

        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è.\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–∫–∏.",
            reply_markup=get_manager_main_keyboard(),
            parse_mode="HTML"
        )

        await state.clear()

        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user.id if user else 'Unknown'} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É {request_number} –∑–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {comment[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")
        await state.clear()


@router.callback_query(F.data == "unaccepted_back_to_list")
async def handle_back_to_unaccepted_list(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫
        q = (
            db.query(Request)
            .filter(
                Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
                Request.manager_confirmed == True,
                Request.is_returned == False
            )
            .order_by(
                Request.completed_at.desc().nullslast(),
                Request.updated_at.desc().nullslast(),
                Request.created_at.desc()
            )
        )
        requests = q.limit(20).all()

        if not requests:
            await callback.message.edit_text(
                "‚è≥ <b>–ù–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç</b>\n\n"
                "–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –∑–∞—è–≤–∏—Ç–µ–ª—è–º–∏.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        items = []
        now = datetime.now(timezone.utc)

        for r in requests:
            completed_at = r.completed_at if r.completed_at else r.updated_at
            if completed_at:
                if completed_at.tzinfo is None:
                    from datetime import timezone as dt_tz
                    completed_at = completed_at.replace(tzinfo=dt_tz.utc)

                waiting_time = now - completed_at
                days = waiting_time.days
                hours = waiting_time.seconds // 3600
                minutes = (waiting_time.seconds % 3600) // 60

                if days > 0:
                    time_str = f"{days}–¥ {hours}—á"
                elif hours > 0:
                    time_str = f"{hours}—á {minutes}–º"
                else:
                    time_str = f"{minutes}–º"
            else:
                time_str = "–Ω–µ–∏–∑–≤."

            item = {
                "request_number": r.request_number,
                "category": r.category,
                "address": r.address or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",
                "status": f"‚è≥ {time_str}"
            }
            items.append(item)

        await callback.message.edit_text(
            f"‚è≥ <b>–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏</b> ({len(requests)}):\n\n"
            f"<i>–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è</i>",
            reply_markup=get_manager_request_list_kb(items, 1, 1),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
