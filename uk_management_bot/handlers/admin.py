from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import Session

from uk_management_bot.keyboards.admin import (
    get_manager_main_keyboard,
    get_manager_requests_inline,
    get_manager_request_list_kb,
    get_invite_role_keyboard,
    get_invite_specialization_keyboard,
    get_invite_expiry_keyboard,
    get_invite_confirmation_keyboard,
    get_completed_requests_submenu,
    get_assignment_type_keyboard,
    get_executors_by_category_keyboard,
)
from uk_management_bot.keyboards.base import get_main_keyboard, get_user_contextual_keyboard
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.request_service import RequestService
from uk_management_bot.services.invite_service import InviteService
from uk_management_bot.services.notification_service import async_notify_request_status_changed
from uk_management_bot.database.session import get_db
from uk_management_bot.utils.constants import (
    SPECIALIZATION_ELECTRIC,
    SPECIALIZATION_PLUMBING,
    SPECIALIZATION_SECURITY,
    SPECIALIZATION_CLEANING,
    SPECIALIZATION_OTHER,
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import logging
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.request import Request
from uk_management_bot.utils.auth_helpers import has_admin_access
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

class ManagerStates(StatesGroup):
    cancel_reason = State()
    clarify_reason = State()
    waiting_for_clarification_text = State()
    waiting_for_materials_edit = State()

from uk_management_bot.states.invite_creation import InviteCreationStates


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def auto_assign_request_by_category(request: Request, db: Session, manager: User):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    Args:
        request: –ó–∞—è–≤–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        manager: –ú–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞—è–≤–∫—É
    """
    try:
        from uk_management_bot.database.models.request_assignment import RequestAssignment
        import json
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        category_to_specialization = {
            "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞": "plumber",
            "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞": "electrician", 
            "–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": "landscaping",
            "–£–±–æ—Ä–∫–∞": "cleaning",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "security",
            "–†–µ–º–æ–Ω—Ç": "repair",
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞": "installation",
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": "maintenance",
            "HVAC": "hvac"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏
        specialization = category_to_specialization.get(request.category)
        if not specialization:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—è–≤–∫–∏: {request.category}")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        executors = db.query(User).filter(
            User.active_role == "executor",
            User.status == "approved"
        ).all()
        
        matching_executors = []
        for executor in executors:
            if executor.specialization:
                try:
                    # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    if isinstance(executor.specialization, str):
                        executor_specializations = json.loads(executor.specialization)
                    else:
                        executor_specializations = executor.specialization
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    if specialization in executor_specializations:
                        matching_executors.append(executor)
                except (json.JSONDecodeError, TypeError):
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if executor.specialization == specialization:
                        matching_executors.append(executor)
        
        if not matching_executors:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {specialization}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
        existing_assignment = db.query(RequestAssignment).filter(
            RequestAssignment.request_number == request.request_number,
            RequestAssignment.status == "active"
        ).first()
        
        if existing_assignment:
            logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_number} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–π –∂–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        existing_group_assignment = db.query(RequestAssignment).filter(
            RequestAssignment.request_number == request.request_number,
            RequestAssignment.assignment_type == "group",
            RequestAssignment.group_specialization == specialization,
            RequestAssignment.status == "active"
        ).first()
        
        if existing_group_assignment:
            logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_number} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–µ {specialization}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignment = RequestAssignment(
            request_number=request.request_number,
            assignment_type="group",
            group_specialization=specialization,
            status="active",
            created_by=manager.id
        )
        
        db.add(assignment)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        request.assignment_type = "group"
        request.assigned_group = specialization
        request.assigned_at = datetime.now()
        request.assigned_by = manager.id
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_number} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–µ {specialization} ({len(matching_executors)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {request.request_number}: {e}")


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–°–ú–û–¢–†–ê –ó–ê–Ø–í–û–ö –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í =====

@router.callback_query(F.data.startswith("mview_"))
async def handle_manager_view_request(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫", show_alert=True)
            return
        
        request_number = callback.data.replace("mview_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        request = db.query(Request).filter(Request.request_number == request_number).first()
        
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —Å–æ–∑–¥–∞–≤—à–µ–º –∑–∞—è–≤–∫—É
        request_user = db.query(User).filter(User.id == request.user_id).first()
        if request_user:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ first_name –∏ last_name
            full_name_parts = []
            if request_user.first_name:
                full_name_parts.append(request_user.first_name)
            if request_user.last_name:
                full_name_parts.append(request_user.last_name)
            user_info = " ".join(full_name_parts) if full_name_parts else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request_user.telegram_id}"
        else:
            user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        message_text = f"üìã –ó–∞—è–≤–∫–∞ #{request.request_number}\n\n"
        message_text += f"üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å: {user_info}\n"
        message_text += f"üì± Telegram ID: {request_user.telegram_id if request_user else 'N/A'}\n"
        message_text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        message_text += f"üìä –°—Ç–∞—Ç—É—Å: {request.status}\n"
        message_text += f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
        message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n"
        message_text += f"‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency}\n"
        if request.apartment:
            message_text += f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {request.apartment}\n"
        message_text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if request.updated_at:
            message_text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {request.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        if request.notes:
            message_text += f"üí¨ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {request.notes}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_files = request.media_files if request.media_files else []
        completion_media = request.completion_media if request.completion_media else []
        has_media = len(media_files) > 0 or len(completion_media) > 0

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        from uk_management_bot.keyboards.admin import get_manager_request_actions_keyboard, get_manager_completed_request_actions_keyboard

        # –î–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è) - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
            actions_kb = get_manager_completed_request_actions_keyboard(request.request_number, is_returned=request.is_returned)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            rows = list(actions_kb.inline_keyboard)
            if has_media:
                rows.append([InlineKeyboardButton(text="üìé –ú–µ–¥–∏–∞", callback_data=f"media_{request.request_number}")])
            rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="mreq_back_to_list")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            actions_kb = get_manager_request_actions_keyboard(request.request_number, has_media=has_media)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
            rows = list(actions_kb.inline_keyboard)
            rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="mreq_back_to_list")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback.message.edit_text(message_text, reply_markup=keyboard)
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ {request.request_number} –º–µ–Ω–µ–¥–∂–µ—Ä—É {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("media_"))
async def handle_view_request_media(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞—è–≤–∫–∏"""
    try:
        from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument

        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤", show_alert=True)
            return

        request_number = callback.data.replace("media_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –ø–∞—Ä—Å–∏–º JSON
        import json

        media_files = []
        if request.media_files:
            try:
                media_files = json.loads(request.media_files) if isinstance(request.media_files, str) else request.media_files
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ media_files –¥–ª—è –∑–∞—è–≤–∫–∏ {request.request_number}: {e}")

        completion_media = []
        if request.completion_media:
            try:
                completion_media = json.loads(request.completion_media) if isinstance(request.completion_media, str) else request.completion_media
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ completion_media –¥–ª—è –∑–∞—è–≤–∫–∏ {request.request_number}: {e}")

        if not media_files and not completion_media:
            await callback.answer("üìé –ö —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        if media_files:
            await callback.message.answer(
                f"üìé <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request.request_number}</b>",
                parse_mode="HTML"
            )

            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 1, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–π
            if len(media_files) > 1:
                media_group = []
                for idx, media_item in enumerate(media_files):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    file_id = media_item.get("file_id") if isinstance(media_item, dict) else media_item

                    try:
                        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                        if idx == 0:
                            media_group.append(InputMediaPhoto(media=file_id, caption=f"–§–æ—Ç–æ {idx+1}/{len(media_files)}"))
                        else:
                            media_group.append(InputMediaPhoto(media=file_id))
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        if idx == 0:
                            media_group.append(InputMediaDocument(media=file_id, caption=f"–§–∞–π–ª {idx+1}/{len(media_files)}"))
                        else:
                            media_group.append(InputMediaDocument(media=file_id))

                if media_group:
                    await callback.message.answer_media_group(media=media_group)
            else:
                # –û–¥–∏–Ω —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                file_id = media_files[0].get("file_id") if isinstance(media_files[0], dict) else media_files[0]
                try:
                    await callback.message.answer_photo(photo=file_id)
                except:
                    try:
                        await callback.message.answer_document(document=file_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        if completion_media:
            await callback.message.answer(
                f"üìé <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request.request_number}</b>",
                parse_mode="HTML"
            )

            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 1, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–π
            if len(completion_media) > 1:
                media_group = []
                for idx, media_item in enumerate(completion_media):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    file_id = media_item.get("file_id") if isinstance(media_item, dict) else media_item

                    try:
                        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                        if idx == 0:
                            media_group.append(InputMediaPhoto(media=file_id, caption=f"–§–æ—Ç–æ {idx+1}/{len(completion_media)}"))
                        else:
                            media_group.append(InputMediaPhoto(media=file_id))
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                        if idx == 0:
                            media_group.append(InputMediaDocument(media=file_id, caption=f"–§–∞–π–ª {idx+1}/{len(completion_media)}"))
                        else:
                            media_group.append(InputMediaDocument(media=file_id))

                if media_group:
                    await callback.message.answer_media_group(media=media_group)
            else:
                # –û–¥–∏–Ω —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                file_id = completion_media[0].get("file_id") if isinstance(completion_media[0], dict) else completion_media[0]
                try:
                    await callback.message.answer_photo(photo=file_id)
                except:
                    try:
                        await callback.message.answer_document(document=file_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
                        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª")

        await callback.answer("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞—è–≤–∫–∏ {request.request_number} –º–µ–Ω–µ–¥–∂–µ—Ä—É {callback.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤", show_alert=True)


@router.callback_query(F.data.startswith("confirm_completed_"))
async def handle_manager_confirm_completed(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        from datetime import datetime
        from uk_management_bot.services.notification_service import NotificationService

        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
            return

        request_number = callback.data.replace("confirm_completed_", "")
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        old_status = request.status
        request.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"  # –°—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –∂–¥—ë—Ç –ø—Ä–∏—ë–º–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º
        request.manager_confirmed = True
        request.manager_confirmed_by = user.id
        request.manager_confirmed_at = datetime.now()
        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –≤ –∫–∞–Ω–∞–ª)
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db, request, old_status, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        applicant = request.user
        if applicant and applicant.telegram_id:
            try:
                from aiogram import Bot
                bot = Bot.get_current()

                notification_text = (
                    f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.format_number_for_display()} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–º–∏—Ç–µ –∑–∞—è–≤–∫—É.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                )

                await bot.send_message(applicant.telegram_id, notification_text)
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {request.request_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–∏—Ç–µ–ª—é {applicant.telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—é: {e}")

        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request.request_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'.\n"
            f"–ó–∞—è–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—ë–º–∫–∏."
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        if db:
            db.rollback()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("reconfirm_completed_"))
async def handle_manager_reconfirm_completed(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    try:
        from datetime import datetime
        from uk_management_bot.services.notification_service import NotificationService

        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
            return

        request_number = callback.data.replace("reconfirm_completed_", "")
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        old_status = "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞)"
        request.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
        request.is_returned = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        request.manager_confirmed = True
        request.manager_confirmed_by = user.id
        request.manager_confirmed_at = datetime.now()
        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –≤ –∫–∞–Ω–∞–ª)
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db, request, old_status, "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        applicant = request.user
        if applicant and applicant.telegram_id:
            try:
                from aiogram import Bot
                bot = Bot.get_current()

                notification_text = (
                    f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request.format_number_for_display()} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ!</b>\n\n"
                    f"–ó–∞–º–µ—á–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ –∑–∞—è–≤–∫—É.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
                )

                await bot.send_message(applicant.telegram_id, notification_text)
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {request.request_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–∏—Ç–µ–ª—é {applicant.telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—é: {e}")

        await callback.message.edit_text(
            f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ #{request.request_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ!\n\n"
            f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'.\n"
            f"–ó–∞—è–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ {request.request_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        if db:
            db.rollback()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("return_to_work_"))
async def handle_manager_return_to_work(callback: CallbackQuery, db: Session, roles: list = None, user: User = None):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    try:
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫", show_alert=True)
            return

        request_number = callback.data.replace("return_to_work_", "")
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–∞–±–æ—Ç—É
        old_status = request.status
        request.status = "–í —Ä–∞–±–æ—Ç–µ"
        request.is_returned = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ—Å–ª–∏ –±—ã–ª
        request.manager_confirmed = False
        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –≤ –∫–∞–Ω–∞–ª)
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db, request, old_status, "–í —Ä–∞–±–æ—Ç–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")

        await callback.message.edit_text(
            f"üîÑ –ó–∞—è–≤–∫–∞ #{request.request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É.\n\n"
            f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–í —Ä–∞–±–æ—Ç–µ'."
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É: {e}")
        if db:
            db.rollback()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("mreq_page_"))
async def handle_manager_request_pagination(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –∑–∞—è–≤–æ–∫ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page_data = callback.data.replace("mreq_page_", "")
        
        if page_data == "curr":
            await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            return
        
        current_page = int(page_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ (–Ω–æ–≤—ã–µ, –∞–∫—Ç–∏–≤–Ω—ã–µ, –∞—Ä—Ö–∏–≤)
        # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
        q = (
            db.query(Request)
            .filter(Request.status.in_(active_statuses))
            .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_requests = q.count()
        requests_per_page = 10
        total_pages = max(1, (total_requests + requests_per_page - 1) // requests_per_page)
        
        if current_page < 1 or current_page > total_pages:
            await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        requests = q.offset((current_page - 1) * requests_per_page).limit(requests_per_page).all()
        
        if not requests:
            await callback.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=True)
            return
        
        items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        from uk_management_bot.keyboards.admin import get_manager_request_list_kb
        new_keyboard = get_manager_request_list_kb(items, current_page, total_pages)
        
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "mreq_back_to_list")
async def handle_manager_back_to_list(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º—ã –ø—Ä–∏—à–ª–∏, –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback.message.text
        if "–ó–∞—è–≤–∫–∞ #" in message_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            match = re.search(r'–ó–∞—è–≤–∫–∞ #(\d{6}-\d{3})', message_text)
            if match:
                request_number = match.group(1)
                request = db.query(Request).filter(Request.request_number == request_number).first()
                if request:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
                    if request.status == "–ù–æ–≤–∞—è":
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º
                        q = (
                            db.query(Request)
                            .filter(Request.status == "–ù–æ–≤–∞—è")
                            .order_by(Request.created_at.desc())
                        )
                        requests = q.limit(10).all()
                        
                        if not requests:
                            await callback.message.edit_text("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
                            return
                        
                        items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]
                        
                        from uk_management_bot.keyboards.admin import get_manager_request_list_kb
                        keyboard = get_manager_request_list_kb(items, 1, 1)
                        
                        await callback.message.edit_text("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
                        return
                    elif request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º
                        q = (
                            db.query(Request)
                            .filter(Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
                            .order_by(
                                Request.is_returned.desc(),  # –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
                                Request.updated_at.desc().nullslast(),
                                Request.created_at.desc()
                            )
                        )
                        requests = q.limit(10).all()

                        if not requests:
                            await callback.message.edit_text("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                            return

                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–≤–æ–∑–≤—Ä–∞—Ç–Ω–∞—è" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                        items = []
                        for r in requests:
                            item = {
                                "request_number": r.request_number,
                                "category": r.category,
                                "address": r.address,
                                "status": r.status
                            }
                            if r.is_returned:
                                item["suffix"] = " üîÑ"
                            items.append(item)

                        from uk_management_bot.keyboards.admin import get_manager_request_list_kb
                        keyboard = get_manager_request_list_kb(items, 1, 1)

                        await callback.message.edit_text("‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
                        return
                    elif request.status in ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º
                        active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
                        q = (
                            db.query(Request)
                            .filter(Request.status.in_(active_statuses))
                            .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
                        )
                        requests = q.limit(10).all()

                        if not requests:
                            await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                            return

                        items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]

                        from uk_management_bot.keyboards.admin import get_manager_request_list_kb
                        keyboard = get_manager_request_list_kb(items, 1, 1)

                        await callback.message.edit_text("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
                        return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
        q = (
            db.query(Request)
            .filter(Request.status.in_(active_statuses))
            .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
        )
        requests = q.limit(10).all()
        
        if not requests:
            await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return
        
        items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]
        
        from uk_management_bot.keyboards.admin import get_manager_request_list_kb
        keyboard = get_manager_request_list_kb(items, 1, 1)
        
        await callback.message.edit_text("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
        
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text == "üß™ –¢–µ—Å—Ç middleware")
async def test_middleware(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware"""
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug(f"Admin panel access check: roles={roles}, active_role={active_role}, user_id={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    has_access = False
    if roles:
        has_access = any(role in ['admin', 'manager'] for role in roles)
    elif user and user.roles:
        try:
            import json
            user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            has_access = any(role in ['admin', 'manager'] for role in user_roles)
        except:
            pass
    
    print(f"üîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
    
    await message.answer(f"–¢–µ—Å—Ç middleware:\nroles={roles}\nactive_role={active_role}\nuser={'–ï—Å—Ç—å' if user else '–ù–µ—Ç'}\nhas_access={'–î–∞' if has_access else '–ù–µ—Ç'}")

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def open_admin_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    await message.answer("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_manager_main_keyboard())


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")  
async def open_user_management_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –û–¢–õ–ê–î–ö–ê
    logger.debug(f"User management panel opened: user_id={message.from_user.id}, roles={roles}, user_status={user.status if user else None}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    try:
        from uk_management_bot.handlers.user_management import open_user_management
        await open_user_management(message, db, roles, active_role, user)
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ open_user_management: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ open_user_management: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )


@router.message(F.text == "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
async def open_employee_management_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        from uk_management_bot.services.user_management_service import UserManagementService
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_employee_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        from uk_management_bot.keyboards.employee_management import get_employee_management_main_keyboard
        
        await message.answer(
            "üë∑ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            reply_markup=get_employee_management_main_keyboard(stats, lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")


@router.message(F.text == "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
async def list_new_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: —Ç–æ–ª—å–∫–æ "–ù–æ–≤–∞—è" (üÜï)
    q = (
        db.query(Request)
        .filter(Request.status == "–ù–æ–≤–∞—è")
        .order_by(Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return
    
    items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def list_active_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(active_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return
    
    items = [{"request_number": r.request_number, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def show_completed_requests_menu(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    lang = message.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_completed = db.query(Request).filter(Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞").count()
    returned_count = db.query(Request).filter(
        Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
        Request.is_returned == True
    ).count()

    stats_text = (
        f"‚úÖ <b>–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìã –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {total_completed}\n"
        f"üîÑ –í–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö: {returned_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )

    await message.answer(stats_text, reply_markup=get_completed_requests_submenu(), parse_mode="HTML")


@router.message(F.text == "üìã –í—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
async def list_all_completed_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return

    # –í—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    q = (
        db.query(Request)
        .filter(Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞")
        .order_by(
            Request.is_returned.desc(),  # –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
            Request.updated_at.desc().nullslast(),
            Request.created_at.desc()
        )
    )
    requests = q.limit(10).all()

    if not requests:
        await message.answer("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_completed_requests_submenu())
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "–≤–æ–∑–≤—Ä–∞—Ç–Ω–∞—è" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    items = []
    for r in requests:
        item = {
            "request_number": r.request_number,
            "category": r.category,
            "address": r.address,
            "status": "üîÑ –í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è" if r.is_returned else r.status
        }
        items.append(item)

    await message.answer("üìã –í—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üîÑ –í–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ")
async def list_returned_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return

    # –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    q = (
        db.query(Request)
        .filter(
            Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞",
            Request.is_returned == True
        )
        .order_by(
            Request.returned_at.desc().nullslast(),
            Request.updated_at.desc().nullslast(),
            Request.created_at.desc()
        )
    )
    requests = q.limit(10).all()

    if not requests:
        await message.answer(
            "‚úÖ –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n\n–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
            reply_markup=get_completed_requests_submenu()
        )
        return

    items = []
    for r in requests:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        return_info = ""
        if r.returned_at:
            return_info = f" ‚Ä¢ {r.returned_at.strftime('%d.%m %H:%M')}"

        item = {
            "request_number": r.request_number,
            "category": r.category,
            "address": r.address,
            "status": f"üîÑ –í–æ–∑–≤—Ä–∞—Ç{return_info}"
        }
        items.append(item)

    await message.answer(
        f"üîÑ <b>–í–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b> ({len(requests)}):",
        reply_markup=get_manager_request_list_kb(items, 1, 1),
        parse_mode="HTML"
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    lang = message.from_user.language_code or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return

    await message.answer("üîß –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_manager_main_keyboard())


@router.message(F.text == "üì¶ –ê—Ä—Ö–∏–≤")
async def list_archive_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ê—Ä—Ö–∏–≤: —Ç–æ–ª—å–∫–æ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ (‚≠ê) –∏ –û—Ç–º–µ–Ω–µ–Ω–∞ (‚ùå)
    archive_statuses = ["–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(archive_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    if not requests:
        await message.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç", reply_markup=get_manager_main_keyboard())
        return
    def _icon(s: str) -> str:
        return {"–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "‚úÖ", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê", "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå", "–ü—Ä–∏–Ω—è—Ç–æ": "‚úÖ"}.get(s, "")
    # –ö–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for r in requests:
        addr = r.address[:60] + ("‚Ä¶" if len(r.address) > 60 else "")
        text = (
            f"{_icon(r.status)} #{r.request_number} ‚Ä¢ {r.category} ‚Ä¢ {r.status}\n"
            f"–ê–¥—Ä–µ—Å: {addr}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {r.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        if r.notes and r.notes.strip():
            if r.status == "–û—Ç–º–µ–Ω–µ–Ω–∞":
                text += f"\nüí¨ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {r.notes.strip()}"
            else:
                text += f"\nüí¨ –ó–∞–º–µ—Ç–∫–∏: {r.notes.strip()}"
        await message.answer(text)
    await message.answer("üì¶ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–∞", reply_markup=get_manager_main_keyboard())

@router.message(F.text == "üí∞ –ó–∞–∫—É–ø")
async def list_procurement_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫—É–ø–∞"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ó–∞–∫—É–ø"
    q = (
        db.query(Request)
        .filter(Request.status == "–ó–∞–∫—É–ø")
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("üí∞ –ó–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ó–∞–∫—É–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_manager_main_keyboard())
        return
    
    # –ö–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for r in requests:
        addr = r.address[:60] + ("‚Ä¶" if len(r.address) > 60 else "")
        text = (
            f"üí∞ #{r.request_number} ‚Ä¢ {r.category} ‚Ä¢ {r.status}\n"
            f"–ê–¥—Ä–µ—Å: {addr}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {r.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if r.requested_materials:
            text += f"\nüìã –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {r.requested_materials}"
        if r.manager_materials_comment:
            text += f"\nüí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä: {r.manager_materials_comment}"
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        if not r.requested_materials and r.purchase_materials:
            text += f"\nüí° –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {r.purchase_materials}"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"return_to_work_{r.request_number}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"edit_materials_{r.request_number}")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    await message.answer("üí∞ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ó–∞–∫—É–ø'", reply_markup=get_manager_main_keyboard())
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä—É {message.from_user.id}")






# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô =====

@router.message(F.text == "üì® –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
async def start_invite_creation(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("invites.manager_only", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    await message.answer(
        get_text("invites.select_role", language=lang),
        reply_markup=get_invite_role_keyboard()
    )


@router.callback_query(F.data.startswith("invite_role_"))
async def handle_invite_role_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
    role = callback.data.replace("invite_role_", "")
    
    if role not in ["applicant", "executor", "manager"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(role=role)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å executor, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if role == "executor":
        await callback.message.edit_text(
            get_text("invites.select_specialization", language=lang),
            reply_markup=get_invite_specialization_keyboard()
        )
        await state.set_state(InviteCreationStates.waiting_for_specialization)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await callback.message.edit_text(
            get_text("invites.select_expiry", language=lang),
            reply_markup=get_invite_expiry_keyboard()
        )
        await state.set_state(InviteCreationStates.waiting_for_expiry)
    
    await callback.answer()


@router.callback_query(F.data.startswith("invite_spec_"))
async def handle_invite_specialization_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ callback_data
    specialization = callback.data.replace("invite_spec_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(specialization=specialization)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await callback.message.edit_text(
        get_text("invites.select_expiry", language=lang),
        reply_markup=get_invite_expiry_keyboard()
    )
    await state.set_state(InviteCreationStates.waiting_for_expiry)
    
    await callback.answer()


@router.callback_query(F.data.startswith("invite_expiry_"))
async def handle_invite_expiry_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ callback_data
    expiry = callback.data.replace("invite_expiry_", "")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∞—Å—ã
    expiry_hours = {
        "1h": 1,
        "24h": 24,
        "7d": 168  # 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞
    }.get(expiry, 24)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(expiry_hours=expiry_hours)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    role = data.get("role", "unknown")
    specialization = data.get("specialization", "")
    expiry_text = {
        1: "1 —á–∞—Å",
        24: "24 —á–∞—Å–∞",
        168: "7 –¥–Ω–µ–π"
    }.get(expiry_hours, "24 —á–∞—Å–∞")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    role_name = get_text(f"roles.{role}", language=lang)
    confirmation_text = f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n"
    confirmation_text += f"üë§ –†–æ–ª—å: {role_name}\n"
    
    if role == "executor" and specialization:
        spec_name = get_text(f"specializations.{specialization}", language=lang)
        confirmation_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_name}\n"
    
    confirmation_text += f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_text}\n\n"
    confirmation_text += "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞."
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_invite_confirmation_keyboard()
    )
    await state.set_state(InviteCreationStates.waiting_for_confirmation)
    
    await callback.answer()


@router.callback_query(F.data == "invite_confirm")
async def handle_invite_confirmation(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        role = data.get("role")
        specialization = data.get("specialization", "")
        expiry_hours = data.get("expiry_hours", 24)
        
        if not role:
            await callback.answer("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏
        invite_service = InviteService(db)
        invite_link = invite_service.generate_invite_link(
            role=role,
            created_by=callback.from_user.id,
            specialization=specialization if role == "executor" else None,
            hours=expiry_hours
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        token = invite_service.generate_invite(
            role=role,
            created_by=callback.from_user.id,
            specialization=specialization if role == "executor" else None,
            hours=expiry_hours
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
        role_name = get_text(f"roles.{role}", language=lang)
        expiry_text = {
            1: "1 —á–∞—Å",
            24: "24 —á–∞—Å–∞", 
            168: "7 –¥–Ω–µ–π"
        }.get(expiry_hours, "24 —á–∞—Å–∞")
        
        success_text = f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        success_text += f"üë§ –†–æ–ª—å: {role_name}\n"
        
        if role == "executor" and specialization:
            spec_name = get_text(f"specializations.{specialization}", language=lang)
            success_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_name}\n"
        
        success_text += f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_text}\n\n"
        success_text += f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
        success_text += f"`{invite_link}`\n\n"
        success_text += f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n"
        success_text += f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        success_text += f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª\n"
        success_text += f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/join {token}`"
        
        await callback.message.edit_text(
            success_text
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_manager_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–æ–∑–¥–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ {role}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            get_text("errors.unknown_error", language=lang)
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_manager_main_keyboard()
        )
        await state.clear()
    
    await callback.answer()


@router.callback_query(F.data == "invite_cancel")
async def handle_invite_cancel(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    await callback.message.edit_text(
        get_text("buttons.operation_cancelled", language=lang)
    )
    await callback.message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_manager_main_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô –° –ó–ê–Ø–í–ö–ê–ú–ò –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í =====

@router.callback_query(lambda c: c.data.startswith("accept_") and not c.data.startswith("accept_request_"))
async def handle_accept_request(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return

        request_number = callback.data.replace("accept_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
        request.status = "–í —Ä–∞–±–æ—Ç–µ"
        request.updated_at = datetime.now()
        db.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
            reply_markup=get_assignment_type_keyboard(request_number),
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –ø—Ä–∏–Ω—è—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}, –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("deny_"))
async def handle_deny_request(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("deny_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_number}\n\n"
            f"üìã –ó–∞—è–≤–∫–∞: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_number}")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await state.update_data(deny_request_number=request_number)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await state.set_state(ManagerStates.cancel_reason)
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {request_number} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("clarify_"))
async def handle_clarify_request(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("clarify_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
        if request.status == "–û—Ç–º–µ–Ω–µ–Ω–∞":
            await callback.answer("–ù–µ–ª—å–∑—è –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(request_number=request_number)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
        await callback.message.edit_text(
            f"‚ùì –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_number}:\n\n"
            f"üìã –ó–∞—è–≤–∫–∞: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clarification")]
            ])
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        await state.set_state(ManagerStates.waiting_for_clarification_text)
        
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_clarification")
async def handle_cancel_clarification(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–º–µ–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        await handle_manager_back_to_list(callback, db, roles, active_role, user)
        
        await callback.answer("‚ùå –£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("purchase_") and not c.data.startswith("purchase_materials_"))
async def handle_purchase_request(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø' –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏ –≤ –∑–∞–∫—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("purchase_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ø–æ–∫
        prompt_text = "üí∞ –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–∫—É–ø'\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫—É–ø–æ–∫
        if request.purchase_history:
            prompt_text += "üìö –ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫—É–ø–æ–∫:\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            history_lines = request.purchase_history.split('\n')
            last_requested = None
            last_comment = None
            
            for i in range(len(history_lines) - 1, -1, -1):
                line = history_lines[i].strip()
                if line.startswith("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:") and not last_requested:
                    last_requested = line.replace("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", "").strip()
                elif line.startswith("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞:") and not last_comment:
                    last_comment = line.replace("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", "").strip()
                
                if last_requested and last_comment:
                    break
            
            if last_requested and last_requested != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                prompt_text += f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {last_requested}\n"
            if last_comment and last_comment != "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤":
                prompt_text += f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {last_comment}\n"
            
            prompt_text += "\n"
        
        prompt_text += "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–∫–∏:"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        await callback.message.edit_text(
            prompt_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_{request_number}")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from uk_management_bot.states.request_status import RequestStatusStates
        from aiogram.fsm.context import FSMContext
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            await state.update_data(
                request_number=request_number,
                action="purchase_materials_admin"
            )
            await state.set_state(RequestStatusStates.waiting_for_materials)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        
        await callback.answer()
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –∑–∞–∫—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∑–∞–∫—É–ø –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("complete_"))
async def handle_complete_request(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("complete_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        request.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
        request.completed_at = datetime.now()
        request.updated_at = datetime.now()
        db.commit()
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        await handle_manager_back_to_list(callback, db, roles, active_role, user)
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(
    F.data.startswith("delete_") &
    ~F.data.startswith("delete_employee_")
)
async def handle_delete_request(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("delete_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
        db.delete(request)
        db.commit()
        
        await callback.answer("üóëÔ∏è –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        await handle_manager_back_to_list(callback, db, roles, active_role, user)
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} —É–¥–∞–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ManagerStates.waiting_for_clarification_text)
async def handle_clarification_text(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        request_number = data.get("request_number")
        
        if not request_number:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
        clarification_text = message.text.strip()
        
        if not clarification_text:
            await message.answer("–¢–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not manager_name:
            manager_name = f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user.telegram_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        new_note = f"--- –£–¢–û–ß–ù–ï–ù–ò–ï {timestamp} ---\n"
        new_note += f"üë®‚Äçüíº {manager_name}:\n"
        new_note += f"{clarification_text}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if request.notes and request.notes.strip():
            request.notes = request.notes.strip() + "\n\n" + new_note
        else:
            request.notes = new_note
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–£—Ç–æ—á–Ω–µ–Ω–∏–µ" –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Ç–∞–∫–æ–π
        if request.status != "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
            request.status = "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"
        
        request.updated_at = datetime.now()
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é
        try:
            from uk_management_bot.services.notification_service import send_to_user
            from uk_management_bot.database.models.user import User as UserModel
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_obj = db.query(UserModel).filter(UserModel.id == request.user_id).first()
            if user_obj and user_obj.telegram_id:
                notification_text = f"‚ùì –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request.request_number} –ø–æ—è–≤–∏–ª–æ—Å—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ:\n\n"
                notification_text += f"üìã –ó–∞—è–≤–∫–∞: {request.category}\n"
                notification_text += f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
                notification_text += f"üí¨ –í–æ–ø—Ä–æ—Å –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{clarification_text}\n\n"
                notification_text += f"üí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reply_{request.request_number}"
                
                # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                bot = message.bot
                await send_to_user(bot, user_obj.telegram_id, notification_text)
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ç–æ—á–Ω–µ–Ω–∏–∏: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await message.answer(
            f"‚úÖ –£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{request.request_number}\n"
            f"üí¨ –¢–µ–∫—Å—Ç: {clarification_text[:100]}{'...' if len(clarification_text) > 100 else ''}\n\n"
            f"üì± –ó–∞—è–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ {request_number} –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        await state.clear()


@router.message(ManagerStates.cancel_reason)
async def handle_cancel_reason_text(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        request_number = data.get("deny_request_number")
        
        if not request_number:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        cancel_reason = message.text.strip()
        
        if not cancel_reason:
            await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        if not manager_name:
            manager_name = f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user.telegram_id}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        request.status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
        cancel_note = f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_name} {datetime.now().strftime('%d.%m.%Y %H:%M')}\n–ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}"
        
        if request.notes and request.notes.strip():
            request.notes = request.notes.strip() + "\n\n" + cancel_note
        else:
            request.notes = cancel_note
        request.updated_at = datetime.now()
        db.commit()
        
        await message.answer(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{request_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
            f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {cancel_reason}",
            reply_markup=get_manager_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {message.from_user.id} —Å –ø—Ä–∏—á–∏–Ω–æ–π: {cancel_reason}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        await state.clear()


@router.message(F.text == "üë• –°–º–µ–Ω—ã")
async def handle_admin_shifts_button(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω—ã' –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("auth.no_access", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏ –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    try:
        from uk_management_bot.keyboards.shift_management import get_main_shift_menu
        from uk_management_bot.states.shift_management import ShiftManagementStates
        from uk_management_bot.utils.helpers import get_user_language
        
        language = get_user_language(message.from_user.id, db)
        
        await message.answer(
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_shift_menu(language),
            parse_mode="HTML"
        )
        
        await state.set_state(ShiftManagementStates.main_menu)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏: {e}")
        await message.answer(
            "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /shifts",
            parse_mode="HTML",
            reply_markup=get_manager_main_keyboard()
        )


@router.callback_query(F.data.startswith("return_to_work_"))
async def handle_return_to_work(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ –∏–∑ –∑–∞–∫—É–ø–∞ –≤ —Ä–∞–±–æ—Ç—É"""
    try:
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ –∏–∑ –∑–∞–∫—É–ø–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("return_to_work_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ó–∞–∫—É–ø"
        if request.status != "–ó–∞–∫—É–ø":
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫—É–ø", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–∫—É–ø–∫–∏ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        if request.requested_materials:
            current_date = datetime.now().strftime('%d.%m.%Y %H:%M')
            procurement_separator = f"--–∑–∞–∫—É–ø–ª–µ–Ω–æ {current_date}--"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
            request.requested_materials += f"\n{procurement_separator}\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
            if request.manager_materials_comment:
                manager_comment = request.manager_materials_comment
            else:
                manager_comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
            
            history_entry = (
                f"–ó–ê–ö–£–ü –ó–ê–í–ï–†–®–ï–ù:\n"
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {request.requested_materials.split(f'{procurement_separator}')[0].strip()}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_comment}\n"
                f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {current_date}"
            )
            
            if request.purchase_history:
                request.purchase_history += f"\n\n===\n\n{history_entry}"
            else:
                request.purchase_history = history_entry
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
        request.status = "–í —Ä–∞–±–æ—Ç–µ"
        request.updated_at = datetime.now()
        db.commit()
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∑–∞–∫—É–ø–µ
        q = (
            db.query(Request)
            .filter(Request.status == "–ó–∞–∫—É–ø")
            .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
        )
        requests = q.limit(10).all()
        
        if not requests:
            await callback.message.edit_text("üí∞ –ó–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ó–∞–∫—É–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_manager_main_keyboard())
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∑–∞–∫—É–ø–µ
        text = "üí∞ –ó–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ó–∞–∫—É–ø' (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):\n\n"
        for i, r in enumerate(requests, 1):
            addr = r.address[:40] + ("‚Ä¶" if len(r.address) > 40 else "")
            text += f"{i}. #{r.request_number} - {r.category}\n"
            text += f"   üìç {addr}\n\n"
        
        await callback.message.edit_text(text, reply_markup=get_manager_main_keyboard())
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ –∏–∑ –∑–∞–∫—É–ø–∞ –≤ —Ä–∞–±–æ—Ç—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("edit_materials_"))
async def handle_edit_materials(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–∞"""
    try:
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not has_admin_access(roles=roles, user=user):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π", show_alert=True)
            return
        
        request_number = callback.data.replace("edit_materials_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ó–∞–∫—É–ø"
        if request.status != "–ó–∞–∫—É–ø":
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫—É–ø", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(edit_materials_request_number=request_number)
        await state.set_state(ManagerStates.waiting_for_materials_edit)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        requested = request.requested_materials or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        manager_comment = request.manager_materials_comment or ""
        
        text = (
            f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_number}\n\n"
            f"üìã –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è):\n{requested}\n\n"
        )
        
        if manager_comment:
            text += f"üí¨ –¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{manager_comment}\n\n"
        
        text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"
        
        await callback.message.answer(text)
        
        await callback.answer()
        
        logger.info(f"–ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ManagerStates.waiting_for_materials_edit)
async def handle_materials_edit_text(message: Message, state: FSMContext, db: Session, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    try:
        data = await state.get_data()
        request_number = data.get("edit_materials_request_number")
        
        if not request_number:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ù–ï –∏–∑–º–µ–Ω—è–µ–º)
        old_comment = request.manager_materials_comment
        new_comment = message.text.strip()
        request.manager_materials_comment = new_comment
        request.updated_at = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—É–ø–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        requested_materials = request.requested_materials or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        purchase_history_entry = (
            f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {requested_materials}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {new_comment}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        if request.purchase_history:
            request.purchase_history += f"\n\n---\n\n{purchase_history_entry}"
        else:
            request.purchase_history = purchase_history_entry
            
        db.commit()
        
        await message.answer(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_number} –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=get_manager_main_keyboard())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if user:
            try:
                from uk_management_bot.services.comment_service import CommentService
                comment_service = CommentService(db)
                comment_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏–∑–º–µ–Ω–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n\n–ë—ã–ª–æ: {old_comment or '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'}\n\n–°—Ç–∞–ª–æ: {new_comment}"
                comment_service.add_status_change_comment(
                    request_id=request_number,
                    user_id=user.id,
                    old_status="–ó–∞–∫—É–ø",
                    new_status="–ó–∞–∫—É–ø", 
                    comment=comment_text
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        
        await state.clear()

        logger.info(f"–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number} –æ–±–Ω–æ–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {message.from_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
        await state.clear()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô =====

@router.callback_query(F.data.startswith("assign_duty_"))
async def handle_assign_duty_executor_admin(callback: CallbackQuery, db: Session, user: User = None):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ —Å–º–µ–Ω–∞–º)"""
    try:
        request_number = callback.data.replace("assign_duty_", "")
        logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É auto_assign
        await auto_assign_request_by_category(request, db, user)

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</b>\n\n"
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏—Ö —Å–º–µ–Ω\n"
            f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("assign_specific_"))
async def handle_assign_specific_executor_admin(callback: CallbackQuery, db: Session):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    try:
        request_number = callback.data.replace("assign_specific_", "")
        logger.info(f"–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        category_to_spec = {
            "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞": "electrician",
            "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞": "plumber",
            "–û—Ö—Ä–∞–Ω–∞": "security",
            "–£–±–æ—Ä–∫–∞": "cleaner",
        }

        spec = category_to_spec.get(request.category, "other")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        import json

        executors = db.query(User).filter(
            User.roles.contains('"executor"'),
            User.status == "approved"
        ).all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        filtered_executors = []
        for ex in executors:
            if ex.specialization:
                try:
                    specializations = json.loads(ex.specialization) if isinstance(ex.specialization, str) else ex.specialization
                    if spec in specializations or "other" in specializations:
                        filtered_executors.append(ex)
                except:
                    pass

        executors_text = f"–ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(filtered_executors)}" if filtered_executors else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"

        await callback.message.edit_text(
            f"üë§ <b>–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞: #{request_number}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec}\n\n"
            f"{executors_text}\n\n"
            f"üü¢ - –ù–∞ —Å–º–µ–Ω–µ\n"
            f"‚ö™ - –ù–µ –Ω–∞ —Å–º–µ–Ω–µ",
            reply_markup=get_executors_by_category_keyboard(request_number, request.category, filtered_executors),
            parse_mode="HTML"
        )

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(filtered_executors)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("assign_executor_"))
async def handle_final_executor_assignment_admin(callback: CallbackQuery, db: Session):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: assign_executor_251013-001_123
        parts = callback.data.replace("assign_executor_", "").split("_")
        request_number = parts[0]
        executor_id = int(parts[1])

        logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id} –Ω–∞ –∑–∞—è–≤–∫—É {request_number}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        request = db.query(Request).filter(Request.request_number == request_number).first()
        executor = db.query(User).filter(User.id == executor_id).first()

        if not request or not executor:
            await callback.answer("–ó–∞—è–≤–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        request.executor_id = executor_id
        request.assignment_type = "manual"
        db.commit()

        executor_name = f"{executor.first_name or ''} {executor.last_name or ''}".strip()
        if not executor_name:
            executor_name = f"@{executor.username}" if executor.username else f"ID{executor.id}"

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é</b>\n\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        try:
            from aiogram import Bot
            bot = Bot.get_current()

            notification_text = (
                f"üìã <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
                f"‚Ññ –∑–∞—è–≤–∫–∏: #{request.format_number_for_display()}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
                f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é."
            )

            await bot.send_message(executor.telegram_id, notification_text, parse_mode="HTML")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor.telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("back_to_assignment_type_"))
async def handle_back_to_assignment_type_admin(callback: CallbackQuery, db: Session):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        request_number = callback.data.replace("back_to_assignment_type_", "")

        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
            f"üìç –ê–¥—Ä–µ—Å: {request.address}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
            reply_markup=get_assignment_type_keyboard(request_number),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

