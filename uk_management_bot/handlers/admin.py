from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import Session

from uk_management_bot.keyboards.admin import (
    get_manager_main_keyboard,
    get_manager_requests_inline,
    get_manager_request_list_kb,
    get_invite_role_keyboard,
    get_invite_specialization_keyboard,
    get_invite_expiry_keyboard,
    get_invite_confirmation_keyboard,
)
from uk_management_bot.keyboards.base import get_main_keyboard, get_user_contextual_keyboard
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.request_service import RequestService
from uk_management_bot.services.invite_service import InviteService
from uk_management_bot.database.session import get_db
from uk_management_bot.utils.constants import (
    SPECIALIZATION_ELECTRIC,
    SPECIALIZATION_PLUMBING,
    SPECIALIZATION_SECURITY,
    SPECIALIZATION_CLEANING,
    SPECIALIZATION_OTHER,
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import logging
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.request import Request
from uk_management_bot.utils.auth_helpers import has_admin_access

router = Router()
logger = logging.getLogger(__name__)

class ManagerStates(StatesGroup):
    cancel_reason = State()
    clarify_reason = State()

from uk_management_bot.states.invite_creation import InviteCreationStates


@router.message(F.text == "üß™ –¢–µ—Å—Ç middleware")
async def test_middleware(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware"""
    
    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f"üß™ TEST MIDDLEWARE:")
    print(f"üîç roles={roles}")
    print(f"üîç active_role={active_role}")
    print(f"üîç user={user}")
    print(f"üîç user_status={user_status}")
    print(f"üîç message.from_user.id={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    has_access = False
    if roles:
        has_access = any(role in ['admin', 'manager'] for role in roles)
    elif user and user.roles:
        try:
            import json
            user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            has_access = any(role in ['admin', 'manager'] for role in user_roles)
        except:
            pass
    
    print(f"üîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
    
    await message.answer(f"–¢–µ—Å—Ç middleware:\nroles={roles}\nactive_role={active_role}\nuser={'–ï—Å—Ç—å' if user else '–ù–µ—Ç'}\nhas_access={'–î–∞' if has_access else '–ù–µ—Ç'}")

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def open_admin_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    await message.answer("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_manager_main_keyboard())


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")  
async def open_user_management_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –û–¢–õ–ê–î–ö–ê
    print(f"üîç DEBUG: open_user_management_panel –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç DEBUG: roles={roles}, user={user}")
    print(f"üîç DEBUG: message.from_user.id={message.from_user.id}")
    
    if user:
        print(f"üîç DEBUG: user.role={user.role}")
        print(f"üîç DEBUG: user.roles={user.roles}")
        print(f"üîç DEBUG: user.active_role={user.active_role}")
        print(f"üîç DEBUG: user.status={user.status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    try:
        from uk_management_bot.handlers.user_management import open_user_management
        await open_user_management(message, db, roles, active_role, user)
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ open_user_management: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ open_user_management: {e}")
        await message.answer(
            get_text("errors.unknown_error", language=lang)
        )


@router.message(F.text == "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
async def open_employee_management_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        from uk_management_bot.services.user_management_service import UserManagementService
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_employee_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        from uk_management_bot.keyboards.employee_management import get_employee_management_main_keyboard
        
        await message.answer(
            "üë∑ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
            reply_markup=get_employee_management_main_keyboard(stats, lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")


@router.message(F.text == "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
async def list_new_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: —Ç–æ–ª—å–∫–æ "–ù–æ–≤–∞—è" (üÜï)
    q = (
        db.query(Request)
        .filter(Request.status == "–ù–æ–≤–∞—è")
        .order_by(Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return
    
    items = [{"id": r.id, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def list_active_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(active_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return
    
    items = [{"id": r.id, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üì¶ –ê—Ä—Ö–∏–≤")
async def list_archive_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ê—Ä—Ö–∏–≤: —Ç–æ–ª—å–∫–æ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (‚≠ê) –∏ –û—Ç–º–µ–Ω–µ–Ω–∞ (‚ùå)
    archive_statuses = ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(archive_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    if not requests:
        await message.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç", reply_markup=get_manager_main_keyboard())
        return
    def _icon(s: str) -> str:
        return {"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê", "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå"}.get(s, "")
    # –ö–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for r in requests:
        addr = r.address[:60] + ("‚Ä¶" if len(r.address) > 60 else "")
        text = (
            f"{_icon(r.status)} #{r.id} ‚Ä¢ {r.category} ‚Ä¢ {r.status}\n"
            f"–ê–¥—Ä–µ—Å: {addr}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {r.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        if r.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and r.notes:
            text += f"\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {r.notes}"
        if r.notes:
            text += f"\n\n–î–∏–∞–ª–æ–≥:\n{r.notes}"
        await message.answer(text)
    await message.answer("üì¶ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–∞", reply_markup=get_manager_main_keyboard())





# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô =====

@router.message(F.text == "üì® –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
async def start_invite_creation(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("invites.manager_only", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    await message.answer(
        get_text("invites.select_role", language=lang),
        reply_markup=get_invite_role_keyboard()
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:", reply_markup=get_invite_role_keyboard())


@router.callback_query(F.data.startswith("invite_role_"))
async def handle_invite_role_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
    role = callback.data.replace("invite_role_", "")
    
    if role not in ["applicant", "executor", "manager"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(role=role)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å executor, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if role == "executor":
        await callback.message.edit_text(
            get_text("invites.select_specialization", language=lang),
            reply_markup=get_invite_specialization_keyboard()
        )
        await state.set_state(InviteCreationStates.waiting_for_specialization)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await callback.message.edit_text(
            get_text("invites.select_expiry", language=lang),
            reply_markup=get_invite_expiry_keyboard()
        )
        await state.set_state(InviteCreationStates.waiting_for_expiry)
    
    await callback.answer()


@router.callback_query(F.data.startswith("invite_spec_"))
async def handle_invite_specialization_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ callback_data
    specialization = callback.data.replace("invite_spec_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(specialization=specialization)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await callback.message.edit_text(
        get_text("invites.select_expiry", language=lang),
        reply_markup=get_invite_expiry_keyboard()
    )
    await state.set_state(InviteCreationStates.waiting_for_expiry)
    
    await callback.answer()


@router.callback_query(F.data.startswith("invite_expiry_"))
async def handle_invite_expiry_selection(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ callback_data
    expiry = callback.data.replace("invite_expiry_", "")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∞—Å—ã
    expiry_hours = {
        "1h": 1,
        "24h": 24,
        "7d": 168  # 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞
    }.get(expiry, 24)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(expiry_hours=expiry_hours)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    role = data.get("role", "unknown")
    specialization = data.get("specialization", "")
    expiry_text = {
        1: "1 —á–∞—Å",
        24: "24 —á–∞—Å–∞",
        168: "7 –¥–Ω–µ–π"
    }.get(expiry_hours, "24 —á–∞—Å–∞")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    role_name = get_text(f"roles.{role}", language=lang)
    confirmation_text = f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n"
    confirmation_text += f"üë§ –†–æ–ª—å: {role_name}\n"
    
    if role == "executor" and specialization:
        spec_name = get_text(f"specializations.{specialization}", language=lang)
        confirmation_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_name}\n"
    
    confirmation_text += f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_text}\n\n"
    confirmation_text += "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞."
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_invite_confirmation_keyboard()
    )
    await state.set_state(InviteCreationStates.waiting_for_confirmation)
    
    await callback.answer()


@router.callback_query(F.data == "invite_confirm")
async def handle_invite_confirmation(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        role = data.get("role")
        specialization = data.get("specialization", "")
        expiry_hours = data.get("expiry_hours", 24)
        
        if not role:
            await callback.answer("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏
        invite_service = InviteService(db)
        invite_link = invite_service.generate_invite_link(
            role=role,
            created_by=callback.from_user.id,
            specialization=specialization if role == "executor" else None,
            hours=expiry_hours
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        token = invite_service.generate_invite(
            role=role,
            created_by=callback.from_user.id,
            specialization=specialization if role == "executor" else None,
            hours=expiry_hours
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
        role_name = get_text(f"roles.{role}", language=lang)
        expiry_text = {
            1: "1 —á–∞—Å",
            24: "24 —á–∞—Å–∞", 
            168: "7 –¥–Ω–µ–π"
        }.get(expiry_hours, "24 —á–∞—Å–∞")
        
        success_text = f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        success_text += f"üë§ –†–æ–ª—å: {role_name}\n"
        
        if role == "executor" and specialization:
            spec_name = get_text(f"specializations.{specialization}", language=lang)
            success_text += f"üõ†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_name}\n"
        
        success_text += f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_text}\n\n"
        success_text += f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
        success_text += f"`{invite_link}`\n\n"
        success_text += f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n"
        success_text += f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        success_text += f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª\n"
        success_text += f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/join {token}`"
        
        await callback.message.edit_text(
            success_text
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_manager_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–æ–∑–¥–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏ {role}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            get_text("errors.unknown_error", language=lang)
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_manager_main_keyboard()
        )
        await state.clear()
    
    await callback.answer()


@router.callback_query(F.data == "invite_cancel")
async def handle_invite_cancel(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    lang = callback.from_user.language_code or 'ru'
    
    await callback.message.edit_text(
        get_text("buttons.operation_cancelled", language=lang)
    )
    await callback.message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_manager_main_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()

