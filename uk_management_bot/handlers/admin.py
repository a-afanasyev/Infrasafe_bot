from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.orm import Session

from uk_management_bot.keyboards.admin import (
    get_manager_main_keyboard,
    get_manager_requests_inline,
    get_manager_request_list_kb,
)
from uk_management_bot.keyboards.base import get_main_keyboard, get_user_contextual_keyboard
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.request_service import RequestService
from uk_management_bot.database.session import get_db
from uk_management_bot.utils.constants import (
    SPECIALIZATION_ELECTRIC,
    SPECIALIZATION_PLUMBING,
    SPECIALIZATION_SECURITY,
    SPECIALIZATION_CLEANING,
    SPECIALIZATION_OTHER,
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import logging
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.request import Request
from uk_management_bot.utils.auth_helpers import has_admin_access

router = Router()
logger = logging.getLogger(__name__)

class ManagerStates(StatesGroup):
    cancel_reason = State()
    clarify_reason = State()


@router.message(F.text == "üß™ –¢–µ—Å—Ç middleware")
async def test_middleware(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware"""
    
    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f"üß™ TEST MIDDLEWARE:")
    print(f"üîç roles={roles}")
    print(f"üîç active_role={active_role}")
    print(f"üîç user={user}")
    print(f"üîç user_status={user_status}")
    print(f"üîç message.from_user.id={message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    has_access = False
    if roles:
        has_access = any(role in ['admin', 'manager'] for role in roles)
    elif user and user.roles:
        try:
            import json
            user_roles = json.loads(user.roles) if isinstance(user.roles, str) else user.roles
            has_access = any(role in ['admin', 'manager'] for role in user_roles)
        except:
            pass
    
    print(f"üîß –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {'‚úÖ –ï—Å—Ç—å' if has_access else '‚ùå –ù–µ—Ç'}")
    
    await message.answer(f"–¢–µ—Å—Ç middleware:\nroles={roles}\nactive_role={active_role}\nuser={'–ï—Å—Ç—å' if user else '–ù–µ—Ç'}\nhas_access={'–î–∞' if has_access else '–ù–µ—Ç'}")

@router.message(F.text == "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def open_admin_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None, user_status: str = None):
    """–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    await message.answer("–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=get_manager_main_keyboard())


@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")  
async def open_user_management_panel(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –û–¢–õ–ê–î–ö–ê
    print(f"üîç DEBUG: open_user_management_panel –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç DEBUG: roles={roles}, user={user}")
    print(f"üîç DEBUG: message.from_user.id={message.from_user.id}")
    
    if user:
        print(f"üîç DEBUG: user.role={user.role}")
        print(f"üîç DEBUG: user.roles={user.roles}")
        print(f"üîç DEBUG: user.active_role={user.active_role}")
        print(f"üîç DEBUG: user.status={user.status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    print(f"üîç DEBUG: has_admin_access() –≤–µ—Ä–Ω—É–ª: {has_access}")
    
    if not has_access:
        print(f"‚ùå DEBUG: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - roles={roles}, user.role={user.role if user else 'None'}")
        await message.answer(
            get_text('errors.permission_denied', language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    print(f"‚úÖ DEBUG: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        from uk_management_bot.services.user_management_service import UserManagementService
        from uk_management_bot.keyboards.user_management import get_user_management_main_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_user_stats()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await message.answer(
            get_text('user_management.main_title', language=lang),
            reply_markup=get_user_management_main_keyboard(stats, lang)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await message.answer(
            get_text('errors.unknown_error', language=lang),
            reply_markup=get_manager_main_keyboard()
        )


@router.message(F.text == "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
async def list_new_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return

    # –ü—Ä–æ—Å—Ç–∞—è –≤—ã–±–æ—Ä–∫–∞: –≤—Å–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤–∞—è"
    from uk_management_bot.database.models.request import Request
    q = db.query(Request).filter(Request.status == "–ù–æ–≤–∞—è").order_by(Request.created_at.desc())
    requests = q.limit(10).all()

    if not requests:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return

    text = "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):"
    items = [{"id": r.id, "category": r.category, "address": r.address} for r in requests]
    await message.answer(text, reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üí∞ –ó–∞–∫—É–ø")
async def list_purchase_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ –∑–∞–∫—É–ø–µ"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    q = (
        db.query(Request)
        .filter(Request.status == "–ó–∞–∫—É–ø")
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    if not requests:
        await message.answer("–ó–∞—è–≤–æ–∫ –≤ –∑–∞–∫—É–ø–µ –Ω–µ—Ç", reply_markup=get_manager_main_keyboard())
        return
    items = [{"id": r.id, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üí∞ –ó–∞—è–≤–∫–∏ –≤ –∑–∞–∫—É–ø–µ:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.callback_query(F.data.startswith("mview_"))
async def manager_view_request(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏ + –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text("errors.permission_denied", language=lang),
            show_alert=True
        )
        return

    req_id = int(callback.data.replace("mview_", ""))
    r = db.query(Request).filter(Request.id == req_id).first()
    if not r:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{r.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r.category}\n"
        f"–°—Ç–∞—Ç—É—Å: {r.status}\n"
        f"–ê–¥—Ä–µ—Å: {r.address}\n"
        f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {r.urgency}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {r.description[:500]}{'‚Ä¶' if len(r.description) > 500 else ''}\n"
    )
    if r.notes:
        text += f"\n–î–∏–∞–ª–æ–≥:\n{r.notes}"

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É / —É—Ç–æ—á–Ω–µ–Ω–∏–µ / –∑–∞–∫—É–ø / –æ—Ç–º–µ–Ω–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"maccept_{r.id}")],
        [InlineKeyboardButton(text="‚ùì –£—Ç–æ—á–Ω–µ–Ω–∏–µ", callback_data=f"mclarify_{r.id}")],
        [InlineKeyboardButton(text="üí∞ –ó–∞–∫—É–ø", callback_data=f"mpurchase_{r.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"mcancel_{r.id}")],
    ])

    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("maccept_"))
async def manager_accept(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text("errors.permission_denied", language=lang),
            show_alert=True
        )
        return
    
    req_id = int(callback.data.replace("maccept_", ""))
    service = RequestService(db)
    result = service.update_status_by_actor(
        request_id=req_id,
        new_status="–í —Ä–∞–±–æ—Ç–µ",
        actor_telegram_id=callback.from_user.id,
    )
    if not result.get("success"):
        await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
        return
    r = result.get("request")
    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{r.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r.category}\n"
        f"–°—Ç–∞—Ç—É—Å: {r.status}\n"
        f"–ê–¥—Ä–µ—Å: {r.address}\n"
    )
    if r.notes:
        text += f"\n–î–∏–∞–ª–æ–≥:\n{r.notes}"
    await callback.message.edit_text(text)
    await callback.answer("–ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")


@router.callback_query(F.data.startswith("mpurchase_"))
async def manager_purchase(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É –≤ –∑–∞–∫—É–ø"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text("errors.permission_denied", language=lang),
            show_alert=True
        )
        return
    
    req_id = int(callback.data.replace("mpurchase_", ""))
    service = RequestService(db)
    result = service.update_status_by_actor(
        request_id=req_id,
        new_status="–ó–∞–∫—É–ø",
        actor_telegram_id=callback.from_user.id,
    )
    if not result.get("success"):
        await callback.answer(result.get("message", "–û—à–∏–±–∫–∞"), show_alert=True)
        return
    r = result.get("request")
    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{r.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {r.category}\n"
        f"–°—Ç–∞—Ç—É—Å: {r.status}\n"
        f"–ê–¥—Ä–µ—Å: {r.address}\n"
    )
    if r.notes:
        text += f"\n–î–∏–∞–ª–æ–≥:\n{r.notes}"
    await callback.message.edit_text(text)
    await callback.answer("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ '–ó–∞–∫—É–ø'")


@router.callback_query(F.data.startswith("mclarify_"))
async def manager_clarify_ask(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text("errors.permission_denied", language=lang),
            show_alert=True
        )
        return
    
    await state.update_data(manager_target_request=int(callback.data.replace("mclarify_", "")))
    await state.set_state(ManagerStates.clarify_reason)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∑–∞—è–≤–∫–µ:")
    await callback.answer()


@router.message(ManagerStates.clarify_reason)
async def manager_clarify_save(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    service = RequestService(db)
    data = await state.get_data()
    req_id = int(data.get("manager_target_request"))
    reason = message.text.strip()
    # –ï—Å–ª–∏ —É–∂–µ –≤ –£—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–ø–æ–ª–Ω–∏–º –¥–∏–∞–ª–æ–≥; –∏–Ω–∞—á–µ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤ –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    req = db.query(Request).filter(Request.id == req_id).first()
    if req and req.status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
        # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –±–µ–∑ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
        service.update_status_by_actor(
            request_id=req_id,
            new_status=req.status,
            actor_telegram_id=message.from_user.id,
            notes=f"[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä] –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {reason}",
        )
    else:
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –£—Ç–æ—á–Ω–µ–Ω–∏–µ
        service.update_status_by_actor(
            request_id=req_id,
            new_status="–£—Ç–æ—á–Ω–µ–Ω–∏–µ",
            actor_telegram_id=message.from_user.id,
            notes=f"[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä] –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {reason}",
        )
    await message.answer("–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=get_manager_main_keyboard())
    await state.clear()


@router.callback_query(F.data.startswith("mcancel_"))
async def manager_cancel_ask(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await callback.answer(
            get_text("errors.permission_denied", language=lang),
            show_alert=True
        )
        return
    
    await state.update_data(manager_target_request=int(callback.data.replace("mcancel_", "")))
    await state.set_state(ManagerStates.cancel_reason)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:")
    await callback.answer()


@router.message(ManagerStates.cancel_reason)
async def manager_cancel_save(message: Message, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    service = RequestService(db)
    data = await state.get_data()
    req_id = int(data.get("manager_target_request"))
    reason = message.text.strip()
    result = service.update_status_by_actor(
        request_id=req_id,
        new_status="–û—Ç–º–µ–Ω–µ–Ω–∞",
        actor_telegram_id=message.from_user.id,
        notes=f"[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä] –û—Ç–º–µ–Ω–∞: {reason}",
    )
    await state.clear()
    if not result.get("success"):
        await message.answer(f"–û—à–∏–±–∫–∞: {result.get('message')}")
        return
    r = result.get("request")
    text = f"–ó–∞—è–≤–∫–∞ #{r.id} –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    if r and r.notes:
        text += f"\n\n–î–∏–∞–ª–æ–≥:\n{r.notes}"
    await message.answer(text)


@router.message(F.text == "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def list_active_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    active_statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—É–ø", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(active_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    
    if not requests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=get_manager_main_keyboard())
        return
    
    items = [{"id": r.id, "category": r.category, "address": r.address, "status": r.status} for r in requests]
    await message.answer("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:", reply_markup=get_manager_request_list_kb(items, 1, 1))


@router.message(F.text == "üì¶ –ê—Ä—Ö–∏–≤")
async def list_archive_requests(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ê—Ä—Ö–∏–≤: —Ç–æ–ª—å–∫–æ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (‚≠ê) –∏ –û—Ç–º–µ–Ω–µ–Ω–∞ (‚ùå)
    archive_statuses = ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞"]
    q = (
        db.query(Request)
        .filter(Request.status.in_(archive_statuses))
        .order_by(Request.updated_at.desc().nullslast(), Request.created_at.desc())
    )
    requests = q.limit(10).all()
    if not requests:
        await message.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç", reply_markup=get_manager_main_keyboard())
        return
    def _icon(s: str) -> str:
        return {"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞": "‚≠ê", "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå"}.get(s, "")
    # –ö–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for r in requests:
        addr = r.address[:60] + ("‚Ä¶" if len(r.address) > 60 else "")
        text = (
            f"{_icon(r.status)} #{r.id} ‚Ä¢ {r.category} ‚Ä¢ {r.status}\n"
            f"–ê–¥—Ä–µ—Å: {addr}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {r.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        if r.status == "–û—Ç–º–µ–Ω–µ–Ω–∞" and r.notes:
            text += f"\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {r.notes}"
        if r.notes:
            text += f"\n\n–î–∏–∞–ª–æ–≥:\n{r.notes}"
        await message.answer(text)
    await message.answer("üì¶ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–∞", reply_markup=get_manager_main_keyboard())


@router.message(F.text == "üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
async def list_employees(message: Message, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º"""
    lang = message.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_admin_access(roles=roles, user=user):
        await message.answer(
            get_text("errors.permission_denied", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
    groups = {
        "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞": db.query(User).filter(User.role.in_(["executor", "manager"]), User.specialization == SPECIALIZATION_ELECTRIC).all(),
        "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞": db.query(User).filter(User.role.in_(["executor", "manager"]), User.specialization == SPECIALIZATION_PLUMBING).all(),
        "–û—Ö—Ä–∞–Ω–∞": db.query(User).filter(User.role.in_(["executor", "manager"]), User.specialization == SPECIALIZATION_SECURITY).all(),
        "–£–±–æ—Ä–∫–∞": db.query(User).filter(User.role.in_(["executor", "manager"]), User.specialization == SPECIALIZATION_CLEANING).all(),
        "–†–∞–∑–Ω–æ–µ": db.query(User).filter(User.role.in_(["executor", "manager"]), (User.specialization.is_(None)) | (User.specialization == SPECIALIZATION_OTHER)).all(),
    }

    lines = ["üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:"]
    role_display = {"executor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}
    for title, users in groups.items():
        lines.append(f"\n‚Äî {title}:")
        if not users:
            lines.append("  (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)")
            continue
        for u in users[:20]:
            name = (u.first_name or "") + (f" {u.last_name}" if u.last_name else "")
            name = name.strip() or (u.username or str(u.telegram_id))
            lines.append(f"  ‚Ä¢ {role_display.get(u.role, u.role)} ‚Ä¢ {name} (tg_id={u.telegram_id})")
    await message.answer("\n".join(lines), reply_markup=get_manager_main_keyboard())

