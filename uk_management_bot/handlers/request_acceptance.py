"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—ë–º–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º

–í–∫–ª—é—á–∞–µ—Ç:
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
- –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π (1-5 –∑–≤—ë–∑–¥)
- –í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–æ–π –∏ –º–µ–¥–∏–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from datetime import datetime

from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.rating import Rating
from uk_management_bot.keyboards.admin import (
    get_applicant_completed_request_actions_keyboard,
    get_rating_keyboard,
    get_skip_media_keyboard,
)
from uk_management_bot.states.request_acceptance import ApplicantAcceptanceStates
from uk_management_bot.database.session import get_db
from uk_management_bot.services.notification_service import async_notify_request_status_changed
from uk_management_bot.utils.constants import REQUEST_STATUS_APPROVED

import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏")
async def show_pending_acceptance_requests(message: Message, db: Session = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º"""
    try:
        telegram_id = message.from_user.id

        if not db:
            db = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –∂–¥—ë—Ç –ø—Ä–∏—ë–º–∫–∏)
        requests = (
            db.query(Request)
            .filter(
                Request.user_id == user.id,
                Request.status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
            )
            .order_by(Request.updated_at.desc())
            .limit(10)
            .all()
        )

        if not requests:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏.\n\n"
                "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, "
                "–∑–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        text = "‚úÖ <b>–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏—ë–º–∫–∏</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–∏—ë–º–∫–∏:\n\n"

        builder = []
        for req in requests:
            text += f"üìã <b>#{req.request_number}</b>\n"
            text += f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {req.category}\n"
            text += f"   –ê–¥—Ä–µ—Å: {req.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: {req.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            builder.append([
                InlineKeyboardButton(
                    text=f"üìã #{req.request_number} - {req.category}",
                    callback_data=f"view_completed_{req.request_number}"
                )
            ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=builder)

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("view_completed_"))
async def view_completed_request(callback: CallbackQuery, db: Session = None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º"""
    try:
        telegram_id = callback.from_user.id
        request_number = callback.data.replace("view_completed_", "")

        if not db:
            db = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if request.user_id != user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        text = f"üìã <b>–ó–∞—è–≤–∫–∞ #{request.request_number}</b>\n\n"
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        text += f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n\n"

        text += "‚úÖ <b>–û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:</b>\n"
        if request.completion_report:
            text += f"{request.completion_report}\n\n"
        else:
            text += "–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
        completion_media = request.completion_media if request.completion_media else []
        if len(completion_media) > 0:
            text += f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(completion_media)}\n"
            text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞\n\n"

        text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = get_applicant_completed_request_actions_keyboard(request_number)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if len(completion_media) > 0:
            rows = list(keyboard.inline_keyboard)
            rows.insert(0, [InlineKeyboardButton(
                text="üìé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–¥–∏–∞",
                callback_data=f"view_completion_media_{request_number}"
            )])
            keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ {request_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("view_completion_media_"))
async def view_completion_media(callback: CallbackQuery, db: Session = None):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    try:
        from aiogram.types import InputMediaPhoto, InputMediaDocument

        request_number = callback.data.replace("view_completion_media_", "")

        if not db:
            db = next(get_db())

        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        completion_media = request.completion_media if request.completion_media else []

        if not completion_media:
            await callback.answer("–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        await callback.message.answer(
            f"üìé <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–æ –∑–∞—è–≤–∫–µ #{request.request_number}</b>",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        if len(completion_media) > 1:
            media_group = []
            for idx, file_id in enumerate(completion_media):
                try:
                    if idx == 0:
                        media_group.append(InputMediaPhoto(
                            media=file_id,
                            caption=f"–§–æ—Ç–æ {idx+1}/{len(completion_media)}"
                        ))
                    else:
                        media_group.append(InputMediaPhoto(media=file_id))
                except:
                    if idx == 0:
                        media_group.append(InputMediaDocument(
                            media=file_id,
                            caption=f"–§–∞–π–ª {idx+1}/{len(completion_media)}"
                        ))
                    else:
                        media_group.append(InputMediaDocument(media=file_id))

            if media_group:
                await callback.message.answer_media_group(media=media_group)
        else:
            try:
                await callback.message.answer_photo(photo=completion_media[0])
            except:
                try:
                    await callback.message.answer_document(document=completion_media[0])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª")

        await callback.answer("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("accept_request_"))
async def accept_request(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º - –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏"""
    try:
        request_number = callback.data.replace("accept_request_", "")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        keyboard = get_rating_keyboard(request_number)

        await callback.message.edit_text(
            "‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("rate_"))
async def save_rating(callback: CallbackQuery, db: Session = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        telegram_id = callback.from_user.id

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: rate_251013-001_5
        parts = callback.data.replace("rate_", "").split("_")
        request_number = parts[0]
        rating_value = int(parts[1])

        if not db:
            db = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if request.user_id != user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –æ—Ü–µ–Ω–∫—É
        rating = Rating(
            request_number=request_number,
            user_id=user.id,
            rating=rating_value
        )
        db.add(rating)

        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–ü—Ä–∏–Ω—è—Ç–æ"
        old_status = request.status
        request.status = REQUEST_STATUS_APPROVED  # "–ü—Ä–∏–Ω—è—Ç–æ"
        request.completed_at = datetime.now()

        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –≤ –∫–∞–Ω–∞–ª)
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db, request, old_status, REQUEST_STATUS_APPROVED)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–≤—ë–∑–¥–∞–º–∏
        stars = "‚≠ê" * rating_value

        await callback.message.edit_text(
            f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n"
            f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ({rating_value} {'–∑–≤–µ–∑–¥–∞' if rating_value == 1 else '–∑–≤–µ–∑–¥—ã' if rating_value < 5 else '–∑–≤—ë–∑–¥'})\n\n"
            f"–ó–∞—è–≤–∫–∞ #{request_number} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.",
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –ø—Ä–∏–Ω—è—Ç–∞ —Å –æ—Ü–µ–Ω–∫–æ–π {rating_value} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        if db:
            db.rollback()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏", show_alert=True)
    finally:
        if db:
            db.close()


@router.callback_query(F.data.startswith("return_request_"))
async def return_request(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        request_number = callback.data.replace("return_request_", "")

        await state.update_data(request_number=request_number)
        await state.set_state(ApplicantAcceptanceStates.awaiting_return_reason)

        await callback.message.edit_text(
            "‚ùå <b>–í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
            parse_mode="HTML"
        )

        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ApplicantAcceptanceStates.awaiting_return_reason)
async def save_return_reason(message: Message, state: FSMContext, db: Session = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –º–µ–¥–∏–∞"""
    try:
        telegram_id = message.from_user.id
        data = await state.get_data()
        request_number = data.get('request_number')

        if not request_number:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ state
        await state.update_data(return_reason=message.text)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –º–µ–¥–∏–∞
        await state.set_state(ApplicantAcceptanceStates.awaiting_return_media)

        keyboard = get_skip_media_keyboard()

        await message.answer(
            "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—É.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏ {request_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


@router.callback_query(F.data == "skip_return_media")
async def skip_return_media(callback: CallbackQuery, state: FSMContext, db: Session = None):
    """–ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏"""
    try:
        await process_return_request(callback.from_user.id, state, db, callback.message)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –º–µ–¥–∏–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ApplicantAcceptanceStates.awaiting_return_media, F.photo | F.video)
async def save_return_media(message: Message, state: FSMContext, db: Session = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞—è–≤–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º file_id
        file_id = None
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.video:
            file_id = message.video.file_id

        if file_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ state
            data = await state.get_data()
            return_media = data.get('return_media', [])
            return_media.append(file_id)
            await state.update_data(return_media=return_media)

            await message.answer(
                "‚úÖ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
                "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=get_skip_media_keyboard()
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞")


async def process_return_request(telegram_id: int, state: FSMContext, db: Session = None, message_obj=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏"""
    try:
        data = await state.get_data()
        request_number = data.get('request_number')
        return_reason = data.get('return_reason')
        return_media = data.get('return_media', [])

        if not db:
            db = next(get_db())

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            if message_obj:
                await message_obj.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        request = db.query(Request).filter(Request.request_number == request_number).first()

        if not request:
            if message_obj:
                await message_obj.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        old_status = request.status
        request.is_returned = True
        request.return_reason = return_reason
        request.return_media = return_media
        request.returned_by = user.id
        request.returned_at = datetime.now()
        request.status = "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ç—É—Å "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        request.manager_confirmed = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –≤ –∫–∞–Ω–∞–ª)
        try:
            from aiogram import Bot
            bot = Bot.get_current()
            await async_notify_request_status_changed(bot, db, request, old_status, "–ò—Å–ø–æ–ª–Ω–µ–Ω–æ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —Å –¥–µ—Ç–∞–ª—è–º–∏
        try:
            from aiogram import Bot
            import json
            bot = Bot.get_current()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
            managers = db.query(User).filter(
                User.roles.contains('"manager"'),
                User.status == "approved"
            ).all()

            notification_text = (
                f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º!</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{request.format_number_for_display()}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b>\n{return_reason}\n\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            for manager in managers:
                if manager.telegram_id:
                    try:
                        await bot.send_message(manager.telegram_id, notification_text)
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞—è–≤–∫–∏ {request.request_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager.telegram_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager.telegram_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: {e}")

        # –û—á–∏—â–∞–µ–º state
        await state.clear()

        if message_obj:
            await message_obj.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞</b>\n\n"
                f"–í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
                f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.",
                parse_mode="HTML"
            )

        logger.info(f"–ó–∞—è–≤–∫–∞ {request_number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {e}")
        if db:
            db.rollback()
        if message_obj:
            await message_obj.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞—è–≤–∫–∏")
    finally:
        if db:
            db.close()


@router.callback_query(F.data == "back_to_pending_acceptance")
async def back_to_pending_acceptance(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—ë–º–∫–∏ –∑–∞—è–≤–æ–∫"""
    try:
        await callback.message.answer("‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏")
        # Trigger the show_pending_acceptance_requests handler
        from aiogram.types import Message as TgMessage
        fake_msg = type('obj', (object,), {
            'from_user': callback.from_user,
            'answer': callback.message.answer,
            'text': "‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏"
        })()
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏—ë–º–∫–∏' –≤ –º–µ–Ω—é."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
