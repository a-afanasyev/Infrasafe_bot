"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:
- –ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
- –°–ø–∏—Å–∫–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- –î–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
"""

import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from uk_management_bot.services.user_management_service import UserManagementService
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.specialization_service import SpecializationService
from uk_management_bot.states.employee_management import EmployeeManagementStates
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import text
import json
from datetime import datetime

def _format_employee_name(employee) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if employee.first_name and employee.last_name:
        return f"{employee.first_name} {employee.last_name}"
    elif employee.first_name:
        return employee.first_name
    elif employee.username:
        return f"@{employee.username}"
    else:
        return f"ID: {employee.telegram_id}"


async def _return_to_employee_info(callback: CallbackQuery, db: Session, employee_id: int):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)"""
    try:
        lang = callback.from_user.language_code or 'ru'
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee_info = f"üë§ {get_text('employee_management.employee_info', language=lang)}\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
        if employee.first_name and employee.last_name:
            full_name = f"{employee.first_name} {employee.last_name}"
        elif employee.first_name:
            full_name = employee.first_name
        elif employee.username:
            full_name = f"@{employee.username}"
        else:
            full_name = f"ID: {employee.telegram_id}"
            
        employee_info += f"üìù {get_text('employee_management.full_name', language=lang)}: {full_name}\n"
        employee_info += f"üì± {get_text('employee_management.phone', language=lang)}: {employee.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        employee_info += f"üéØ {get_text('employee_management.role', language=lang)}: {employee.role or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        employee_info += f"üìä {get_text('employee_management.status', language=lang)}: {employee.status or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        if employee.specialization:
            employee_info += f"üõ†Ô∏è {get_text('employee_management.specialization', language=lang)}: {employee.specialization}\n"
        
        employee_info += f"üìÖ {get_text('employee_management.created_at', language=lang)}: {employee.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        await callback.message.edit_text(
            employee_info,
            reply_markup=get_employee_actions_keyboard(employee_id, employee.status, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )
from uk_management_bot.keyboards.employee_management import (
    get_employee_management_main_keyboard,
    get_employee_list_keyboard,
    get_employee_actions_keyboard,
    get_roles_management_keyboard,
    get_specializations_selection_keyboard,
    get_cancel_keyboard,
    get_confirmation_keyboard
)
from uk_management_bot.states.employee_management import EmployeeManagementStates
from uk_management_bot.utils.helpers import get_text
from uk_management_bot.utils.auth_helpers import has_admin_access
from uk_management_bot.database.models.user import User

logger = logging.getLogger(__name__)
router = Router()


# ‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "employee_management_panel")
async def show_employee_management_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
    logger.debug(f"Employee management panel called: callback_data={callback.data}")
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    logger.debug(f" has_access = {has_access}, roles = {roles}, user = {user}")
    
    if not has_access:
        logger.debug(f"Access denied for user {callback.from_user.id}")
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        logger.debug(f" –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_employee_stats()
        logger.debug(f" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            title = get_text('employee_management.main_title', language=lang)
            keyboard = get_employee_management_main_keyboard(stats, lang)
            logger.debug(f" –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            logger.debug(f" –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            await callback.message.edit_text(
                title,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            raise
        
        await callback.answer()
        logger.debug(f" –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data == "employee_mgmt_main")
async def back_to_main_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await show_employee_management_panel(callback, db, roles, active_role, user)


@router.callback_query(F.data == "employee_mgmt_stats")
async def show_employee_stats(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        user_mgmt_service = UserManagementService(db)
        stats = user_mgmt_service.get_employee_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä {get_text('employee_management.stats_title', language=lang)}\n\n"
        stats_text += f"üìù {get_text('employee_management.pending_employees', language=lang)}: {stats.get('pending', 0)}\n"
        stats_text += f"‚úÖ {get_text('employee_management.active_employees', language=lang)}: {stats.get('active', 0)}\n"
        stats_text += f"üö´ {get_text('employee_management.blocked_employees', language=lang)}: {stats.get('blocked', 0)}\n"
        stats_text += f"üõ†Ô∏è {get_text('employee_management.executors', language=lang)}: {stats.get('executors', 0)}\n"
        stats_text += f"üë®‚Äçüíº {get_text('employee_management.managers', language=lang)}: {stats.get('managers', 0)}\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_employee_management_main_keyboard(stats, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –°–ü–ò–°–ö–ò –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("employee_mgmt_list_"))
async def show_employee_list(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    logger.debug(f" show_employee_list –≤—ã–∑–≤–∞–Ω–∞ —Å callback_data: {callback.data}")
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    logger.debug(f" has_access = {has_access}, roles = {roles}, user = {user}")
    
    if not has_access:
        logger.debug(f"Access denied for user {callback.from_user.id}")
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        parts = callback.data.split('_')
        list_type = parts[3]  # pending, active, blocked, executors, managers
        page = int(parts[4]) if len(parts) > 4 else 1
        
        logger.debug(f" –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: —Ç–∏–ø={list_type}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page}")
        
        user_mgmt_service = UserManagementService(db)
        employees_data = user_mgmt_service.get_employees_list(list_type, page)
        
        logger.debug(f" –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees_data.get('employees', []))} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_map = {
            'pending': get_text('employee_management.pending_employees', language=lang),
            'active': get_text('employee_management.active_employees', language=lang),
            'blocked': get_text('employee_management.blocked_employees', language=lang),
            'executors': get_text('employee_management.executors', language=lang),
            'managers': get_text('employee_management.managers', language=lang)
        }
        
        title = f"üë• {title_map.get(list_type, list_type)}"
        
        await callback.message.edit_text(
            title,
            reply_markup=get_employee_list_keyboard(employees_data, list_type, lang)
        )
        
        await callback.answer()
        logger.debug(f" –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –î–ï–ô–°–¢–í–ò–Ø –° –°–û–¢–†–£–î–ù–ò–ö–ê–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("employee_mgmt_employee_"))
async def show_employee_actions(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"""
    logger.debug(f" show_employee_actions –≤—ã–∑–≤–∞–Ω–∞ —Å callback_data: {callback.data}")
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    logger.debug(f" has_access = {has_access}, roles = {roles}, user = {user}")
    
    if not has_access:
        logger.debug(f"Access denied for user {callback.from_user.id}")
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_id = int(callback.data.split('_')[3])
        logger.debug(f" –ó–∞–ø—Ä–æ—à–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID: {employee_id}")
        
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        logger.debug(f" –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {employee}")
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee_info = f"üë§ {get_text('employee_management.employee_info', language=lang)}\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
        if employee.first_name and employee.last_name:
            full_name = f"{employee.first_name} {employee.last_name}"
        elif employee.first_name:
            full_name = employee.first_name
        elif employee.username:
            full_name = f"@{employee.username}"
        else:
            full_name = f"ID: {employee.telegram_id}"
            
        employee_info += f"üìù {get_text('employee_management.full_name', language=lang)}: {full_name}\n"
        employee_info += f"üì± {get_text('employee_management.phone', language=lang)}: {employee.phone or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if employee.roles:
            try:
                user_roles = json.loads(employee.roles)
                if user_roles:
                    roles_text = ", ".join(user_roles)
                    employee_info += f"üéØ {get_text('employee_management.role', language=lang)}: {roles_text}\n"
                else:
                    employee_info += f"üéØ {get_text('employee_management.role', language=lang)}: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.id}: {e}")
                employee_info += f"üéØ {get_text('employee_management.role', language=lang)}: {employee.role or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        else:
            employee_info += f"üéØ {get_text('employee_management.role', language=lang)}: {employee.role or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        employee_info += f"üìä {get_text('employee_management.status', language=lang)}: {employee.status or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        if employee.specialization:
            employee_info += f"üõ†Ô∏è {get_text('employee_management.specialization', language=lang)}: {employee.specialization}\n"
        
        employee_info += f"üìÖ {get_text('employee_management.created_at', language=lang)}: {employee.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        await callback.message.edit_text(
            employee_info,
            reply_markup=get_employee_actions_keyboard(employee_id, employee.status, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –û–î–û–ë–†–ï–ù–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("approve_employee_"))
async def approve_employee(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û–¥–æ–±—Ä–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        auth_service = AuthService(db)
        success = auth_service.approve_user(employee_id, current_user.id, "–û–¥–æ–±—Ä–µ–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        
        if success:
            await callback.answer(
                get_text('employee_management.employee_approved', language=lang),
                show_alert=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_employee_list(callback, db, roles, active_role, user)
        else:
            await callback.answer(
                get_text('errors.unknown_error', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("reject_employee_"))
async def reject_employee(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        auth_service = AuthService(db)
        success = auth_service.block_user(employee_id, current_user.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        
        if success:
            await callback.answer(
                get_text('employee_management.employee_rejected', language=lang),
                show_alert=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_employee_list(callback, db, roles, active_role, user)
        else:
            await callback.answer(
                get_text('errors.unknown_error', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ë–õ–û–ö–ò–†–û–í–ö–ê/–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("block_employee_"))
async def block_employee(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        auth_service = AuthService(db)
        success = auth_service.block_user(employee_id, current_user.id, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        
        if success:
            await callback.answer(
                get_text('employee_management.employee_blocked', language=lang),
                show_alert=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_employee_list(callback, db, roles, active_role, user)
        else:
            await callback.answer(
                get_text('errors.unknown_error', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("unblock_employee_"))
async def unblock_employee(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        auth_service = AuthService(db)
        success = auth_service.approve_user(employee_id, current_user.id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        
        if success:
            await callback.answer(
                get_text('employee_management.employee_unblocked', language=lang),
                show_alert=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_employee_list(callback, db, roles, active_role, user)
        else:
            await callback.answer(
                get_text('errors.unknown_error', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("edit_employee_name_"))
async def edit_employee_name(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data({
            'target_employee_id': employee_id,
            'action': 'edit_name'
        })
        
        await state.set_state(EmployeeManagementStates.editing_full_name)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –§–ò–û
        await callback.message.edit_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è {_format_employee_name(employee)}:\n\n"
            f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {employee.first_name or ''} {employee.last_name or ''}",
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.callback_query(F.data.startswith("edit_employee_phone_"))
async def edit_employee_phone(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data({
            'target_employee_id': employee_id,
            'action': 'edit_phone'
        })
        
        await state.set_state(EmployeeManagementStates.editing_phone)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        await callback.message.edit_text(
            f"üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {_format_employee_name(employee)}:\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {employee.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}",
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


@router.message(EmployeeManagementStates.editing_full_name)
async def process_employee_name_edit(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        new_name = message.text.strip()
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        
        if not new_name:
            await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û
        user = db.query(User).filter(User.id == target_employee_id).first()
        if user:
            # –†–∞–∑–¥–µ–ª—è–µ–º –§–ò–û –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
            name_parts = new_name.split()
            if len(name_parts) >= 2:
                user.first_name = name_parts[0]
                user.last_name = ' '.join(name_parts[1:])
            else:
                user.first_name = new_name
                user.last_name = None
            
            db.commit()
            
            await message.answer(f"‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
        else:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –§–ò–û")
        await state.clear()


@router.message(EmployeeManagementStates.editing_phone)
async def process_employee_phone_edit(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        new_phone = message.text.strip()
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        
        if not new_phone:
            await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        user = db.query(User).filter(User.id == target_employee_id).first()
        if user:
            user.phone = new_phone
            db.commit()
            
            await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {new_phone}")
        else:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        await state.clear()


@router.callback_query(F.data.startswith("change_employee_role_"))
async def change_employee_role(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏
        user_roles = []
        if employee.roles:
            try:
                user_roles = json.loads(employee.roles)
            except (json.JSONDecodeError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {employee.id}: {e}")
                user_roles = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data({
            'target_employee_id': employee_id,
            'original_roles': user_roles.copy(),
            'current_roles': user_roles.copy()
        })
        
        await state.set_state(EmployeeManagementStates.selecting_roles)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = _format_employee_name(employee)
        message_text = f"üéØ {get_text('employee_management.change_role', language=lang)}: {user_name}\n\n"
        message_text += f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: {', '.join(user_roles) if user_roles else '–ù–µ—Ç —Ä–æ–ª–µ–π'}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π
        from uk_management_bot.keyboards.employee_management import get_roles_management_keyboard
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_roles_management_keyboard(user_roles, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("delete_employee_"))
async def delete_employee(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        auth_service = AuthService(db)
        success = auth_service.delete_user(employee_id, current_user.id, "–£–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏")
        
        if success:
            await callback.answer(
                get_text('employee_management.employee_deleted', language=lang),
                show_alert=True
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await show_employee_list(callback, db, roles, active_role, user)
        else:
            await callback.answer(
                get_text('errors.unknown_error', language=lang),
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("change_employee_specialization_"))
async def change_employee_specialization(callback: CallbackQuery, state: FSMContext, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        employee_id = int(callback.data.split('_')[3])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        user_mgmt_service = UserManagementService(db)
        employee = user_mgmt_service.get_user_by_id(employee_id)
        
        if not employee:
            await callback.answer(
                get_text('errors.user_not_found', language=lang),
                show_alert=True
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        user_specializations = []
        if employee.specialization:
            try:
                user_specializations = json.loads(employee.specialization)
            except:
                # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç—ã–º–∏
                if isinstance(employee.specialization, str):
                    user_specializations = [s.strip() for s in employee.specialization.split(',') if s.strip()]
                else:
                    user_specializations = []
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data({
            'target_employee_id': employee_id,
            'original_specializations': user_specializations.copy(),
            'current_specializations': user_specializations.copy()
        })
        
        await state.set_state(EmployeeManagementStates.selecting_specializations)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = _format_employee_name(employee)
        message_text = f"üõ†Ô∏è {get_text('employee_management.specialization', language=lang)}: {user_name}\n\n"
        message_text += f"{get_text('specializations.current_specializations', language=lang)}: "
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if user_specializations:
            spec_names = []
            for spec in user_specializations:
                spec_text = get_text(f'specializations.{spec}', language=lang, default=spec)
                spec_names.append(spec_text)
            message_text += ", ".join(spec_names)
        else:
            message_text += "–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        from uk_management_bot.keyboards.employee_management import get_specializations_selection_keyboard
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_specializations_selection_keyboard(user_specializations, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –ü–û–ò–°–ö –°–û–¢–†–£–î–ù–ò–ö–û–í ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "employee_mgmt_search")
async def start_employee_search(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        await callback.message.edit_text(
            get_text('employee_management.search_instructions', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø–ú–ò ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "employee_mgmt_specializations")
async def show_employee_specializations_management(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    lang = callback.from_user.language_code or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_access = has_admin_access(roles=roles, user=user)
    
    if not has_access:
        await callback.answer(
            get_text('errors.permission_denied', language=lang),
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º
        spec_service = SpecializationService(db)
        detailed_stats = spec_service.get_detailed_specialization_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        message_text = "üõ†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        
        if detailed_stats:
            for spec_key, spec_data in detailed_stats.items():
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                spec_name = get_text(f'specializations.{spec_key}', language=lang)
                count = spec_data['count']
                employees = spec_data['employees']
                
                message_text += f"‚Ä¢ {spec_name}: {count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                if employees:
                    for employee in employees:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                        if employee.first_name and employee.last_name:
                            employee_name = f"{employee.first_name} {employee.last_name}"
                        elif employee.first_name:
                            employee_name = employee.first_name
                        elif employee.username:
                            employee_name = f"@{employee.username}"
                        else:
                            employee_name = f"ID: {employee.telegram_id}"
                        
                        message_text += f"  - {employee_name}\n"
                else:
                    message_text += f"  - –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                
                message_text += "\n"
        else:
            message_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ö\n"
        
        message_text += "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏' ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'"
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        from uk_management_bot.keyboards.employee_management import get_cancel_keyboard
        await callback.message.edit_text(
            message_text,
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )


# ‚ïê‚ïê‚ïê –í–´–ë–û–† –†–û–õ–ï–ô –ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ô ‚ïê‚ïê‚ïê

@router.callback_query(F.data.startswith("role_toggle_"), EmployeeManagementStates.selecting_roles)
async def toggle_role(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å"""
    try:
        role = callback.data.split('_')[-1]
        data = await state.get_data()
        current_roles = data.get('current_roles', [])
        
        if role in current_roles:
            current_roles.remove(role)
        else:
            current_roles.append(role)
        
        await state.update_data(current_roles=current_roles)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.keyboards.employee_management import get_roles_management_keyboard
        lang = callback.from_user.language_code or 'ru'
        
        await callback.message.edit_reply_markup(
            reply_markup=get_roles_management_keyboard(current_roles, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "role_save", EmployeeManagementStates.selecting_roles)
async def save_employee_roles(callback: CallbackQuery, state: FSMContext, db: Session):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        original_roles = data.get('original_roles', [])
        current_roles = data.get('current_roles', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ä–æ–ª–∏
        if set(original_roles) == set(current_roles):
            await callback.answer("–†–æ–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å", show_alert=True)
            await state.clear()
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await state.update_data({'action': 'roles_change'})
        await state.set_state(EmployeeManagementStates.waiting_for_role_comment)
        
        lang = callback.from_user.language_code or 'ru'
        await callback.message.edit_text(
            get_text('moderation.enter_role_change_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "role_cancel", EmployeeManagementStates.selecting_roles)
async def cancel_roles_editing(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π"""
    try:
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        await _return_to_employee_info(callback, db, target_employee_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(EmployeeManagementStates.waiting_for_role_comment)
async def process_role_change_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
    try:
        comment = message.text
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        current_roles = data.get('current_roles', [])
        
        logger.debug(f" –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–æ–ª–µ–π. target_employee_id={target_employee_id}, current_roles={current_roles}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not current_user:
            logger.error(f"User not found: telegram_id={message.from_user.id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == target_employee_id).first()
        if user:
            logger.debug(f" –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π: {user.id}")
            
            old_roles = []
            if user.roles:
                try:
                    old_roles = json.loads(user.roles)
                except:
                    old_roles = []
            
            logger.debug(f" –°—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏: {old_roles}, –Ω–æ–≤—ã–µ —Ä–æ–ª–∏: {current_roles}")
            
            user.roles = json.dumps(current_roles)
            if current_roles:
                user.role = current_roles[0]  # –ü–µ—Ä–≤–∞—è —Ä–æ–ª—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç –ª–æ–≥–µ
            try:
                from uk_management_bot.database.models.audit import AuditLog
                audit = AuditLog(
                    action="role_change",
                    user_id=current_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    telegram_user_id=user.telegram_id,  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Ä–æ–ª–∏
                    details=json.dumps({
                        "target_user_id": target_employee_id,
                        "old_roles": old_roles,
                        "new_roles": current_roles,
                        "comment": comment,
                        "timestamp": datetime.now().isoformat()
                    })
                )
                db.add(audit)
                logger.debug(f" AuditLog —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as audit_error:
                logger.error(f"Failed to create AuditLog: {audit_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –∞—É–¥–∏—Ç –Ω–µ —É–¥–∞–ª—Å—è
            
            db.commit()
            logger.debug(f" –†–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            logger.error(f"Employee not found: ID {target_employee_id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        await state.clear()
        
        lang = message.from_user.language_code or 'ru'
        await message.answer(
            f"‚úÖ –†–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(current_roles) if current_roles else '–ù–µ—Ç —Ä–æ–ª–µ–π'}"
        )
        
    except Exception as e:
        logger.error(f"Error processing role change comment: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π")
        await state.clear()


@router.callback_query(F.data.startswith("spec_toggle_"), EmployeeManagementStates.selecting_specializations)
async def toggle_specialization(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    try:
        specialization = callback.data.split('_')[-1]
        data = await state.get_data()
        current_specializations = data.get('current_specializations', [])
        
        if specialization in current_specializations:
            current_specializations.remove(specialization)
        else:
            current_specializations.append(specialization)
        
        await state.update_data(current_specializations=current_specializations)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from uk_management_bot.keyboards.employee_management import get_specializations_selection_keyboard
        lang = callback.from_user.language_code or 'ru'
        
        await callback.message.edit_reply_markup(
            reply_markup=get_specializations_selection_keyboard(current_specializations, lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "spec_save", EmployeeManagementStates.selecting_specializations)
async def save_employee_specializations(callback: CallbackQuery, state: FSMContext, db: Session):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        original_specializations = data.get('original_specializations', [])
        current_specializations = data.get('current_specializations', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if set(original_specializations) == set(current_specializations):
            await callback.answer("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å", show_alert=True)
            await state.clear()
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await state.update_data({'action': 'specializations_change'})
        await state.set_state(EmployeeManagementStates.waiting_for_specialization_comment)
        
        lang = callback.from_user.language_code or 'ru'
        await callback.message.edit_text(
            get_text('moderation.enter_specialization_change_comment', language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "spec_cancel", EmployeeManagementStates.selecting_specializations)
async def cancel_specializations_editing(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    try:
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        await _return_to_employee_info(callback, db, target_employee_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(EmployeeManagementStates.waiting_for_specialization_comment)
async def process_specialization_change_comment(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
    try:
        comment = message.text
        data = await state.get_data()
        target_employee_id = data.get('target_employee_id')
        current_specializations = data.get('current_specializations', [])
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not current_user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É (–æ–±—Ö–æ–¥—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞)
        user = db.query(User).filter(User.id == target_employee_id).first()
        if user:
            old_specializations = []
            if user.specialization:
                try:
                    old_specializations = json.loads(user.specialization)
                except:
                    if isinstance(user.specialization, str):
                        old_specializations = [s.strip() for s in user.specialization.split(',') if s.strip()]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
            user.specialization = json.dumps(current_specializations)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç –ª–æ–≥–µ
            try:
                from uk_management_bot.database.models.audit import AuditLog
                audit = AuditLog(
                    action="specialization_change",
                    user_id=current_user.id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    telegram_user_id=user.telegram_id,  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    details=json.dumps({
                        "target_user_id": target_employee_id,
                        "old_specializations": old_specializations,
                        "new_specializations": current_specializations,
                        "comment": comment,
                        "timestamp": datetime.now().isoformat()
                    })
                )
                db.add(audit)
            except Exception as audit_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AuditLog: {audit_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –∞—É–¥–∏—Ç –Ω–µ —É–¥–∞–ª—Å—è
            
            db.commit()
            success = True
        else:
            success = False
        
        await state.clear()
        
        if success:
            lang = message.from_user.language_code or 'ru'
            await message.answer(
                f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(current_specializations) if current_specializations else '–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π'}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        await state.clear()


# ‚ïê‚ïê‚ïê –ù–ê–í–ò–ì–ê–¶–ò–Ø ‚ïê‚ïê‚ïê

@router.callback_query(F.data == "no_action")
async def no_action_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery, db: Session, roles: list = None, active_role: str = None, user: User = None):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    lang = callback.from_user.language_code or 'ru'
    
    try:
        from uk_management_bot.keyboards.admin import get_manager_main_keyboard
        
        await callback.message.edit_text(
            get_text('admin.panel_title', language=lang),
            reply_markup=get_manager_main_keyboard()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        await callback.answer(
            get_text('errors.unknown_error', language=lang),
            show_alert=True
        )
