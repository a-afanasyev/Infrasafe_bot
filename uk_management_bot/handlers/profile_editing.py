"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from uk_management_bot.database.session import get_db
from uk_management_bot.database.models.user import User
from uk_management_bot.states.profile_editing import ProfileEditingStates
from uk_management_bot.keyboards.profile import (
    get_profile_edit_keyboard,
    get_language_choice_keyboard,
    get_cancel_keyboard
)
from uk_management_bot.keyboards.base import get_role_switch_inline
from uk_management_bot.utils.helpers import get_text

router = Router()
logger = logging.getLogger(__name__)

def get_user_language(db: Session, telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if user:
            language = user.language if user.language else "ru"
            logger.debug(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {language}")
            return language
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return "ru"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return "ru"


@router.callback_query(F.data == "edit_profile")
async def handle_edit_profile_start(callback: CallbackQuery, state: FSMContext, db: Session):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        lang = get_user_language(db, callback.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        await callback.message.edit_text(
            get_text("profile.edit_title", language=lang),
            reply_markup=get_profile_edit_keyboard(lang, user)
        )

        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "cancel_profile_edit")
async def handle_cancel_profile_edit(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏
        import json
        roles = ["applicant"]
        try:
            if user.roles:
                parsed_roles = json.loads(user.roles)
                if isinstance(parsed_roles, list):
                    roles = [str(r) for r in parsed_roles if isinstance(r, str)]
        except (json.JSONDecodeError, TypeError, AttributeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            roles = ["applicant"]
        
        active_role = user.active_role or roles[0] if roles else "applicant"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        from uk_management_bot.services.profile_service import ProfileService
        profile_service = ProfileService(db)
        profile_data = profile_service.get_user_profile_data(callback.from_user.id)
        
        if profile_data:
            lang = get_user_language(db, callback.from_user.id)
            profile_text = profile_service.format_profile_text(profile_data, language=lang)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
            keyboard = get_role_switch_inline(roles, active_role)
            rows = list(keyboard.inline_keyboard)
            rows.append([{"text": get_text("profile.edit", language=lang), "callback_data": "edit_profile"}])
            
            from aiogram.types import InlineKeyboardMarkup
            new_keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
            
            await callback.message.edit_text(profile_text, reply_markup=new_keyboard)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {type(e).__name__}", show_alert=True)


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–†–ï–°–û–í =====

@router.callback_query(F.data == "edit_home_address")
async def handle_edit_home_address(callback: CallbackQuery, state: FSMContext, db: Session):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        
        await callback.message.edit_text(
            get_text("profile.enter_home_address", language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await state.set_state(ProfileEditingStates.waiting_for_home_address)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_home_address)
async def handle_home_address_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    # –£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä
    try:
        lang = get_user_language(db, message.from_user.id)

        await state.clear()
        await message.answer(
            "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üèòÔ∏è –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã' –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤.",
            reply_markup=get_profile_edit_keyboard(lang)
        )

        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø–∞–ª –≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
        await state.clear()


@router.callback_query(F.data == "edit_apartment_address")
async def handle_edit_apartment_address(callback: CallbackQuery, state: FSMContext, db: Session):
    """
    –£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üèòÔ∏è –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏."
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–¥—Ä–µ—Å–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_apartment_address)
async def handle_apartment_address_input(message: Message, state: FSMContext, db: Session):
    """
    –£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    try:
        await state.clear()
        await message.answer(
            "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üèòÔ∏è –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏."
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø–∞–ª –≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ apartment_address")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()


@router.callback_query(F.data == "edit_yard_address")
async def handle_edit_yard_address(callback: CallbackQuery, state: FSMContext, db: Session):
    """
    –£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    try:
        await state.clear()
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üèòÔ∏è –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏."
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–¥—Ä–µ—Å–∞ –¥–≤–æ—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_yard_address)
async def handle_yard_address_input(message: Message, state: FSMContext, db: Session):
    """
    –£–°–¢–ê–†–ï–í–®–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    try:
        await state.clear()
        await message.answer(
            "‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üèòÔ∏è –ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏."
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø–∞–ª –≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ yard_address")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–≤–æ—Ä–∞: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–õ–ï–§–û–ù–ê =====

@router.callback_query(F.data == "edit_phone")
async def handle_edit_phone(callback: CallbackQuery, state: FSMContext, db: Session):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        
        await callback.message.edit_text(
            get_text("profile.enter_phone", language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await state.set_state(ProfileEditingStates.waiting_for_phone)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_phone)
async def handle_phone_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        lang = get_user_language(db, message.from_user.id)
        phone = message.text.strip()
        
        if not phone:
            await message.answer(get_text("profile.phone_empty", language=lang))
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_clean = phone.replace('+', '').replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
        if not phone_clean.isdigit() or len(phone_clean) < 10:
            await message.answer(get_text("profile.phone_invalid", language=lang))
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.phone = phone
            db.commit()
            
            await message.answer(
                get_text("profile.phone_updated", language=lang),
                reply_markup=get_profile_edit_keyboard(lang)
            )
        else:
            await message.answer(get_text("errors.user_not_found", language=lang))
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –Ø–ó–´–ö–ê =====

@router.callback_query(F.data == "edit_language")
async def handle_edit_language(callback: CallbackQuery, state: FSMContext, db: Session):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        
        await callback.message.edit_text(
            get_text("profile.select_language", language=lang),
            reply_markup=get_language_choice_keyboard(lang)
        )
        
        await state.set_state(ProfileEditingStates.waiting_for_language_choice)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_language_"))
async def handle_language_choice(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        selected_lang = callback.data.replace("set_language_", "")
        
        if selected_lang not in ["ru", "uz"]:
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if user:
            user.language = selected_lang
            db.commit()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            new_lang = selected_lang
            await callback.message.edit_text(
                get_text("profile.language_updated", language=new_lang),
                reply_markup=get_profile_edit_keyboard(new_lang)
            )
        else:
            await callback.answer(get_text("errors.user_not_found", language=lang), show_alert=True)
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()


# ===== –û–¢–ú–ï–ù–ê –û–ü–ï–†–ê–¶–ò–ô =====

@router.callback_query(F.data == "cancel_input")
async def handle_cancel_input(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = get_user_language(db, callback.from_user.id)
        logger.info(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {lang}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_text = get_text("profile.edit_title", language=lang)
        logger.info(f"–¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: {title_text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_profile_edit_keyboard(lang)
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {keyboard}")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            title_text,
            reply_markup=keyboard
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
        await callback.answer()
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {type(e).__name__}"
        await callback.answer(error_message, show_alert=True)


@router.callback_query(F.data == "cancel_language_choice")
async def handle_cancel_language_choice(callback: CallbackQuery, state: FSMContext, db: Session):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        await handle_cancel_input(callback, state, db)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: {type(e).__name__}", show_alert=True)


# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–û =====

@router.callback_query(F.data == "edit_first_name")
async def handle_edit_first_name(callback: CallbackQuery, state: FSMContext, db: Session):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        
        await callback.message.edit_text(
            get_text("profile.enter_first_name", language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await state.set_state(ProfileEditingStates.waiting_for_first_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_first_name)
async def handle_first_name_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    try:
        lang = get_user_language(db, message.from_user.id)
        first_name = message.text.strip()
        
        if not first_name:
            await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.first_name = first_name
            db.commit()
            
            await message.answer(
                get_text("profile.first_name_updated", language=lang),
                reply_markup=get_profile_edit_keyboard(lang)
            )
        else:
            await message.answer(get_text("errors.user_not_found", language=lang))
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()


@router.callback_query(F.data == "edit_last_name")
async def handle_edit_last_name(callback: CallbackQuery, state: FSMContext, db: Session):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
    try:
        lang = get_user_language(db, callback.from_user.id)
        
        await callback.message.edit_text(
            get_text("profile.enter_last_name", language=lang),
            reply_markup=get_cancel_keyboard(lang)
        )
        
        await state.set_state(ProfileEditingStates.waiting_for_last_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(ProfileEditingStates.waiting_for_last_name)
async def handle_last_name_input(message: Message, state: FSMContext, db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    try:
        lang = get_user_language(db, message.from_user.id)
        last_name = message.text.strip()
        
        if not last_name:
            await message.answer("‚ùå –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.last_name = last_name
            db.commit()
            
            await message.answer(
                get_text("profile.last_name_updated", language=lang),
                reply_markup=get_profile_edit_keyboard(lang)
            )
        else:
            await message.answer(get_text("errors.user_not_found", language=lang))
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏: {e}")
        await message.answer(get_text("errors.unknown_error", language=lang))
        await state.clear()
