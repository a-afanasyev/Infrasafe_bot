from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from uk_management_bot.services.auth_service import AuthService
from uk_management_bot.services.invite_service import InviteService, InviteRateLimiter
from uk_management_bot.keyboards.base import (
    get_main_keyboard,
    get_cancel_keyboard,
    get_main_keyboard_for_role,
    get_role_switch_inline,
    get_user_contextual_keyboard,
)
from uk_management_bot.keyboards.shifts import get_shifts_main_keyboard
from uk_management_bot.services.notification_service import async_notify_role_switched
from uk_management_bot.utils.helpers import get_text
import logging

logger = logging.getLogger(__name__)

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ —Ä–æ—É—Ç–µ—Ä
from uk_management_bot.middlewares.auth import auth_middleware, role_mode_middleware
router.message.middleware(auth_middleware)
router.message.middleware(role_mode_middleware)
router.callback_query.middleware(auth_middleware)
router.callback_query.middleware(role_mode_middleware)

class AdminPasswordStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    waiting_for_password = State()

@router.message(Command("start"))
async def cmd_start(message: Message, db: Session, roles: list[str] = None, active_role: str = None, user_status: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –¢–µ–∫—Å—Ç: '{message.text}'")
    auth_service = AuthService(db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if message.text and len(message.text.split()) > 1:
        param = message.text.split()[1].strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ join —Å —Ç–æ–∫–µ–Ω–æ–º
        if param.startswith("join_"):
            token = param.replace("join_", "")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            if token.startswith("invite_v1:"):
                lang = message.from_user.language_code or "ru"
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
                if not InviteRateLimiter.is_allowed(message.from_user.id):
                    remaining_minutes = InviteRateLimiter.get_remaining_time(message.from_user.id) // 60
                    await message.answer(
                        get_text("invites.rate_limited", language=lang, minutes=remaining_minutes)
                    )
                    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω rate limit –¥–ª—è /start —Å —Ç–æ–∫–µ–Ω–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                    return
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                invite_service = InviteService(db)
                
                try:
                    invite_data = invite_service.validate_invite(token)
                except ValueError as e:
                    error_msg = str(e).lower()
                    if "expired" in error_msg:
                        await message.answer(get_text("invites.expired_token", language=lang))
                    elif "already used" in error_msg:
                        await message.answer(get_text("invites.used_token", language=lang))
                    else:
                        await message.answer(get_text("invites.invalid_token", language=lang))
                    
                    logger.info(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ /start –æ—Ç {message.from_user.id}: {e}")
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                user = await auth_service.process_invite_join(
                    telegram_id=message.from_user.id,
                    invite_data=invite_data,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                
                # –û—Ç–º–µ—á–∞–µ–º nonce –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                invite_service.mark_nonce_used(
                    invite_data["nonce"], 
                    message.from_user.id, 
                    invite_data
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                role = invite_data["role"]
                role_name = get_text(f"roles.{role}", language=lang)
                
                success_message = get_text(
                    "invites.success_joined", 
                    language=lang, 
                    role=role_name
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if role == "executor" and invite_data.get("specialization"):
                    specializations = invite_data["specialization"].split(",")
                    spec_names = [get_text(f"specializations.{spec.strip()}", language=lang) for spec in specializations]
                    success_message += f"\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {', '.join(spec_names)}"
                
                await message.answer(success_message)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ /start")
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤ /start –æ—Ç {message.from_user.id}: {e}")
                await message.answer(get_text("invites.invalid_token", language=lang))
                return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É /start
    await handle_regular_start(message, db, roles, active_role, user_status)

async def handle_regular_start(message: Message, db: Session, roles: list[str] = None, active_role: str = None, user_status: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
    auth_service = AuthService(db)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await auth_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.language_code:
        await auth_service.update_user_language(
            message.from_user.id, 
            message.from_user.language_code
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    lang = message.from_user.language_code or "ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –ø—Ä–æ—Ñ–∏–ª—è
    is_profile_complete = user.phone and user.home_address
    
    if not is_profile_complete and user.status == "pending":
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        welcome_text = get_text("onboarding.welcome_new_user", language=lang)
        welcome_text += f"\n\n{get_text('onboarding.profile_incomplete', language=lang)}"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        missing_items = []
        if not user.phone:
            missing_items.append("üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" if lang == "ru" else "üì± Telefon ko'rsatish")
        if not user.home_address:
            missing_items.append("üè† –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å" if lang == "ru" else "üè† Manzil ko'rsatish")
        
        if missing_items:
            onboarding_keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=item)] for item in missing_items],
                resize_keyboard=True,
                one_time_keyboard=False
            )
            await message.answer(welcome_text, reply_markup=onboarding_keyboard)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥")
            return
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = get_text("welcome", language=lang)
    
    if user.status == "pending":
        welcome_text += f"\n\n{get_text('auth.pending', language=lang)}"
    elif user.status == "blocked":
        welcome_text += f"\n\n{get_text('auth.blocked', language=lang)}"
    else:
        welcome_text += f"\n\n{get_text('auth.approved', language=lang)}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ middleware –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ roles/active_role ‚Äî –±–µ—Ä—ë–º –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    roles = roles or ["applicant"]
    active_role = active_role or roles[0]
    try:
        import json
        db_roles = []
        if getattr(user, "roles", None):
            parsed = json.loads(user.roles)
            if isinstance(parsed, list) and parsed:
                db_roles = [str(r) for r in parsed if isinstance(r, str)]
        if db_roles:
            roles = db_roles
        if getattr(user, "active_role", None):
            active_role = user.active_role if user.active_role in roles else roles[0]
    except Exception:
        pass

    await message.answer(welcome_text, reply_markup=get_main_keyboard_for_role(active_role, roles, user.status))
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
# Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /start

@router.callback_query(F.data == "restart_bot")
async def handle_restart_bot(callback: CallbackQuery, db: Session, roles: list[str] = None, active_role: str = None, user_status: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auth_service = AuthService(db)
        user = await auth_service.get_user_by_telegram_id(callback.from_user.id)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if callback.from_user.language_code:
            await auth_service.update_user_language(
                callback.from_user.id, 
                callback.from_user.language_code
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        lang = callback.from_user.language_code or "ru"
        welcome_text = "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        roles = roles or ["applicant"]
        active_role = active_role or roles[0]
        try:
            import json
            db_roles = []
            if getattr(user, "roles", None):
                parsed = json.loads(user.roles)
                if isinstance(parsed, list) and parsed:
                    db_roles = [str(r) for r in parsed if isinstance(r, str)]
            if db_roles:
                roles = db_roles
            if getattr(user, "active_role", None):
                active_role = user.active_role if user.active_role in roles else roles[0]
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(
            welcome_text,
            reply_markup=get_main_keyboard_for_role(active_role, roles, user.status)
        )
        
        await callback.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", show_alert=True)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:**
- –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
- –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
- –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
- –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å

üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫:**
- "–ú–æ–∏ –∑–∞—è–≤–∫–∏" - –≤–∞—à–∏ –∑–∞—è–≤–∫–∏
- "–í—Å–µ –∑–∞—è–≤–∫–∏" - –≤—Å–µ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞

üîß **–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤):**
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ùì **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(help_text, reply_markup=get_user_contextual_keyboard(message.from_user.id))

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext, roles: list[str] = None, active_role: str = None):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        lang = message.from_user.language_code or "ru"
        await message.answer(
            get_text("cancel", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
    else:
        lang = message.from_user.language_code or "ru"
        await message.answer(
            get_text("cancel", language=lang),
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext, roles: list[str] = None, active_role: str = None):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    lang = message.from_user.language_code or "ru"
    await message.answer(get_text("back", language=lang), reply_markup=get_user_contextual_keyboard(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.message(F.text == "üõ† –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def executor_active_requests(message: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ê–∫—Ç–∏–≤–Ω—ã–µ."""
    await state.update_data(my_requests_status="active", my_requests_page=1)
    from uk_management_bot.handlers.requests import show_my_requests
    await show_my_requests(message, state)


@router.message(F.text == "üì¶ –ê—Ä—Ö–∏–≤")
async def executor_archive_requests(message: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ê—Ä—Ö–∏–≤."""
    await state.update_data(my_requests_status="archive", my_requests_page=1)
    from uk_management_bot.handlers.requests import show_my_requests
    await show_my_requests(message, state)


@router.message(F.text == "üîÑ –°–º–µ–Ω–∞")
async def executor_shift_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π."""
    await message.answer("–ú–µ–Ω—é —Å–º–µ–Ω—ã:", reply_markup=get_shifts_main_keyboard())


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, db: Session, roles: list[str] = None, active_role: str = None, user_status: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    
    try:
        from uk_management_bot.services.profile_service import ProfileService
        profile_service = ProfileService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_data = profile_service.get_user_profile_data(message.from_user.id)
        
        if not profile_data:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            lang = message.from_user.language_code or "ru"
            await message.answer(
                get_text("errors.unknown_error", language=lang),
                reply_markup=get_main_keyboard_for_role(active_role or "applicant", roles or ["applicant"], user_status)
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        lang = message.from_user.language_code or "ru"
        profile_text = profile_service.format_profile_text(profile_data, language=lang)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
        user_roles = profile_data.get('roles', ['applicant'])
        user_active_role = profile_data.get('active_role', 'applicant')
        
        # –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(user_roles, str):
            try:
                import json
                user_roles = json.loads(user_roles)
            except Exception:
                user_roles = ['applicant']
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ user_roles - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(user_roles, list):
            user_roles = ['applicant']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        keyboard = get_role_switch_inline(user_roles, user_active_role)
        rows = list(keyboard.inline_keyboard)
        rows.append([{"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "edit_profile"}])
        
        from aiogram.types import InlineKeyboardMarkup
        new_keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        
        await message.answer(
            profile_text, 
            reply_markup=new_keyboard
        )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {message.from_user.id}: {e}")
        lang = message.from_user.language_code or "ru"
        await message.answer(
            get_text("errors.unknown_error", language=lang),
            reply_markup=get_main_keyboard_for_role(active_role or "applicant", roles or ["applicant"], "approved")
        )


@router.message(F.text == "üîÄ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å")
async def choose_role(message: Message, db: Session, roles: list[str] = None, active_role: str = None):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç inline‚Äë–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–æ–ª–µ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Ä–æ–ª–∏.
    """
    roles = roles or ["applicant"]
    active_role = active_role or roles[0]
    # –§–æ–ª–±—ç–∫ –∏–∑ –ë–î, –µ—Å–ª–∏ roles –ø—Ä–∏—à–ª–∏ —É—Å–µ—á—ë–Ω–Ω—ã–º–∏
    try:
        from uk_management_bot.services.auth_service import AuthService
        auth = AuthService(db)
        user = await auth.get_user_by_telegram_id(message.from_user.id)
        if user:
            import json
            if getattr(user, "roles", None):
                parsed = json.loads(user.roles)
                if isinstance(parsed, list) and parsed:
                    roles = [str(r) for r in parsed if isinstance(r, str)]
            if getattr(user, "active_role", None) and user.active_role in roles:
                active_role = user.active_role
    except Exception:
        pass
    role_name = get_text(f"roles.{active_role}", language=message.from_user.language_code or "ru")
    text = get_text("role.switch_title", language=message.from_user.language_code or "ru", role=role_name)
    await message.answer(text, reply_markup=get_role_switch_inline(roles, active_role))


@router.callback_query(F.data.startswith("switch_role:"))
async def switch_role(cb: CallbackQuery, db: Session, roles: list[str] = None, active_role: str = None, user_status: str = None):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    roles = roles or ["applicant"]
    target = cb.data.split(":", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è —Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if target not in roles:
        lang = cb.from_user.language_code or "ru"
        await cb.answer(get_text("role.not_allowed", language=lang), show_alert=True)
        return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from uk_management_bot.database.models.user import User
        user = db.query(User).filter(User.telegram_id == cb.from_user.id).first()
        if not user:
            lang = cb.from_user.language_code or "ru"
            await cb.answer(get_text("errors.user_not_found", language=lang), show_alert=True)
            return
        
        old_active = user.active_role
        user.active_role = target
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cb.answer(get_text("role.switched", language=cb.from_user.language_code or "ru"))
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª—å—é
        await cb.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=get_main_keyboard_for_role(target, roles, "approved")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        try:
            from aiogram import Bot
            bot: Bot = cb.message.bot
            await async_notify_role_switched(bot, db, user, old_active or "", target)
        except Exception:
            pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        lang = cb.from_user.language_code or "ru"
        await cb.answer(get_text("errors.unknown_error", language=lang), show_alert=True)

@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞—Ä–æ–ª—é"""
    await state.set_state(AdminPasswordStates.waiting_for_password)
    await message.answer(
        "üîê **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"
        "_(–ü–∞—Ä–æ–ª—å: 12345)_",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AdminPasswordStates.waiting_for_password)
async def process_admin_password(message: Message, state: FSMContext, db: Session, user_status: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    auth_service = AuthService(db)
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_user_contextual_keyboard(message.from_user.id))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    success = await auth_service.make_admin_by_password(
        telegram_id=message.from_user.id,
        password=message.text
    )
    
    await state.clear()
    
    if success:
        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—Ä–æ–∏–º –º–µ–Ω—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª—å—é
        try:
            user = await auth_service.get_user_by_telegram_id(message.from_user.id)
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏–∑ JSON, —Ñ–æ–ª–±—ç–∫ –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –ø–æ–ª—é role
            roles_list = ["applicant"]
            active_role = "applicant"
            if user:
                import json
                try:
                    if getattr(user, "roles", None):
                        parsed = json.loads(user.roles)
                        if isinstance(parsed, list) and parsed:
                            roles_list = [str(r) for r in parsed if isinstance(r, str)] or roles_list
                except Exception:
                    roles_list = [user.role] if getattr(user, "role", None) else roles_list
                if getattr(user, "active_role", None):
                    active_role = user.active_role
                else:
                    active_role = roles_list[0] if roles_list else "applicant"
                if active_role not in roles_list:
                    active_role = roles_list[0] if roles_list else "applicant"
        except Exception:
            roles_list = ["applicant"]
            active_role = "applicant"

        await message.answer(
            "‚úÖ **–£—Å–ø–µ—à–Ω–æ!**\n\n"
            "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.\n"
            "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.",
            reply_markup=get_main_keyboard_for_role(active_role, roles_list, "approved")
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    else:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            reply_markup=get_user_contextual_keyboard(message.from_user.id)
        )
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç {message.from_user.id}")
