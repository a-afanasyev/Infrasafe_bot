import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.orm import sessionmaker
from uk_management_bot.config.settings import settings
from uk_management_bot.database.session import engine, Base, SessionLocal
from uk_management_bot.handlers.base import router as base_router
from uk_management_bot.handlers.requests import router as requests_router
from uk_management_bot.handlers.shifts import router as shifts_router
from uk_management_bot.handlers.admin import router as admin_router
from uk_management_bot.handlers.auth import router as auth_router
from uk_management_bot.handlers.onboarding import router as onboarding_router
from uk_management_bot.handlers.user_management import router as user_management_router
from uk_management_bot.handlers.employee_management import router as employee_management_router
from uk_management_bot.handlers.user_verification import router as user_verification_router
from uk_management_bot.handlers.clarification_replies import router as clarification_replies_router
from uk_management_bot.handlers.profile_editing import router as profile_editing_router
from uk_management_bot.handlers.health import router as health_router

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω
from uk_management_bot.handlers.shift_management import router as shift_management_router_new
from uk_management_bot.handlers.my_shifts import router as my_shifts_router

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
from uk_management_bot.handlers.request_assignment import router as request_assignment_router
from uk_management_bot.handlers.request_status_management import router as request_status_management_router
from uk_management_bot.handlers.request_comments import router as request_comments_router
from uk_management_bot.handlers.request_reports import router as request_reports_router
from uk_management_bot.handlers.request_acceptance import router as request_acceptance_router  # –ü—Ä–∏—ë–º–∫–∞ –∑–∞—è–≤–æ–∫
from uk_management_bot.handlers.unaccepted_requests import router as unaccepted_requests_router  # –ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω
from uk_management_bot.handlers.shift_transfer import router as shift_transfer_router

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
from uk_management_bot.handlers.address_yards import router as address_yards_router
from uk_management_bot.handlers.address_buildings import router as address_buildings_router
from uk_management_bot.handlers.address_apartments import router as address_apartments_router
from uk_management_bot.handlers.address_moderation import router as address_moderation_router
from uk_management_bot.handlers.user_apartment_selection import router as user_apartment_selection_router
from uk_management_bot.handlers.user_apartments import router as user_apartments_router  # NEW: User apartment management

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from uk_management_bot.handlers.user_yards_management import router as user_yards_router

from uk_management_bot.middlewares.shift import shift_context_middleware
from uk_management_bot.middlewares.auth import auth_middleware, role_mode_middleware
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from uk_management_bot.utils.structured_logger import setup_structured_logging, get_logger
from uk_management_bot.utils.health_server import start_health_server, stop_health_server

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω
from uk_management_bot.utils.shift_scheduler import start_scheduler, stop_scheduler, get_scheduler_status
from uk_management_bot.services.notification_service import NotificationService

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from uk_management_bot.integrations import get_media_client, close_media_client

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_structured_logging()
logger = get_logger(__name__, component="main")

async def initialize_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–º–µ–Ω"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        db = SessionLocal()
        notification_service = NotificationService(db)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await start_scheduler(notification_service)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status = await get_scheduler_status()
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {status['jobs_count']} –∑–∞–¥–∞—á –∞–∫—Ç–∏–≤–Ω–æ")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


async def initialize_media_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞-—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        media_client = get_media_client()
        if media_client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
            health = await media_client.health_check()
            logger.info(f"Media Service –ø–æ–¥–∫–ª—é—á–µ–Ω: {health}")
            return True
        else:
            logger.warning("Media Service –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Media Service: {e}")
        logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Media Service")
        return False


async def send_startup_notification(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_status = await get_scheduler_status()
        scheduler_info = f"üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status['jobs_count']} –∑–∞–¥–∞—á" if scheduler_status['is_running'] else "‚è∏Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–¥–∏–∞-—Å–µ—Ä–≤–∏—Å–∞
        media_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if settings.MEDIA_SERVICE_ENABLED else "‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω"

        startup_message = f"""
ü§ñ **UK Management Bot –∑–∞–ø—É—â–µ–Ω!**

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üîß –í–µ—Ä—Å–∏—è: 1.0.0
üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
üîç –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ê–∫—Ç–∏–≤–Ω–∞
{scheduler_info}
üì∏ Media Service: {media_status}

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        if settings.ADMIN_USER_IDS:
            for admin_id in settings.ADMIN_USER_IDS:
                try:
                    await bot.send_message(admin_id, startup_message, parse_mode="Markdown")
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if settings.TELEGRAM_CHANNEL_ID:
            try:
                await bot.send_message(settings.TELEGRAM_CHANNEL_ID, startup_message, parse_mode="Markdown")
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not settings.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    import uk_management_bot.database.models  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
    Base.metadata.create_all(bind=engine)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ ADMIN_USER_IDS
    from uk_management_bot.database.init_admin import init_all_admins
    try:
        created, updated = init_all_admins()
        if created > 0 or updated > 0:
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: —Å–æ–∑–¥–∞–Ω–æ {created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    # –í–ê–ñ–ù–û: parse_mode="HTML" –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ç–µ–≥–∏ (<b>, <i>, <code> –∏ —Ç.–¥.)
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode

    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú!)
    @dp.update.middleware()
    async def db_middleware(handler, event, data):
        db = SessionLocal()
        data["db"] = db
        try:
            result = await handler(event, data)
            # –ö–æ–º–º–∏—Ç–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            if db.in_transaction():
                db.commit()
            return result
        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                if db.in_transaction():
                    db.rollback()
            except Exception:
                pass
            logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                db.close()
            except Exception as close_err:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –ë–î: {close_err}")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º auth-middleware –≥–ª–æ–±–∞–ª—å–Ω–æ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ç–æ—Ä—ã–º)
    @dp.update.middleware()
    async def _auth_middleware(handler, event, data):
        result = await auth_middleware(handler, event, data)
        return result
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º role-mode-middleware –≥–ª–æ–±–∞–ª—å–Ω–æ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ auth)
    @dp.update.middleware()
    async def _role_mode_middleware(handler, event, data):
        result = await role_mode_middleware(handler, event, data)
        return result

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º shift-middleware –≥–ª–æ–±–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
    @dp.update.middleware()
    async def _shift_middleware(handler, event, data):
        return await shift_context_middleware(handler, event, data)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(health_router)  # Health check –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    dp.include_router(auth_router)
    dp.include_router(onboarding_router)
    dp.include_router(admin_router)  # admin —Ä–∞–Ω—å—à–µ requests –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    dp.include_router(profile_editing_router)  # –†–æ—É—Ç–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Ä–∞–Ω—å—à–µ requests)

    # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—ë–º–∫–∏ –∑–∞—è–≤–æ–∫ (–î–û–õ–ñ–ù–ê –ë–´–¢–¨ –†–ê–ù–¨–®–ï requests_router!)
    dp.include_router(request_acceptance_router)  # –ü—Ä–∏—ë–º–∫–∞ –∑–∞—è–≤–æ–∫ - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç accept_request_* –∏ rate_*
    dp.include_router(unaccepted_requests_router)  # –ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    dp.include_router(requests_router)  # requests –ø–æ—Å–ª–µ acceptance –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    # –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–∞–º–∏
    dp.include_router(shift_management_router_new)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    dp.include_router(my_shifts_router)  # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–º–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    dp.include_router(shift_transfer_router)  # –ü–µ—Ä–µ–¥–∞—á–∞ —Å–º–µ–Ω –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    dp.include_router(shifts_router)  # —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä —Å–º–µ–Ω

    # –°–∏—Å—Ç–µ–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
    dp.include_router(request_assignment_router)
    dp.include_router(request_status_management_router)
    dp.include_router(request_comments_router)
    dp.include_router(request_reports_router)

    # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥—Ä–µ—Å–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä ‚Üí –º–æ–¥–µ—Ä–∞—Ü–∏—è ‚Üí —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Üí –∑–¥–∞–Ω–∏—è ‚Üí –¥–≤–æ—Ä—ã)
    dp.include_router(user_apartment_selection_router)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.include_router(user_apartments_router)  # NEW: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    dp.include_router(address_moderation_router)
    dp.include_router(address_apartments_router)
    dp.include_router(address_buildings_router)
    dp.include_router(address_yards_router)

    dp.include_router(user_yards_router)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ü–ï–†–ï–î user_management!)
    dp.include_router(user_management_router)  # –≤–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    dp.include_router(employee_management_router)  # –†–æ—É—Ç–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    dp.include_router(user_verification_router)  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    dp.include_router(clarification_replies_router)  # –†–æ—É—Ç–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    dp.include_router(base_router)  # base –≤ –∫–æ–Ω—Ü–µ –∫–∞–∫ fallback –¥–ª—è –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP health check —Å–µ—Ä–≤–µ—Ä
    try:
        start_health_server(host='0.0.0.0', port=8000)
        logger.info("HTTP health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health check —Å–µ—Ä–≤–µ—Ä: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ health —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω
        await initialize_scheduler(bot)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞-—Å–µ—Ä–≤–∏—Å
        await initialize_media_service()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await send_startup_notification(bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        try:
            await stop_scheduler()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–¥–∏–∞-–∫–ª–∏–µ–Ω—Ç
        try:
            await close_media_client()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Media Service –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health —Å–µ—Ä–≤–µ—Ä
        stop_health_server()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
