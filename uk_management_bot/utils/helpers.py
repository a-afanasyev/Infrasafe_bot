import json
import os
from typing import Dict, Any
from config.settings import settings

def _resolve_locales_dir() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–∫–∞–ª–µ–π.

    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–∫–µ—Ç–∞ `uk_management_bot` (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–∞—Ö –∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞),
    –∑–∞—Ç–µ–º —Ñ–æ–ª–±—ç–∫ –Ω–∞ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π –∏–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞).
    """
    module_dir = os.path.dirname(__file__)
    project_root = os.path.abspath(os.path.join(module_dir, ".."))  # uk_management_bot
    candidate = os.path.join(project_root, "config", "locales")
    if os.path.isdir(candidate):
        return candidate
    return os.path.join("config", "locales")


def load_locale(language: str = "ru") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏ —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ RU."""
    locales_dir = _resolve_locales_dir()
    locale_file = os.path.join(locales_dir, f"{language}.json")

    if not os.path.exists(locale_file):
        # –§–æ–ª–±—ç–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        locale_file = os.path.join(locales_dir, "ru.json")

    try:
        with open(locale_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return {}

def get_text(key: str, language: str = "ru", **kwargs) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É"""
    locale = load_locale(language)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "auth.pending")
    keys = key.split(".")
    value = locale
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            ru_locale = load_locale("ru")
            for ru_k in keys:
                if isinstance(ru_locale, dict) and ru_k in ru_locale:
                    ru_locale = ru_locale[ru_k]
                else:
                    return key  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return ru_locale
    
    # –ó–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    if isinstance(value, str) and kwargs:
        for param, replacement in kwargs.items():
            value = value.replace(f"{{{param}}}", str(replacement))
    
    return value if isinstance(value, str) else key

def format_request_details(request, locale: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    details = f"""
üìã {locale.get('requests', {}).get('details', '–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')} #{request.id}

üè∑Ô∏è {locale.get('requests', {}).get('category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}: {request.category}
üìç {locale.get('requests', {}).get('address', '–ê–¥—Ä–µ—Å')}: {request.address}
üìù {locale.get('requests', {}).get('description', '–û–ø–∏—Å–∞–Ω–∏–µ')}: {request.description}
üè† {locale.get('requests', {}).get('apartment', '–ö–≤–∞—Ä—Ç–∏—Ä–∞')}: {request.apartment or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚ö° {locale.get('requests', {}).get('urgency', '–°—Ä–æ—á–Ω–æ—Å—Ç—å')}: {request.urgency}
üìä {locale.get('requests', {}).get('status', '–°—Ç–∞—Ç—É—Å')}: {request.status}
üïê {locale.get('requests', {}).get('created_at', '–°–æ–∑–¥–∞–Ω–∞')}: {request.created_at.strftime('%d.%m.%Y %H:%M')}
"""
    
    if request.executor:
        details += f"üë§ {locale.get('requests', {}).get('executor', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')}: {request.executor.first_name or request.executor.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    
    return details

def format_user_info(user, locale: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    role_names = {
        "applicant": "–ó–∞—è–≤–∏—Ç–µ–ª—å",
        "executor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
        "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    }
    
    status_names = {
        "pending": "–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è",
        "approved": "–û–¥–æ–±—Ä–µ–Ω",
        "blocked": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    }
    
    return f"""
üë§ {locale.get('profile', {}).get('title', '–ü—Ä–æ—Ñ–∏–ª—å')}

üÜî ID: {user.telegram_id}
üë§ {locale.get('profile', {}).get('role', '–†–æ–ª—å')}: {role_names.get(user.role, user.role)}
üìä {locale.get('profile', {}).get('status', '–°—Ç–∞—Ç—É—Å')}: {status_names.get(user.status, user.status)}
üåê {locale.get('profile', {}).get('language', '–Ø–∑—ã–∫')}: {user.language.upper()}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}
"""

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    import re
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    pattern = r'^\+998[0-9]{9}$|^998[0-9]{9}$|^[0-9]{9}$'
    return bool(re.match(pattern, phone.replace(' ', '')))

def validate_address(address: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞"""
    return len(address.strip()) >= 10

def validate_description(description: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    return len(description.strip()) >= 10

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."
