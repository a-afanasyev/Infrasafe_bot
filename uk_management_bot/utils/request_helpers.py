"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""
import re
import logging
from typing import Optional
from uk_management_bot.services.request_number_service import RequestNumberService

logger = logging.getLogger(__name__)

class RequestCallbackHelper:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å callback data —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫"""
    
    @staticmethod
    def extract_request_number_from_callback(callback_data: str, prefix: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ callback data
        
        Args:
            callback_data: Callback data (–Ω–∞–ø—Ä–∏–º–µ—Ä: "view_250917-001")
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "view_")
            
        Returns:
            –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        """
        if not callback_data.startswith(prefix):
            return None
        
        request_number = callback_data.replace(prefix, "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
        if RequestNumberService.validate_request_number_format(request_number):
            return request_number
        
        return None
    
    @staticmethod
    def create_callback_data_with_request_number(prefix: str, request_number: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç callback data —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∫–∏
        
        Args:
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "view_")
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            
        Returns:
            Callback data (–Ω–∞–ø—Ä–∏–º–µ—Ä: "view_250917-001")
        """
        if not RequestNumberService.validate_request_number_format(request_number):
            logger.warning(f"Invalid request number format: {request_number}")
        
        return f"{prefix}{request_number}"
    
    @staticmethod
    def is_request_number_callback(callback_data: str, prefix: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        
        Args:
            callback_data: Callback data –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            prefix: –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            
        Returns:
            True –µ—Å–ª–∏ callback data —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        """
        request_number = RequestCallbackHelper.extract_request_number_from_callback(
            callback_data, prefix
        )
        return request_number is not None

def format_request_for_list(request, include_number=True):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    
    Args:
        request: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        include_number: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if include_number:
        number_display = request.format_number_for_display()
        return f"{number_display}\nüìç {request.address}\nüè∑Ô∏è {request.category}\nüìä {request.status}"
    else:
        return f"üìç {request.address}\nüè∑Ô∏è {request.category}\nüìä {request.status}"

def format_request_details(request, language="ru"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞

    Args:
        request: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    Returns:
        –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    number_display = request.format_number_for_display()

    details = f"üìã –ó–∞—è–≤–∫–∞ {number_display}\n\n"
    details += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
    details += f"üìä –°—Ç–∞—Ç—É—Å: {request.status}\n"

    # –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if hasattr(request, 'apartment_obj') and request.apartment_obj:
        # –ó–∞—è–≤–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        from uk_management_bot.services.address_service import AddressService
        formatted_address = AddressService.format_apartment_address(request.apartment_obj)
        details += f"üìç –ê–¥—Ä–µ—Å: {formatted_address} üè¢\n"  # –ò–∫–æ–Ω–∫–∞ –∑–¥–∞–Ω–∏—è = –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        apartment = request.apartment_obj
        apartment_details = []
        if apartment.entrance:
            apartment_details.append(f"–ü–æ–¥—ä–µ–∑–¥: {apartment.entrance}")
        if apartment.floor:
            apartment_details.append(f"–≠—Ç–∞–∂: {apartment.floor}")
        if apartment.rooms_count:
            apartment_details.append(f"–ö–æ–º–Ω–∞—Ç: {apartment.rooms_count}")
        if apartment.area:
            apartment_details.append(f"–ü–ª–æ—â–∞–¥—å: {apartment.area} –º¬≤")

        for i, detail in enumerate(apartment_details):
            prefix = "   ‚îî" if i == len(apartment_details) - 1 else "   ‚îú"
            details += f"{prefix} {detail}\n"
    else:
        # Legacy: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
        details += f"üìç –ê–¥—Ä–µ—Å: {request.address}\n"

        # Legacy –ø–æ–ª–µ apartment (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if request.apartment:
            details += f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {request.apartment}\n"

    details += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}\n"
    details += f"‚ö° –°—Ä–æ—á–Ω–æ—Å—Ç—å: {request.urgency}\n"

    details += f"üïê –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"

    if request.executor:
        executor_name = request.executor.first_name or request.executor.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        details += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_name}\n"

    if request.completed_at:
        details += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {request.completed_at.strftime('%d.%m.%Y %H:%M')}\n"

    return details

def validate_callback_request_number(callback_data: str, expected_prefix: str) -> Optional[str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç callback data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    
    Args:
        callback_data: Callback data –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        expected_prefix: –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        
    Returns:
        –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    """
    try:
        return RequestCallbackHelper.extract_request_number_from_callback(
            callback_data, expected_prefix
        )
    except Exception as e:
        logger.error(f"Error validating callback data {callback_data}: {e}")
        return None