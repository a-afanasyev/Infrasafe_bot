"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–º–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import logging
import asyncio
from datetime import datetime, timedelta, date
from typing import Optional, Dict, Any
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from uk_management_bot.database.session import get_db, SessionLocal
from uk_management_bot.services.shift_planning_service import ShiftPlanningService
from uk_management_bot.services.shift_assignment_service import ShiftAssignmentService
from uk_management_bot.services.shift_transfer_service import ShiftTransferService
from uk_management_bot.services.notification_service import NotificationService

logger = logging.getLogger(__name__)


class ShiftScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–º–µ–Ω–∞–º–∏"""

    def __init__(self, notification_service: Optional[NotificationService] = None):
        self.scheduler = AsyncIOScheduler()
        self.notification_service = notification_service
        self.is_running = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        self.task_stats = {
            'auto_create_shifts': {'success': 0, 'failed': 0, 'last_run': None},
            'rebalance_assignments': {'success': 0, 'failed': 0, 'last_run': None},
            'process_transfers': {'success': 0, 'failed': 0, 'last_run': None},
            'cleanup_expired': {'success': 0, 'failed': 0, 'last_run': None},
            'notify_upcoming': {'success': 0, 'failed': 0, 'last_run': None},
            'auto_assign_requests': {'success': 0, 'failed': 0, 'last_run': None},
            'sync_assignments': {'success': 0, 'failed': 0, 'last_run': None}
        }

    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:30)
            self.scheduler.add_job(
                self._auto_create_shifts,
                CronTrigger(hour=0, minute=30),
                id='auto_create_shifts',
                name='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω',
                max_instances=1,
                coalesce=True
            )

            # 2. –ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00)
            self.scheduler.add_job(
                self._rebalance_daily_assignments,
                CronTrigger(hour=6, minute=0),
                id='rebalance_assignments',
                name='–ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π',
                max_instances=1,
                coalesce=True
            )

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
            self.scheduler.add_job(
                self._process_expired_transfers,
                IntervalTrigger(hours=2),
                id='process_transfers',
                name='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á',
                max_instances=1,
                coalesce=True
            )

            # 4. –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00)
            self.scheduler.add_job(
                self._cleanup_expired_data,
                CronTrigger(day_of_week=6, hour=2, minute=0),
                id='cleanup_expired',
                name='–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                max_instances=1,
                coalesce=True
            )

            # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 08:00 –¥–æ 20:00)
            self.scheduler.add_job(
                self._notify_upcoming_shifts,
                CronTrigger(hour='8-20', minute='0,30'),
                id='notify_upcoming',
                name='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö',
                max_instances=1,
                coalesce=True
            )

            # 6. –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
            self.scheduler.add_job(
                self._auto_assign_empty_shifts,
                IntervalTrigger(minutes=15),
                id='auto_assign_empty',
                name='–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–º–µ–Ω—ã',
                max_instances=1,
                coalesce=True
            )

            # 8. –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —Å–º–µ–Ω (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
            self.scheduler.add_job(
                self._auto_assign_requests_to_executors,
                IntervalTrigger(minutes=10),
                id='auto_assign_requests',
                name='–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º',
                max_instances=1,
                coalesce=True
            )

            # 9. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∑–∞—è–≤–æ–∫ —Å–æ —Å–º–µ–Ω–∞–º–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
            self.scheduler.add_job(
                self._sync_request_assignments,
                IntervalTrigger(minutes=30),
                id='sync_assignments',
                name='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–æ —Å–º–µ–Ω–∞–º–∏',
                max_instances=1,
                coalesce=True
            )

            # 7. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:00)
            self.scheduler.add_job(
                self._weekly_planning,
                CronTrigger(day_of_week=0, hour=8, minute=0),
                id='weekly_planning',
                name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                max_instances=1,
                coalesce=True
            )

            logger.info("–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if not self.is_running:
                self.setup_jobs()
                self.scheduler.start()
                self.is_running = True
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω –∑–∞–ø—É—â–µ–Ω")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
                if self.notification_service:
                    await self.notification_service.send_system_notification(
                        "ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω –∑–∞–ø—É—â–µ–Ω",
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            if self.is_running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        jobs_info = []

        if self.is_running:
            for job in self.scheduler.get_jobs():
                jobs_info.append({
                    'id': job.id,
                    'name': job.name,
                    'next_run': job.next_run_time.isoformat() if job.next_run_time else None,
                    'trigger': str(job.trigger)
                })

        return {
            'is_running': self.is_running,
            'jobs_count': len(jobs_info),
            'jobs': jobs_info,
            'stats': self.task_stats
        }

    async def _auto_create_shifts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏"""
        task_name = 'auto_create_shifts'
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω...")

            db = SessionLocal()
            try:
                planning_service = ShiftPlanningService(db)

                # –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
                result = planning_service.auto_create_shifts(days_ahead=7)

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                logger.info(f"–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result['total_created']} —Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω–æ")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–æ –º–Ω–æ–≥–æ —Å–º–µ–Ω
                if self.notification_service and result['total_created'] > 10:
                    await self.notification_service.send_manager_notification(
                        f"üèóÔ∏è –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                        f"–°–æ–∑–¥–∞–Ω–æ {result['total_created']} –Ω–æ–≤—ã—Ö —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"
                    )
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω: {e}")

    async def _rebalance_daily_assignments(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"""
        task_name = 'rebalance_assignments'
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...")

            db = SessionLocal()
            try:
                planning_service = ShiftPlanningService(db)

                # –ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
                today = date.today()
                tomorrow = today + timedelta(days=1)

                results = []
                for target_date in [today, tomorrow]:
                    result = planning_service.rebalance_daily_assignments(target_date)
                    results.append(result)

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                total_rebalanced = sum(r.get('rebalanced_shifts', 0) for r in results)
                logger.info(f"–ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_rebalanced} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ")
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")

    async def _process_expired_transfers(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á —Å–º–µ–Ω"""
        task_name = 'process_transfers'
        try:
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á...")

            db = SessionLocal()
            try:
                transfer_service = ShiftTransferService(db)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                result = await transfer_service.process_expired_transfers(hours_threshold=24)

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                if result['processed_count'] > 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result['processed_count']} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
                    if self.notification_service:
                        await self.notification_service.send_manager_notification(
                            "‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á",
                            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result['processed_count']} –ø–µ—Ä–µ–¥–∞—á"
                        )
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–µ—Ä–µ–¥–∞—á: {e}")

    async def _cleanup_expired_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        task_name = 'cleanup_expired'
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

            db = SessionLocal()
            try:
                # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
                cutoff_date = datetime.now() - timedelta(days=30)

                from uk_management_bot.database.models.shift_transfer import ShiftTransfer
                expired_transfers = db.query(ShiftTransfer).filter(
                    ShiftTransfer.status.in_(['completed', 'cancelled']),
                    ShiftTransfer.completed_at < cutoff_date
                ).count()

                # –£–¥–∞–ª—è–µ–º (–∏–ª–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞—Ä—Ö–∏–≤–Ω—ã–µ)
                db.query(ShiftTransfer).filter(
                    ShiftTransfer.status.in_(['completed', 'cancelled']),
                    ShiftTransfer.completed_at < cutoff_date
                ).delete()

                db.commit()

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {expired_transfers} –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥–∞—á")
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _notify_upcoming_shifts(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö"""
        task_name = 'notify_upcoming'
        try:
            if not self.notification_service:
                return

            db = SessionLocal()
            try:
                from uk_management_bot.database.models.shift import Shift
                from uk_management_bot.database.models.user import User

                # –ò—â–µ–º —Å–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 2 —á–∞—Å–æ–≤
                now = datetime.now()
                upcoming_threshold = now + timedelta(hours=2)

                upcoming_shifts = db.query(Shift).join(User).filter(
                    Shift.start_time.between(now, upcoming_threshold),
                    Shift.status == 'planned',
                    Shift.user_id.isnot(None)
                ).all()

                notifications_sent = 0
                for shift in upcoming_shifts:
                    try:
                        time_until = shift.start_time - now
                        hours = int(time_until.total_seconds() / 3600)
                        minutes = int((time_until.total_seconds() % 3600) / 60)

                        await self.notification_service.send_shift_reminder(
                            executor_id=shift.user_id,
                            shift=shift,
                            time_until=f"{hours}—á {minutes}–º"
                        )
                        notifications_sent += 1

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã {shift.id}: {e}")

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                if notifications_sent > 0:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–º–µ–Ω–∞—Ö")
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def _auto_assign_empty_shifts(self):
        """–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–º–µ–Ω—ã"""
        try:
            db = SessionLocal()
            try:
                from uk_management_bot.database.models.shift import Shift

                # –ò—â–µ–º —Å–º–µ–Ω—ã –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤
                now = datetime.now()
                assignment_threshold = now + timedelta(hours=48)

                empty_shifts = db.query(Shift).filter(
                    Shift.user_id.is_(None),
                    Shift.status == 'planned',
                    Shift.start_time.between(now, assignment_threshold)
                ).limit(10).all()  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

                if empty_shifts:
                    assignment_service = ShiftAssignmentService(db)
                    result = assignment_service.auto_assign_executors_to_shifts(
                        shifts=empty_shifts,
                        force_reassign=False
                    )

                    if result['stats']['assigned'] > 0:
                        logger.info(f"–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ {result['stats']['assigned']} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–º–µ–Ω—ã")
            finally:
                db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–º–µ–Ω—ã: {e}")

    async def _weekly_planning(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

            db = SessionLocal()
            try:
                planning_service = ShiftPlanningService(db)

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
                next_monday = date.today() + timedelta(days=7 - date.today().weekday())
                result = planning_service.plan_weekly_schedule(next_monday)

                logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result['statistics']['total_shifts']} —Å–º–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if self.notification_service and result['statistics']['total_shifts'] > 0:
                    await self.notification_service.send_manager_notification(
                        "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {result['statistics']['total_shifts']} —Å–º–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
                    )
            finally:
                db.close()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def _auto_assign_requests_to_executors(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —Å–º–µ–Ω"""
        task_name = 'auto_assign_requests'
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º...")

            db = SessionLocal()
            try:
                assignment_service = ShiftAssignmentService(db)

                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
                today = date.today()
                tomorrow = today + timedelta(days=1)

                total_assigned = 0
                for target_date in [today, tomorrow]:
                    result = assignment_service.auto_assign_requests_to_shift_executors(target_date)

                    if result['status'] == 'success':
                        total_assigned += result.get('assigned_requests', 0)

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                if total_assigned > 0:
                    logger.info(f"–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_assigned} –∑–∞—è–≤–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö
                    if self.notification_service and total_assigned > 5:
                        await self.notification_service.send_manager_notification(
                            "üìã –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫",
                            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ {total_assigned} –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —Å–º–µ–Ω"
                        )
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")

    async def _sync_request_assignments(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∑–∞—è–≤–æ–∫ —Å–æ —Å–º–µ–Ω–∞–º–∏"""
        task_name = 'sync_assignments'
        try:
            logger.info("–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...")

            db = SessionLocal()
            try:
                assignment_service = ShiftAssignmentService(db)

                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
                today = date.today()
                tomorrow = today + timedelta(days=1)

                total_reassigned = 0
                for target_date in [today, tomorrow]:
                    result = assignment_service.sync_request_assignments_with_shifts(target_date)

                    if result['status'] == 'success':
                        total_reassigned += result.get('reassigned', 0)

                self.task_stats[task_name]['success'] += 1
                self.task_stats[task_name]['last_run'] = datetime.now()

                if total_reassigned > 0:
                    logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_reassigned} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö
                    if self.notification_service and total_reassigned > 0:
                        await self.notification_service.send_manager_notification(
                            "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π",
                            f"–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ {total_reassigned} –∑–∞—è–≤–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–º–µ–Ω–∞–º–∏"
                        )
            finally:
                db.close()

        except Exception as e:
            self.task_stats[task_name]['failed'] += 1
            self.task_stats[task_name]['last_run'] = datetime.now()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
_scheduler_instance: Optional[ShiftScheduler] = None


def get_scheduler() -> ShiftScheduler:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global _scheduler_instance
    if _scheduler_instance is None:
        _scheduler_instance = ShiftScheduler()
    return _scheduler_instance


async def start_scheduler(notification_service: Optional[NotificationService] = None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω"""
    scheduler = get_scheduler()
    if notification_service:
        scheduler.notification_service = notification_service
    await scheduler.start()


async def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–µ–Ω"""
    scheduler = get_scheduler()
    await scheduler.stop()


async def get_scheduler_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = get_scheduler()
    return await scheduler.get_status()