from sqlalchemy.orm import Session
from database.models.request import Request
from database.models.user import User
from database.models.shift import Shift
import logging
from utils.constants import (
    NOTIFICATION_TYPE_STATUS_CHANGED,
    NOTIFICATION_TYPE_PURCHASE,
    NOTIFICATION_TYPE_CLARIFICATION,
)
from config.settings import settings
from datetime import datetime

logger = logging.getLogger(__name__)


def notify_status_changed(db: Session, request: Request, old_status: str, new_status: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∫–∞ –ª–æ–≥-–∑–∞–≥–ª—É—à–∫–∞.

    –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –∏–ª–∏ –∞–¥—Ä–µ—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    try:
        logger.info(
            f"Notification: type={NOTIFICATION_TYPE_STATUS_CHANGED}, request_id={request.id}, old={old_status}, new={new_status}"
        )
        if new_status == "–ó–∞–∫—É–ø":
            logger.info(f"Notification: type={NOTIFICATION_TYPE_PURCHASE}, request_id={request.id}")
        if new_status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
            logger.info(f"Notification: type={NOTIFICATION_TYPE_CLARIFICATION}, request_id={request.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")


def notify_shift_started(db: Session, user: User, shift: Shift) -> None:
    try:
        logger.info(f"Notification: shift_started user_id={user.id} shift_id={shift.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Å–º–µ–Ω—ã: {e}")


def notify_shift_ended(db: Session, user: User, shift: Shift) -> None:
    try:
        logger.info(f"Notification: shift_ended user_id={user.id} shift_id={shift.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")


# ====== Async helpers for full notifications (3.3) ======
def _format_duration_hm(start_time: datetime, end_time: datetime | None) -> tuple[int, int]:
    end = end_time or datetime.now()
    total_minutes = max(0, int((end - start_time).total_seconds() // 60))
    hours = total_minutes // 60
    minutes = total_minutes % 60
    return hours, minutes


def build_shift_started_message(user: User, shift: Shift, for_channel: bool = False) -> str:
    started = shift.start_time.strftime('%d.%m.%Y %H:%M') if shift.start_time else ''
    if for_channel:
        return f"üîî –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: user_id={user.telegram_id} –≤ {started}"
    return f"‚úÖ –í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤ {started}"


def build_shift_ended_message(user: User, shift: Shift, for_channel: bool = False) -> str:
    hours, minutes = _format_duration_hm(shift.start_time, shift.end_time)
    duration = f"{hours} —á {minutes} –º–∏–Ω"
    ended = shift.end_time.strftime('%d.%m.%Y %H:%M') if shift.end_time else ''
    if for_channel:
        return f"üì§ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: user_id={user.telegram_id} –≤ {ended} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration})"
    return f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {ended}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"


async def send_to_channel(bot, text: str) -> None:
    try:
        channel_id = settings.TELEGRAM_CHANNEL_ID
        if not channel_id:
            return
        await bot.send_message(channel_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")


async def send_to_user(bot, user_telegram_id: int, text: str) -> None:
    try:
        await bot.send_message(user_telegram_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")


async def async_notify_shift_started(bot, db: Session, user: User, shift: Shift) -> None:
    try:
        await send_to_user(bot, user.telegram_id, build_shift_started_message(user, shift, for_channel=False))
        await send_to_channel(bot, build_shift_started_message(user, shift, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Å–º–µ–Ω—ã: {e}")


async def async_notify_shift_ended(bot, db: Session, user: User, shift: Shift) -> None:
    try:
        await send_to_user(bot, user.telegram_id, build_shift_ended_message(user, shift, for_channel=False))
        await send_to_channel(bot, build_shift_ended_message(user, shift, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")


# ====== Request status notifications (3.4) ======
def _build_request_status_message_user(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üìå –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{request.id} –∏–∑–º–µ–Ω—ë–Ω: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        f"–ê–¥—Ä–µ—Å: {request.address[:60]}{'‚Ä¶' if len(request.address) > 60 else ''}"
    )


def _build_request_status_message_executor(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üìå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request.id} –∏–∑–º–µ–Ω—ë–Ω: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category} ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º"
    )


def _build_request_status_message_channel(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üîî –ó–∞—è–≤–∫–∞ #{request.id}: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}"
    )


async def async_notify_request_status_changed(
    bot,
    db: Session,
    request: Request,
    old_status: str,
    new_status: str,
) -> None:
    try:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∑–∞—è–≤–∏—Ç–µ–ª—å
        try:
            from database.models.user import User as UserModel
            applicant = db.query(UserModel).filter(UserModel.id == request.user_id).first()
            if applicant and applicant.telegram_id:
                await send_to_user(
                    bot,
                    applicant.telegram_id,
                    _build_request_status_message_user(request, old_status, new_status),
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞—è–≤–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{request.id}: {e}")

        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        try:
            if request.executor_id:
                from database.models.user import User as UserModel
                executor = db.query(UserModel).filter(UserModel.id == request.executor_id).first()
                if executor and executor.telegram_id:
                    await send_to_user(
                        bot,
                        executor.telegram_id,
                        _build_request_status_message_executor(request, old_status, new_status),
                    )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{request.id}: {e}")

        # –ö–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        await send_to_channel(bot, _build_request_status_message_channel(request, old_status, new_status))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request.id}: {e}")


# ====== 6.8 Role switch and action denied notifications ======
def build_role_switched_message(user: User, old_role: str, new_role: str) -> str:
    """–°—Ç—Ä–æ–∏—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏."""
    try:
        from utils.helpers import get_text
        language = getattr(user, "language", "ru") or "ru"
        role_key = f"roles.{new_role}"
        role_display = get_text(role_key, language=language)
        return get_text("role.switched_notify", language=language, role=role_display)
    except Exception:
        return f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {new_role}"


async def async_notify_role_switched(bot, db: Session, user: User, old_role: str, new_role: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ (best-effort)."""
    try:
        text = build_role_switched_message(user, old_role, new_role)
        await send_to_user(bot, user.telegram_id, text)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞: {e}")


def build_action_denied_message(reason_key: str, language: str = "ru") -> str:
    """–°—Ç—Ä–æ–∏—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π.

    reason_key –æ–∂–∏–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 'not_in_shift' | 'permission_denied' | 'invalid_transition'
    """
    try:
        from utils.helpers import get_text
        title = get_text("notify.denied_title", language=language)
        reason_text = get_text(f"notify.reason.{reason_key}", language=language)
        return f"{title}:\n{reason_text}"
    except Exception:
        fallback = {
            "not_in_shift": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –≤—ã –Ω–µ –≤ —Å–º–µ–Ω–µ.",
            "permission_denied": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",
            "invalid_transition": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞.",
        }
        return fallback.get(reason_key, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")


async def async_notify_action_denied(bot, db: Session, user_telegram_id: int, reason_key: str) -> None:
    """–ê–¥—Ä–µ—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–∞–∑–µ, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –µ–≥–æ —è–∑—ã–∫—É (best-effort)."""
    try:
        user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
        language = getattr(user, "language", "ru") if user else "ru"
        text = build_action_denied_message(reason_key, language=language)
        await send_to_user(bot, user_telegram_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")

