from sqlalchemy.orm import Session
from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.shift import Shift
import logging
from uk_management_bot.utils.constants import (
    NOTIFICATION_TYPE_STATUS_CHANGED,
    NOTIFICATION_TYPE_PURCHASE,
    NOTIFICATION_TYPE_CLARIFICATION,
)
from uk_management_bot.config.settings import settings
from datetime import datetime

logger = logging.getLogger(__name__)


def notify_status_changed(db: Session, request: Request, old_status: str, new_status: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∫–∞ –ª–æ–≥-–∑–∞–≥–ª—É—à–∫–∞.

    –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –∏–ª–∏ –∞–¥—Ä–µ—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    try:
        logger.info(
            f"Notification: type={NOTIFICATION_TYPE_STATUS_CHANGED}, request_number={request.request_number}, old={old_status}, new={new_status}"
        )
        if new_status == "–ó–∞–∫—É–ø":
            logger.info(f"Notification: type={NOTIFICATION_TYPE_PURCHASE}, request_number={request.request_number}")
        if new_status == "–£—Ç–æ—á–Ω–µ–Ω–∏–µ":
            logger.info(f"Notification: type={NOTIFICATION_TYPE_CLARIFICATION}, request_number={request.request_number}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")


def notify_shift_started(db: Session, user: User, shift: Shift) -> None:
    try:
        logger.info(f"Notification: shift_started user_id={user.id} shift_id={shift.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Å–º–µ–Ω—ã: {e}")


def notify_shift_ended(db: Session, user: User, shift: Shift) -> None:
    try:
        logger.info(f"Notification: shift_ended user_id={user.id} shift_id={shift.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")


# ====== Async helpers for full notifications (3.3) ======
def _format_duration_hm(start_time: datetime, end_time: datetime | None) -> tuple[int, int]:
    end = end_time or datetime.now()
    total_minutes = max(0, int((end - start_time).total_seconds() // 60))
    hours = total_minutes // 60
    minutes = total_minutes % 60
    return hours, minutes


def build_shift_started_message(user: User, shift: Shift, for_channel: bool = False) -> str:
    started = shift.start_time.strftime('%d.%m.%Y %H:%M') if shift.start_time else ''
    if for_channel:
        return f"üîî –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: user_id={user.telegram_id} –≤ {started}"
    return f"‚úÖ –í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞ –≤ {started}"


def build_shift_ended_message(user: User, shift: Shift, for_channel: bool = False) -> str:
    hours, minutes = _format_duration_hm(shift.start_time, shift.end_time)
    duration = f"{hours} —á {minutes} –º–∏–Ω"
    ended = shift.end_time.strftime('%d.%m.%Y %H:%M') if shift.end_time else ''
    if for_channel:
        return f"üì§ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: user_id={user.telegram_id} –≤ {ended} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration})"
    return f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {ended}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}"


async def send_to_channel(bot, text: str) -> None:
    try:
        channel_id = settings.TELEGRAM_CHANNEL_ID
        if not channel_id:
            return
        await bot.send_message(channel_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")


async def send_to_user(bot, user_telegram_id: int, text: str) -> None:
    try:
        await bot.send_message(user_telegram_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")


async def async_notify_shift_started(bot, db: Session, user: User, shift: Shift) -> None:
    try:
        await send_to_user(bot, user.telegram_id, build_shift_started_message(user, shift, for_channel=False))
        await send_to_channel(bot, build_shift_started_message(user, shift, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ —Å–º–µ–Ω—ã: {e}")


async def async_notify_shift_ended(bot, db: Session, user: User, shift: Shift) -> None:
    try:
        await send_to_user(bot, user.telegram_id, build_shift_ended_message(user, shift, for_channel=False))
        await send_to_channel(bot, build_shift_ended_message(user, shift, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}")


def build_document_request_message(user: User, request_text: str, document_type: str = None, for_channel: bool = False) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if for_channel:
        return f"üìã –ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: user_id={user.telegram_id}, —Ç–∏–ø: {document_type}, –∑–∞–ø—Ä–æ—Å: {request_text}"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document_names = {
        'passport': '–ø–∞—Å–ø–æ—Ä—Ç',
        'property_deed': '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
        'rental_agreement': '–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
        'utility_bill': '–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ñ–ö–•',
        'other': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
    }
    
    doc_name = document_names.get(document_type, document_type) if document_type else "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    
    message = f"üìã **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã**\n\n"
    message += f"üîç **–¢—Ä–µ–±—É–µ–º—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:** {doc_name}\n\n"
    message += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n{request_text}\n\n"
    message += f"üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    
    return message


async def async_notify_document_request(bot, db: Session, user: User, request_text: str, document_type: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        await send_to_user(bot, user.telegram_id, build_document_request_message(user, request_text, document_type, for_channel=False))
        await send_to_channel(bot, build_document_request_message(user, request_text, document_type, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")


def build_multiple_documents_request_message(user: User, request_text: str, document_types: list, for_channel: bool = False) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if for_channel:
        return f"üìã –ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: user_id={user.telegram_id}, —Ç–∏–ø—ã: {document_types}, –∑–∞–ø—Ä–æ—Å: {request_text}"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    document_names = {
        'passport': '–ø–∞—Å–ø–æ—Ä—Ç',
        'property_deed': '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
        'rental_agreement': '–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
        'utility_bill': '–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ñ–ö–•',
        'other': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
    }
    
    doc_names = []
    for doc_type in document_types:
        doc_name = document_names.get(doc_type, doc_type)
        doc_names.append(doc_name)
    
    doc_list = ", ".join(doc_names)
    
    message = f"üìã **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã**\n\n"
    message += f"üîç **–¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**\n{doc_list}\n\n"
    message += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n{request_text}\n\n"
    message += f"üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    
    return message


async def async_notify_multiple_documents_request(bot, db: Session, user: User, request_text: str, document_types: list) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        await send_to_user(bot, user.telegram_id, build_multiple_documents_request_message(user, request_text, document_types, for_channel=False))
        await send_to_channel(bot, build_multiple_documents_request_message(user, request_text, document_types, for_channel=True))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")


# ====== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ======

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, db: Session):
        self.db = db
    
    async def send_verification_request_notification(self, user_id: int, info_type: str, comment: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            info_type: –¢–∏–ø –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            info_type_names = {
                'address': '—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å',
                'passport': '–ø–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
                'rental_agreement': '–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ñ–ö–•',
                'other': '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
            }
            
            info_name = info_type_names.get(info_type, info_type)
            
            message = f"""
üìù **–ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –≤–∞—Å {info_name}.

üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**
{comment}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    async def send_verification_approved_notification(self, user_id: int) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            message = f"""
‚úÖ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!**

–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    async def send_verification_rejected_notification(self, user_id: int) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            message = f"""
‚ùå **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    async def send_document_approved_notification(self, user_id: int, document_type: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            document_names = {
                'passport': '–ø–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
                'rental_agreement': '–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ñ–ö–•',
                'other': '–¥–æ–∫—É–º–µ–Ω—Ç'
            }
            
            doc_name = document_names.get(document_type, document_type)
            
            message = f"""
‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω**

–í–∞—à {doc_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    async def send_document_rejected_notification(self, user_id: int, document_type: str, reason: str = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            document_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            document_names = {
                'passport': '–ø–∞—Å–ø–æ—Ä—Ç',
                'property_deed': '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
                'rental_agreement': '–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
                'utility_bill': '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ñ–ö–•',
                'other': '–¥–æ–∫—É–º–µ–Ω—Ç'
            }
            
            doc_name = document_names.get(document_type, document_type)
            
            message = f"""
‚ùå **–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω**

–í–∞—à {doc_name} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.
            """
            
            if reason:
                message += f"\n\nüí¨ **–ü—Ä–∏—á–∏–Ω–∞:**\n{reason}"
            
            message += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    async def send_access_rights_granted_notification(self, user_id: int, access_level: str, details: str = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            access_level: –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            details: –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–∞
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            level_names = {
                'apartment': '–∫–≤–∞—Ä—Ç–∏—Ä—ã',
                'house': '–¥–æ–º–∞',
                'yard': '–¥–≤–æ—Ä–∞'
            }
            
            level_name = level_names.get(access_level, access_level)
            
            message = f"""
üîë **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã**

–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫ –¥–ª—è {level_name}.
            """
            
            if details:
                message += f"\n\nüìç **–î–µ—Ç–∞–ª–∏:**\n{details}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    async def send_access_rights_revoked_notification(self, user_id: int, access_level: str, reason: str = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            access_level: –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞
        """
        try:
            from uk_management_bot.database.models.user import User
            
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            level_names = {
                'apartment': '–∫–≤–∞—Ä—Ç–∏—Ä—ã',
                'house': '–¥–æ–º–∞',
                'yard': '–¥–≤–æ—Ä–∞'
            }
            
            level_name = level_names.get(access_level, access_level)
            
            message = f"""
üö´ **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã**

–í–∞—à–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫ –¥–ª—è {level_name} –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.
            """
            
            if reason:
                message += f"\n\nüí¨ **–ü—Ä–∏—á–∏–Ω–∞:**\n{reason}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            finally:
                await bot.session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")


# ====== Request status notifications (3.4) ======
def _build_request_status_message_user(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üìå –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #{request.request_number} –∏–∑–º–µ–Ω—ë–Ω: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}\n"
        f"–ê–¥—Ä–µ—Å: {request.address[:60]}{'‚Ä¶' if len(request.address) > 60 else ''}"
    )


def _build_request_status_message_executor(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üìå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request.request_number} –∏–∑–º–µ–Ω—ë–Ω: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category} ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º"
    )


def _build_request_status_message_channel(request: Request, old_status: str, new_status: str) -> str:
    return (
        f"üîî –ó–∞—è–≤–∫–∞ #{request.request_number}: {old_status} ‚Üí {new_status}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category}"
    )


async def async_notify_request_status_changed(
    bot,
    db: Session,
    request: Request,
    old_status: str,
    new_status: str,
) -> None:
    try:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∑–∞—è–≤–∏—Ç–µ–ª—å
        try:
            from uk_management_bot.database.models.user import User as UserModel
            applicant = db.query(UserModel).filter(UserModel.id == request.user_id).first()
            if applicant and applicant.telegram_id:
                await send_to_user(
                    bot,
                    applicant.telegram_id,
                    _build_request_status_message_user(request, old_status, new_status),
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞—è–≤–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{request.request_number}: {e}")

        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        try:
            if request.executor_id:
                from uk_management_bot.database.models.user import User as UserModel
                executor = db.query(UserModel).filter(UserModel.id == request.executor_id).first()
                if executor and executor.telegram_id:
                    await send_to_user(
                        bot,
                        executor.telegram_id,
                        _build_request_status_message_executor(request, old_status, new_status),
                    )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞—è–≤–∫–µ #{request.request_number}: {e}")

        # –ö–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        await send_to_channel(bot, _build_request_status_message_channel(request, old_status, new_status))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ async —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request.request_number}: {e}")


# ====== 6.8 Role switch and action denied notifications ======
def build_role_switched_message(user: User, old_role: str, new_role: str) -> str:
    """–°—Ç—Ä–æ–∏—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏."""
    try:
        from uk_management_bot.utils.helpers import get_text
        language = getattr(user, "language", "ru") or "ru"
        role_key = f"roles.{new_role}"
        role_display = get_text(role_key, language=language)
        return get_text("role.switched_notify", language=language, role=role_display)
    except Exception:
        return f"–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {new_role}"


async def async_notify_role_switched(bot, db: Session, user: User, old_role: str, new_role: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ (best-effort)."""
    try:
        text = build_role_switched_message(user, old_role, new_role)
        await send_to_user(bot, user.telegram_id, text)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞: {e}")


def build_action_denied_message(reason_key: str, language: str = "ru") -> str:
    """–°—Ç—Ä–æ–∏—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π.

    reason_key –æ–∂–∏–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 'not_in_shift' | 'permission_denied' | 'invalid_transition'
    """
    try:
        from uk_management_bot.utils.helpers import get_text
        title = get_text("notify.denied_title", language=language)
        reason_text = get_text(f"notify.reason.{reason_key}", language=language)
        return f"{title}:\n{reason_text}"
    except Exception:
        fallback = {
            "not_in_shift": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –≤—ã –Ω–µ –≤ —Å–º–µ–Ω–µ.",
            "permission_denied": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",
            "invalid_transition": "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞.",
        }
        return fallback.get(reason_key, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")


async def async_notify_action_denied(bot, db: Session, user_telegram_id: int, reason_key: str) -> None:
    """–ê–¥—Ä–µ—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–∞–∑–µ, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –µ–≥–æ —è–∑—ã–∫—É (best-effort)."""
    try:
        user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
        language = getattr(user, "language", "ru") if user else "ru"
        text = build_action_denied_message(reason_key, language=language)
        await send_to_user(bot, user_telegram_id, text)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")

