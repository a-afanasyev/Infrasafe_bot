"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∑–∞—è–≤–∫–∞–º
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Å—Ç–∞—Ç—É—Å–∞
"""

from sqlalchemy.orm import Session
from sqlalchemy import desc, and_
from typing import List, Optional, Dict, Any
from datetime import datetime
import logging

from uk_management_bot.database.models.request import Request
from uk_management_bot.database.models.request_comment import RequestComment
from uk_management_bot.database.models.user import User
from uk_management_bot.database.models.audit import AuditLog
from uk_management_bot.utils.constants import (
    COMMENT_TYPE_STATUS_CHANGE,
    COMMENT_TYPE_CLARIFICATION,
    COMMENT_TYPE_PURCHASE,
    COMMENT_TYPE_REPORT,
    AUDIT_ACTION_REQUEST_STATUS_CHANGED
)
from uk_management_bot.services.notification_service import NotificationService

logger = logging.getLogger(__name__)

class CommentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫ –∑–∞—è–≤–∫–∞–º"""
    
    def __init__(self, db: Session):
        self.db = db
        self.notification_service = NotificationService(db)
    
    def add_comment(self, request_id: str, user_id: int, comment_text: str, 
                   comment_type: str, previous_status: str = None, 
                   new_status: str = None) -> RequestComment:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ
        
        Args:
            request_id: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (request_number)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            comment_text: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_type: –¢–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            previous_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞)
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞)
            
        Returns:
            RequestComment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            
        Raises:
            ValueError: –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É
            request = self.db.query(Request).filter(Request.request_number == request_id).first()
            if not request:
                raise ValueError(f"–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.query(User).filter(User.id == user_id).first()
            if not user:
                raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            valid_types = [COMMENT_TYPE_STATUS_CHANGE, COMMENT_TYPE_CLARIFICATION, 
                          COMMENT_TYPE_PURCHASE, COMMENT_TYPE_REPORT]
            if comment_type not in valid_types:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment_type}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = RequestComment(
                request_number=request_id,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ request_number
                user_id=user_id,
                comment_text=comment_text,
                comment_type=comment_type,
                previous_status=previous_status,
                new_status=new_status
            )
            
            self.db.add(comment)
            self.db.commit()
            self.db.refresh(comment)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç–µ
            self._create_audit_log(request_id, user_id, f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_type}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self._notify_comment_added(request, comment)
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ {request_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return comment
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            raise
    
    def get_request_comments(self, request_number: str, limit: int = 50) -> List[RequestComment]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            
        Returns:
            List[RequestComment]: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        return self.db.query(RequestComment).filter(
            RequestComment.request_number == request_number
        ).order_by(desc(RequestComment.created_at)).limit(limit).all()
    
    def get_comments_by_type(self, request_number: str, comment_type: str) -> List[RequestComment]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏ –ø–æ —Ç–∏–ø—É
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            comment_type: –¢–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            
        Returns:
            List[RequestComment]: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        return self.db.query(RequestComment).filter(
            and_(
                RequestComment.request_number == request_number,
                RequestComment.comment_type == comment_type
            )
        ).order_by(desc(RequestComment.created_at)).all()
    
    def format_comments_for_display(self, comments: List[RequestComment], language: str = "ru") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            comments: –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            language: –Ø–∑—ã–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        if not comments:
            return "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
        
        formatted_text = "üìù –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n"
        
        for comment in comments:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.db.query(User).filter(User.id == comment.user_id).first()
            if user:
                user_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                if not user_name:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {comment.user_id}"
            else:
                user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {comment.user_id}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = comment.created_at.strftime("%d.%m.%Y %H:%M") if comment.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            type_emoji = self._get_comment_type_emoji(comment.comment_type)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            formatted_text += f"{type_emoji} **{user_name}** ({date_str})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
            if comment.comment_type == COMMENT_TYPE_STATUS_CHANGE and comment.previous_status and comment.new_status:
                formatted_text += f"üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {comment.previous_status} ‚Üí {comment.new_status}\n"
            
            formatted_text += f"üí¨ {comment.comment_text}\n\n"
        
        return formatted_text
    
    def add_status_change_comment(self, request_number: str, user_id: int, 
                                previous_status: str, new_status: str, 
                                additional_comment: str = None) -> RequestComment:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            previous_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            additional_comment: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            
        Returns:
            RequestComment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
        request = self.db.query(Request).filter(Request.request_number == request_number).first()
        if not request:
            raise ValueError(f"–ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {request_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_text = f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å '{previous_status}' –Ω–∞ '{new_status}'"
        if additional_comment:
            comment_text += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional_comment}"
        
        return self.add_comment(
            request_id=request.request_number,
            user_id=user_id,
            comment_text=comment_text,
            comment_type=COMMENT_TYPE_STATUS_CHANGE,
            previous_status=previous_status,
            new_status=new_status
        )
    
    def add_purchase_comment(self, request_number: str, user_id: int, materials: str) -> RequestComment:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ –∑–∞–∫—É–ø–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            materials: –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            
        Returns:
            RequestComment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        comment_text = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n{materials}"
        
        return self.add_comment(
            request_id=request_number,
            user_id=user_id,
            comment_text=comment_text,
            comment_type=COMMENT_TYPE_PURCHASE
        )
    
    def add_clarification_comment(self, request_number: str, user_id: int, clarification: str) -> RequestComment:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clarification: –¢–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
            
        Returns:
            RequestComment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        return self.add_comment(
            request_id=request_number,
            user_id=user_id,
            comment_text=clarification,
            comment_type=COMMENT_TYPE_CLARIFICATION
        )
    
    def add_completion_report_comment(self, request_number: str, user_id: int, report: str) -> RequestComment:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –æ—Ç—á–µ—Ç–æ–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            report: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
            
        Returns:
            RequestComment: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        """
        return self.add_comment(
            request_id=request_number,
            user_id=user_id,
            comment_text=report,
            comment_type=COMMENT_TYPE_REPORT
        )
    
    def get_latest_comment(self, request_number: str, comment_type: str = None) -> Optional[RequestComment]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞—è–≤–∫–∏
        
        Args:
            request_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            comment_type: –¢–∏–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Optional[RequestComment]: –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ None
        """
        query = self.db.query(RequestComment).filter(RequestComment.request_number == request_number)
        
        if comment_type:
            query = query.filter(RequestComment.comment_type == comment_type)
        
        return query.order_by(desc(RequestComment.created_at)).first()
    
    def _get_comment_type_emoji(self, comment_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        emoji_map = {
            COMMENT_TYPE_STATUS_CHANGE: "üîÑ",
            COMMENT_TYPE_CLARIFICATION: "‚ùì",
            COMMENT_TYPE_PURCHASE: "üõí",
            COMMENT_TYPE_REPORT: "üìã"
        }
        return emoji_map.get(comment_type, "üí¨")
    
    def _create_audit_log(self, request_number: str, user_id: int, action_description: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∞—É–¥–∏—Ç–µ"""
        try:
            audit_log = AuditLog(
                user_id=user_id,
                action=AUDIT_ACTION_REQUEST_STATUS_CHANGED,
                details=f"–ó–∞—è–≤–∫–∞ {request_number}: {action_description}",
                timestamp=datetime.now()
            )
            self.db.add(audit_log)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –∞—É–¥–∏—Ç–µ: {e}")
    
    def _notify_comment_added(self, request: Request, comment: RequestComment):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            recipients = []
            
            # –ó–∞—è–≤–∏—Ç–µ–ª—å
            if request.user_id != comment.user_id:
                recipients.append(request.user_id)
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if request.executor_id and request.executor_id != comment.user_id:
                recipients.append(request.executor_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for recipient_id in recipients:
                self.notification_service.send_notification(
                    user_id=recipient_id,
                    notification_type="comment_added",
                    title="–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ",
                    message=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request.request_number}",
                    data={"request_number": request.request_number, "comment_id": comment.id}
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")
