"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import json
import logging
from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session
from uk_management_bot.database.models.user import User
from uk_management_bot.utils.helpers import get_text

logger = logging.getLogger(__name__)

class ProfileService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_user_profile_data(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            user = self.db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏ –∏–∑ JSON
            roles = ["applicant"]  # –¥–µ—Ñ–æ–ª—Ç
            try:
                if user.roles:
                    parsed_roles = json.loads(user.roles)
                    if isinstance(parsed_roles, list):
                        roles = [str(r) for r in parsed_roles if isinstance(r, str)]
            except (json.JSONDecodeError, TypeError):
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {user.roles}")
            
            # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å
            active_role = user.active_role or roles[0] if roles else "applicant"
            if active_role not in roles:
                active_role = roles[0] if roles else "applicant"
            
            # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
            specializations = []
            if user.specialization:
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º CSV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
                specializations = [s.strip() for s in user.specialization.split(',') if s.strip()]

            # –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–µ–π
            apartments = []
            if user.user_apartments:
                for ua in user.user_apartments:
                    if ua.status == 'approved' and ua.apartment:
                        apartment_info = {
                            'id': ua.apartment.id,
                            'address': ua.apartment.full_address if hasattr(ua.apartment, 'full_address') else f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ {ua.apartment.apartment_number}",
                            'is_primary': ua.is_primary,
                            'is_owner': ua.is_owner
                        }
                        apartments.append(apartment_info)

            profile_data = {
                'user_id': user.id,
                'telegram_id': user.telegram_id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'roles': roles,
                'active_role': active_role,
                'status': user.status or 'pending',
                'language': user.language or 'ru',
                'phone': user.phone,
                'apartments': apartments,  # –ù–û–í–û–ï: —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
                'specializations': specializations,  # –º–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
                'created_at': user.created_at,
                'updated_at': user.updated_at
            }

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}:")
            logger.info(f"  apartments count: {len(apartments)}")
            if apartments:
                logger.info(f"  primary apartment: {next((a['address'] for a in apartments if a['is_primary']), 'None')}")
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return profile_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {telegram_id}: {e}")
            return None
    
    def format_profile_text(self, profile_data: Dict[str, Any], language: str = "ru") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            profile_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            language: –Ø–∑—ã–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        """
        if not profile_data:
            return get_text("errors.unknown_error", language=language)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = get_text("profile.title", language=language)
        text_parts = [title, ""]
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_name = []
        if profile_data.get('first_name'):
            full_name.append(profile_data['first_name'])
        if profile_data.get('last_name'):
            full_name.append(profile_data['last_name'])
        
        if full_name:
            text_parts.append(f"üë§ {' '.join(full_name)}")
        if profile_data.get('username'):
            text_parts.append(f"üì± @{profile_data['username']}")
        
        text_parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = profile_data.get('status', 'pending')
        status_text = get_text(f"user_status.{status}", language=language)
        text_parts.append(f"{get_text('profile.status', language=language)} {status_text}")
        
        # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å
        active_role = profile_data.get('active_role', 'applicant')
        active_role_text = get_text(f"roles.{active_role}", language=language)
        text_parts.append(f"{get_text('profile.active_role', language=language)} {active_role_text}")
        
        # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
        roles = profile_data.get('roles', ['applicant'])
        if len(roles) > 1:
            roles_text = [get_text(f"roles.{role}", language=language) for role in roles]
            text_parts.append(f"{get_text('profile.all_roles', language=language)} {', '.join(roles_text)}")
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        phone = profile_data.get('phone')
        phone_text = phone if phone else get_text("profile.phone_not_set", language=language)
        text_parts.append(f"{get_text('profile.phone', language=language)} {phone_text}")
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
        if 'executor' in roles or 'manager' in roles:
            specializations = profile_data.get('specializations', [])
            if specializations:
                spec_texts = [get_text(f"specializations.{spec}", language=language) for spec in specializations]
                text_parts.append(f"{get_text('profile.specialization', language=language)} {', '.join(spec_texts)}")
            else:
                text_parts.append(f"{get_text('profile.specialization', language=language)} {get_text('profile.no_specialization', language=language)}")
        
        # –û–ë–ù–û–í–õ–ï–ù–û: –ê–¥—Ä–µ—Å–∞ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–≤–∞—Ä—Ç–∏—Ä
        text_parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        text_parts.append(f"üè† {get_text('profile.addresses', language=language)}")

        apartments = profile_data.get('apartments', [])
        if apartments:
            for apt in apartments:
                primary_marker = " ‚≠ê" if apt.get('is_primary') else ""
                owner_marker = " (–í–ª–∞–¥–µ–ª–µ—Ü)" if apt.get('is_owner') else ""
                text_parts.append(f"  {apt['address']}{primary_marker}{owner_marker}")
            logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä: {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä")
        else:
            no_apartments_text = "–ê–¥—Ä–µ—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if language == "ru" else "Manzillar ko'rsatilmagan"
            text_parts.append(f"  {no_apartments_text}")
            logger.info("–ê–¥—Ä–µ—Å–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        # –Ø–∑—ã–∫
        text_parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        lang_display = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if language == "ru" else "üá∫üáø O'zbek"
        text_parts.append(f"{get_text('profile.language', language=language)} {lang_display}")
        
        return "\n".join(text_parts)
    
    def validate_profile_data(self, profile_data: Dict[str, Any]) -> List[str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
        Args:
            profile_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º (–ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –≤—Å—ë –û–ö)
        """
        issues = []
        
        if not profile_data:
            issues.append("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return issues
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not profile_data.get('telegram_id'):
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id")
        
        if not profile_data.get('roles') or not isinstance(profile_data['roles'], list):
            issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–æ–ª–∏")
        
        if profile_data.get('active_role') not in profile_data.get('roles', []):
            issues.append("–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π")
        
        if profile_data.get('status') not in ['pending', 'approved', 'blocked']:
            issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        phone = profile_data.get('phone')
        if phone and (len(phone) < 10 or not phone.replace('+', '').replace(' ', '').replace('-', '').isdigit()):
            issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        return issues
