"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import pytest
import json
from unittest.mock import AsyncMock, MagicMock
from aiogram.types import Message, Contact, User as TelegramUser
from aiogram.fsm.context import FSMContext
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from uk_management_bot.database.session import Base
from uk_management_bot.database.models.user import User
from uk_management_bot.handlers.onboarding import (
    start_phone_input, process_contact, process_manual_phone, 
    process_home_address, complete_onboarding, OnboardingStates
)

# –°–æ–∑–¥–∞–µ–º in-memory –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
engine = create_engine("sqlite:///:memory:")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture
def db_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    Base.metadata.create_all(bind=engine)
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()

@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç Message"""
    user = TelegramUser(id=123456789, is_bot=False, first_name="Test", language_code="ru")
    message = MagicMock(spec=Message)
    message.from_user = user
    message.text = None
    message.contact = None
    message.answer = AsyncMock()
    return message

@pytest.fixture
def mock_state():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ–±—ä–µ–∫—Ç FSMContext"""
    state = MagicMock(spec=FSMContext)
    state.set_state = AsyncMock()
    state.clear = AsyncMock()
    state.update_data = AsyncMock()
    return state

@pytest.fixture
def sample_user(db_session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="Test",
        last_name="User",
        status="pending"
    )
    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)
    return user

@pytest.mark.asyncio
async def test_start_phone_input(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "üì± –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
    
    await start_phone_input(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    assert "—Ç–µ–ª–µ—Ñ–æ–Ω–∞" in call_args[0][0] or "telefon" in call_args[0][0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    mock_state.set_state.assert_called_once_with(OnboardingStates.waiting_for_phone)

@pytest.mark.asyncio
async def test_process_contact(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact = MagicMock(spec=Contact)
    contact.phone_number = "998901234567"
    mock_message.contact = contact
    
    await process_contact(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone == "+998901234567"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    assert mock_message.answer.call_count >= 2  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    mock_state.set_state.assert_called_with(OnboardingStates.waiting_for_home_address)

@pytest.mark.asyncio
async def test_process_manual_phone_valid(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "+998901234567"
    
    await process_manual_phone(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone == "+998901234567"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    mock_state.set_state.assert_called_with(OnboardingStates.waiting_for_home_address)

@pytest.mark.asyncio
async def test_process_manual_phone_invalid(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "123"
    
    await process_manual_phone(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.phone is None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    assert "—Ñ–æ—Ä–º–∞—Ç" in call_args[0][0] or "format" in call_args[0][0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    mock_state.set_state.assert_not_called()

@pytest.mark.asyncio
async def test_process_manual_phone_cancel(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    mock_message.text = "‚ùå –û—Ç–º–µ–Ω–∞"
    
    await process_manual_phone(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()

@pytest.mark.asyncio
async def test_process_home_address_valid(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sample_user.phone = "+998901234567"
    db_session.commit()
    
    mock_message.text = "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123"
    
    await process_home_address(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.home_address == "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω)
    mock_state.clear.assert_called_once()

@pytest.mark.asyncio
async def test_process_home_address_invalid(mock_message, mock_state, db_session, sample_user):
    """–¢–µ—Å—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    mock_message.text = "12"  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    
    await process_home_address(mock_message, mock_state, db_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    updated_user = db_session.query(User).filter(User.telegram_id == 123456789).first()
    assert updated_user.home_address is None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    assert "–∫–æ—Ä–æ—Ç–∫–∏–π" in call_args[0][0] or "qisqa" in call_args[0][0]

@pytest.mark.asyncio
async def test_complete_onboarding(mock_message, mock_state, db_session):
    """–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="Test",
        last_name="User",
        phone="+998901234567",
        home_address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123",
        status="pending"
    )
    db_session.add(user)
    db_session.commit()
    
    await complete_onboarding(mock_message, mock_state, db_session, user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    mock_message.answer.assert_called_once()
    call_args = mock_message.answer.call_args
    assert "–∑–∞–≤–µ—Ä—à–µ–Ω" in call_args[0][0] or "tugallandi" in call_args[0][0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ
    mock_state.clear.assert_called_once()

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
