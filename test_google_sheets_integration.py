#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö credentials.
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(project_root / "uk_management_bot"))

from integrations.google_sheets import SheetsService, SyncTask
from utils.sheets_utils import CircuitBreaker, RateLimiter, SheetsSyncWorker


async def test_sheets_service_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SheetsService"""
    print("üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SheetsService")
    
    try:
        service = SheetsService()
        print(f"‚úÖ SheetsService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Sync enabled: {service.sync_enabled}")
        print(f"   - Spreadsheet ID: {service.spreadsheet_id}")
        print(f"   - Credentials file: {service.credentials_file}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        status = await service.get_sync_status()
        print(f"   - Status: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SheetsService: {e}")
        return False


async def test_circuit_breaker():
    """–¢–µ—Å—Ç Circuit Breaker"""
    print("\nüß™ –¢–µ—Å—Ç 2: Circuit Breaker")
    
    try:
        cb = CircuitBreaker(failure_threshold=3, recovery_timeout=5)
        print(f"‚úÖ Circuit Breaker —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Initial state: {cb.state}")
        print(f"   - Is closed: {cb.is_closed()}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i in range(3):
            cb.on_error()
            print(f"   - Error {i+1}, state: {cb.state}, is_closed: {cb.is_closed()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—à–µ–ª –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if cb.state == "OPEN":
            print("‚úÖ Circuit Breaker –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—à–µ–ª –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        cb.on_success()
        print(f"   - After success, state: {cb.state}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Circuit Breaker: {e}")
        return False


async def test_rate_limiter():
    """–¢–µ—Å—Ç Rate Limiter"""
    print("\nüß™ –¢–µ—Å—Ç 3: Rate Limiter")
    
    try:
        rl = RateLimiter(requests_per_minute=5)
        print(f"‚úÖ Rate Limiter —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Requests per minute: {rl.requests_per_minute}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(3):
            await rl.wait_if_needed()
            stats = rl.get_usage_stats()
            print(f"   - Request {i+1}, current: {stats['current_requests']}, available: {stats['available_requests']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Rate Limiter: {e}")
        return False


async def test_sync_task():
    """–¢–µ—Å—Ç SyncTask"""
    print("\nüß™ –¢–µ—Å—Ç 4: SyncTask")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'id': 123,
            'status': '–ù–æ–≤–∞—è',
            'category': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞'
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = SyncTask(
            task_type="create",
            request_id=123,
            data=test_data,
            priority="high"
        )
        
        print(f"‚úÖ SyncTask —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   - Task type: {task.task_type}")
        print(f"   - Request ID: {task.request_id}")
        print(f"   - Priority: {task.priority}")
        print(f"   - Retry count: {task.retry_count}")
        
        # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        json_str = task.to_json()
        print(f"   - JSON serialization: {len(json_str)} chars")
        
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        task2 = SyncTask.from_json(json_str)
        print(f"   - Deserialization successful: {task2.request_id == task.request_id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SyncTask: {e}")
        return False


async def test_sheets_service_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ SheetsService (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)"""
    print("\nüß™ –¢–µ—Å—Ç 5: SheetsService –º–µ—Ç–æ–¥—ã")
    
    try:
        service = SheetsService()
        
        # –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        test_request_data = {
            'id': 123,
            'created_at': '2024-12-07 10:30:00',
            'status': '–ù–æ–≤–∞—è',
            'category': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
            'address': '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
            'description': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
            'urgency': '–û–±—ã—á–Ω–∞—è',
            'applicant_id': 1,
            'applicant_name': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'executor_id': None,
            'executor_name': '',
            'assigned_at': '',
            'completed_at': '',
            'comments': '',
            'photo_urls': ''
        }
        
        # –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏
        row_data = service._prepare_request_row_data(test_request_data)
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–∞")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(row_data)}")
        print(f"   - –î–∞–Ω–Ω—ã–µ: {row_data[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
        
        # –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        changes = {'status': '–í —Ä–∞–±–æ—Ç–µ', 'executor_id': 2}
        update_data = service._prepare_update_data(changes)
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"   - Update data: {update_data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–æ–≤ SheetsService: {e}")
        return False


async def test_integration_without_credentials():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö credentials"""
    print("\nüß™ –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–µ–∑ credentials")
    
    try:
        service = SheetsService()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –±–µ–∑ credentials)
        connection_test = await service.test_connection()
        print(f"‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   - Connection test result: {connection_test}")
        print(f"   - Expected: False (no credentials)")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å False –±–µ–∑ credentials)
        structure_test = await service.create_spreadsheet_structure()
        print(f"‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   - Structure creation result: {structure_test}")
        print(f"   - Expected: False (no credentials)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    tests = [
        test_sheets_service_initialization,
        test_circuit_breaker,
        test_rate_limiter,
        test_sync_task,
        test_sheets_service_methods,
        test_integration_without_credentials
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            result = await test()
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets API credentials")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ Google Spreadsheet")
        print("   3. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å API")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    return passed == total


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
