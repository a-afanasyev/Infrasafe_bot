#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ MediaService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
"""

import requests
import io
from PIL import Image

def create_test_image():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏"""
    import random
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange']
    color = random.choice(colors)
    size = random.randint(90, 110)
    img = Image.new('RGB', (size, size), color=color)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        from PIL import ImageDraw, ImageFont
        draw = ImageDraw.Draw(img)
        draw.text((10, 40), "TEST", fill='white')
    except:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO –∫–∞–∫ JPEG
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='JPEG')
    img_bytes.seek(0)

    return img_bytes

def test_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    print("üß™ Testing MediaService Upload...")

    api_url = "http://media-api:8000/api/v1/media/upload"

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = create_test_image()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    files = {
        'file': ('test_image.jpg', test_image, 'image/jpeg')
    }

    data = {
        'request_number': 'TEST-250920-002',
        'category': 'request_photo',
        'description': '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–∞–Ω–∞–ª–æ–≤',
        'tags': 'test,frontend,channel_test',
        'uploaded_by': '1'
    }

    try:
        print(f"üì§ Uploading test image to {api_url}...")
        response = requests.post(api_url, files=files, data=data, timeout=30)

        print(f"üìä Response Status: {response.status_code}")

        if response.status_code == 201:
            result = response.json()
            print("‚úÖ Upload successful!")
            print(f"   File ID: {result['media_file']['id']}")
            print(f"   Filename: {result['media_file']['original_filename']}")
            print(f"   Category: {result['media_file']['category']}")
            print(f"   Request: {result['media_file']['request_number']}")
            print(f"   Tags: {result['media_file']['tags']}")

            if result.get('file_url'):
                print(f"   File URL: {result['file_url']}")

            return True

        else:
            print("‚ùå Upload failed!")
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            return False

    except requests.exceptions.ConnectionError:
        print("‚ùå Cannot connect to MediaService API")
        print("   Make sure the service is running on localhost:8001")
        return False
    except Exception as e:
        print(f"‚ùå Upload error: {e}")
        return False

def test_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüîç Testing search for uploaded file...")

    search_url = "http://media-api:8000/api/v1/media/search"
    params = {
        'request_numbers': 'TEST-250920-002',
        'limit': 10
    }

    try:
        response = requests.get(search_url, params=params, timeout=10)

        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Search successful! Found {result['total_count']} files")

            if result['results']:
                file_info = result['results'][0]
                print(f"   Found file: {file_info['original_filename']}")
                print(f"   Description: {file_info['description']}")
                print(f"   Tags: {file_info['tags']}")

            return True
        else:
            print(f"‚ùå Search failed: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Search error: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ MediaService Channel Integration Test")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    upload_success = test_upload()

    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
    if upload_success:
        search_success = test_search()

        if search_success:
            print("\nüéâ All tests passed! MediaService channels are working!")
        else:
            print("\n‚ö†Ô∏è  Upload works but search has issues")
    else:
        print("\n‚ùå Upload test failed - check Telegram channel configuration")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞")
        print("3. –ö–∞–Ω–∞–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("4. TELEGRAM_BOT_TOKEN –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")