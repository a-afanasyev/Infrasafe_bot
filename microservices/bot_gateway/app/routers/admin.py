"""
Bot Gateway Service - Admin Panel Handlers
UK Management Bot

Handlers for admin panel: user management, request management, system config, etc.
"""

import logging
from typing import Optional
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.integrations.user_client import UserServiceClient
from app.integrations.request_client import RequestServiceClient
from app.integrations.shift_client import ShiftServiceClient
from app.keyboards import admin as admin_keyboards
from app.keyboards.common import get_main_menu_keyboard, get_cancel_keyboard
from app.states.admin_states import (
    UserManagementStates,
    RequestManagementStates,
    SystemConfigStates,
    BroadcastStates,
    AnalyticsStates,
)

logger = logging.getLogger(__name__)

# Create router
router = Router(name="admin")

# Initialize service clients
user_client = UserServiceClient()
request_client = RequestServiceClient()
shift_client = ShiftServiceClient()


# ===========================================
# Access Control Decorator
# ===========================================


def admin_only(handler):
    """
    Decorator to ensure only admins can access handler.
    """

    async def wrapper(message_or_callback, user_role: str, language: str, **kwargs):
        if user_role not in ["admin", "manager"]:
            texts = {
                "ru": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                "uz": "‚ùå Sizda bu buyruqni bajarish uchun huquq yo'q.",
            }
            error_text = texts.get(language, texts["ru"])

            if isinstance(message_or_callback, Message):
                await message_or_callback.answer(error_text)
            else:
                await message_or_callback.message.answer(error_text)
                await message_or_callback.answer()
            return

        return await handler(message_or_callback, user_role=user_role, language=language, **kwargs)

    return wrapper


# ===========================================
# Main Admin Panel
# ===========================================


@router.message(F.text.in_(["üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üë®‚Äçüíº Admin panel"]))
@router.message(Command("admin"))
async def cmd_admin_panel(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show main admin panel.

    Available for: admin, manager
    """
    if user_role not in ["admin", "manager"]:
        texts = {
            "ru": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            "uz": "‚ùå Sizda admin panelga kirish huquqi yo'q.",
        }
        await message.answer(texts.get(language, texts["ru"]))
        return

    await state.clear()

    texts = {
        "ru": (
            "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n\n"
            "‚Ä¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ <b>–ó–∞—è–≤–∫–∏</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n"
            "‚Ä¢ <b>–°–º–µ–Ω—ã</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏\n"
            "‚Ä¢ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤\n"
            "‚Ä¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ <b>–õ–æ–≥–∏</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"
        ),
        "uz": (
            "üë®‚Äçüíº <b>Admin panel</b>\n\n"
            "Bo'limni tanlang:\n\n"
            "‚Ä¢ <b>Foydalanuvchilar</b> - Foydalanuvchilarni boshqarish\n"
            "‚Ä¢ <b>Arizalar</b> - Arizalarni boshqarish\n"
            "‚Ä¢ <b>Smenalar</b> - Smenalarni boshqarish\n"
            "‚Ä¢ <b>Analitika</b> - Hisobotlarni ko'rish\n"
            "‚Ä¢ <b>Xabar yuborish</b> - Xabar yuborish\n"
            "‚Ä¢ <b>Sozlamalar</b> - Tizim sozlamalari\n"
            "‚Ä¢ <b>Loglar</b> - Tizim loglarini ko'rish"
        ),
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_admin_menu_keyboard(language),
        parse_mode="HTML",
    )


# ===========================================
# User Management
# ===========================================


@router.message(F.text.in_(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üë• Foydalanuvchilar"]))
@admin_only
async def button_users(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show user management menu.
    """
    await state.clear()

    texts = {
        "ru": (
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
        ),
        "uz": (
            "üë• <b>Foydalanuvchilarni boshqarish</b>\n\n"
            "Foydalanuvchilarni qidirish usulini tanlang:"
        ),
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_user_search_options_keyboard(language),
        parse_mode="HTML",
    )

    await state.set_state(UserManagementStates.waiting_for_search_query)


@router.callback_query(F.data.startswith("user_search:"))
async def callback_user_search(
    callback: CallbackQuery,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Handle user search option selection.
    """
    await callback.answer()

    search_type = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "phone": "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            "name": "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            "role": "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            "all": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            "active": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            "blocked": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        },
        "uz": {
            "phone": "üì± Foydalanuvchi telefon raqamini kiriting:",
            "name": "üë§ Foydalanuvchi ismini kiriting:",
            "role": "üè∑ Rolni tanlang:",
            "all": "‚è≥ Barcha foydalanuvchilar yuklanmoqda...",
            "active": "‚è≥ Faol foydalanuvchilar yuklanmoqda...",
            "blocked": "‚è≥ Bloklangan foydalanuvchilar yuklanmoqda...",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    if search_type == "role":
        await callback.message.answer(
            lang_texts["role"],
            reply_markup=admin_keyboards.get_role_selection_keyboard(language),
        )
        return

    if search_type in ["all", "active", "blocked"]:
        loading_msg = await callback.message.answer(lang_texts[search_type])

        try:
            # Get users from User Service
            params = {"limit": 10}
            if search_type == "active":
                params["is_active"] = True
            elif search_type == "blocked":
                params["is_active"] = False

            result = await user_client.get_users(token=token, **params)

            await loading_msg.delete()

            users = result.get("items", [])

            if not users:
                await callback.message.answer(
                    "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    if language == "ru"
                    else "üë• Foydalanuvchilar topilmadi"
                )
                return

            # Display users with action buttons
            for user in users[:5]:  # Show first 5
                user_id = user.get("id")
                full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                phone = user.get("phone", "N/A")
                role = user.get("role", "N/A")
                is_active = user.get("is_active", True)

                status_emoji = "‚úÖ" if is_active else "üö´"

                user_info = (
                    f"{status_emoji} <b>{full_name}</b>\n"
                    f"üì± {phone}\n"
                    f"üè∑ –†–æ–ª—å: {role}\n"
                    f"üÜî ID: <code>{user_id}</code>"
                )

                await callback.message.answer(
                    user_info,
                    reply_markup=admin_keyboards.get_user_actions_keyboard(
                        user_id, is_active, language
                    ),
                    parse_mode="HTML",
                )

            total = result.get("total", 0)
            if total > 5:
                await callback.message.answer(
                    f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
                    if language == "ru"
                    else f"<i>{total} tadan birinchi 5 ta ko'rsatildi</i>",
                    parse_mode="HTML",
                )

        except Exception as e:
            logger.error(f"Error loading users: {e}")
            await loading_msg.delete()
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                if language == "ru"
                else "‚ùå Foydalanuvchilarni yuklashda xatolik"
            )

        return

    # For phone/name search, prompt for input
    await callback.message.answer(lang_texts[search_type])
    await state.update_data(search_type=search_type)


@router.callback_query(F.data.startswith("user:view:"))
async def callback_view_user(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    View detailed user information.
    """
    user_id = callback.data.split(":")[-1]

    try:
        user = await user_client.get_user_by_id(user_id=user_id, token=token)

        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        phone = user.get("phone", "N/A")
        role = user.get("role", "N/A")
        is_active = user.get("is_active", True)
        created_at = user.get("created_at", "N/A")
        telegram_id = user.get("telegram_id")

        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        if language == "uz":
            status_text = "‚úÖ Faol" if is_active else "üö´ Bloklangan"

        response = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"<b>–ò–º—è:</b> {full_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"<b>–†–æ–ª—å:</b> {role}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>Telegram ID:</b> <code>{telegram_id}</code>\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {created_at[:10] if created_at != 'N/A' else 'N/A'}"
        )

        await callback.message.answer(response, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error viewing user: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            if language == "ru"
            else "‚ùå Foydalanuvchi ma'lumotlarini yuklashda xatolik"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("user:role:"))
async def callback_change_role(
    callback: CallbackQuery,
    language: str,
    state: FSMContext,
):
    """
    Initiate role change for user.
    """
    user_id = callback.data.split(":")[-1]

    texts = {
        "ru": "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "uz": "üè∑ Foydalanuvchi uchun yangi rolni tanlang:",
    }

    await callback.message.answer(
        texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_role_selection_keyboard(language),
    )

    await state.update_data(user_id=user_id, action="change_role")
    await state.set_state(UserManagementStates.waiting_for_role_change)

    await callback.answer()


@router.callback_query(F.data.startswith("role:"), UserManagementStates.waiting_for_role_change)
async def callback_confirm_role_change(
    callback: CallbackQuery,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Confirm and apply role change.
    """
    new_role = callback.data.split(":")[-1]
    data = await state.get_data()
    user_id = data.get("user_id")

    texts = {
        "ru": {
            "processing": "‚è≥ –û–±–Ω–æ–≤–ª—è—é —Ä–æ–ª—å...",
            "success": f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_role}",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
        },
        "uz": {
            "processing": "‚è≥ Rol yangilanmoqda...",
            "success": f"‚úÖ Rol muvaffaqiyatli o'zgartirildi: {new_role}",
            "error": "‚ùå Rolni o'zgartirishda xatolik",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.answer(lang_texts["processing"])

    try:
        result = await user_client.update_user(
            user_id=user_id, data={"role": new_role}, token=token
        )

        await callback.message.answer(lang_texts["success"])
        await state.clear()

    except Exception as e:
        logger.error(f"Error changing user role: {e}")
        await callback.message.answer(lang_texts["error"])
        await state.clear()


@router.callback_query(F.data.startswith("user:block:"))
async def callback_block_user(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    Block user.
    """
    user_id = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "processing": "‚è≥ –ë–ª–æ–∫–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
            "success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        },
        "uz": {
            "processing": "‚è≥ Foydalanuvchi bloklanmoqda...",
            "success": "‚úÖ Foydalanuvchi bloklandi",
            "error": "‚ùå Foydalanuvchini bloklashda xatolik",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.answer(lang_texts["processing"])

    try:
        result = await user_client.update_user(
            user_id=user_id, data={"is_active": False}, token=token
        )

        await callback.message.answer(lang_texts["success"])

    except Exception as e:
        logger.error(f"Error blocking user: {e}")
        await callback.message.answer(lang_texts["error"])


@router.callback_query(F.data.startswith("user:unblock:"))
async def callback_unblock_user(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    Unblock user.
    """
    user_id = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "processing": "‚è≥ –†–∞–∑–±–ª–æ–∫–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
            "success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        },
        "uz": {
            "processing": "‚è≥ Foydalanuvchi blokdan chiqarilmoqda...",
            "success": "‚úÖ Foydalanuvchi blokdan chiqarildi",
            "error": "‚ùå Foydalanuvchini blokdan chiqarishda xatolik",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.answer(lang_texts["processing"])

    try:
        result = await user_client.update_user(
            user_id=user_id, data={"is_active": True}, token=token
        )

        await callback.message.answer(lang_texts["success"])

    except Exception as e:
        logger.error(f"Error unblocking user: {e}")
        await callback.message.answer(lang_texts["error"])


# ===========================================
# Request Management (Admin)
# ===========================================


@router.message(F.text.in_(["üìã –ó–∞—è–≤–∫–∏", "üìã Arizalar"]))
@admin_only
async def button_requests_admin(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show admin request management menu.
    """
    await state.clear()

    texts = {
        "ru": (
            "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫:"
        ),
        "uz": (
            "üìã <b>Arizalarni boshqarish</b>\n\n"
            "Arizalarni qidirish usulini tanlang:"
        ),
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_request_search_options_keyboard(language),
        parse_mode="HTML",
    )

    await state.set_state(RequestManagementStates.waiting_for_search_query)


@router.callback_query(F.data.startswith("req_search:"))
async def callback_request_search(
    callback: CallbackQuery,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Handle request search option selection.
    """
    await callback.answer()

    search_type = callback.data.split(":")[-1]

    if search_type == "all":
        loading_msg = await callback.message.answer(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞—è–≤–∫–∏..." if language == "ru" else "‚è≥ Arizalar yuklanmoqda..."
        )

        try:
            result = await request_client.get_all_requests(token=token, limit=10)

            await loading_msg.delete()

            requests = result.get("items", [])

            if not requests:
                await callback.message.answer(
                    "üìã –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" if language == "ru" else "üìã Arizalar topilmadi"
                )
                return

            for req in requests[:5]:
                request_number = req.get("request_number")
                status = req.get("status")
                building = req.get("building")
                apartment = req.get("apartment")
                description = req.get("description", "")[:50]

                req_info = (
                    f"üìã <b>–ó–∞—è–≤–∫–∞ {request_number}</b>\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üè¢ –î–æ–º: {building}, –∫–≤. {apartment}\n"
                    f"üìù {description}..."
                )

                await callback.message.answer(
                    req_info,
                    reply_markup=admin_keyboards.get_request_admin_actions_keyboard(
                        request_number, status, language
                    ),
                    parse_mode="HTML",
                )

            total = result.get("total", 0)
            if total > 5:
                await callback.message.answer(
                    f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {total} –∑–∞—è–≤–æ–∫</i>"
                    if language == "ru"
                    else f"<i>{total} tadan birinchi 5 ta ko'rsatildi</i>",
                    parse_mode="HTML",
                )

        except Exception as e:
            logger.error(f"Error loading requests: {e}")
            await loading_msg.delete()
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫"
                if language == "ru"
                else "‚ùå Arizalarni yuklashda xatolik"
            )


# ===========================================
# Analytics
# ===========================================


@router.message(F.text.in_(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìä Analitika"]))
@admin_only
async def button_analytics(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show analytics menu.
    """
    await state.clear()

    texts = {
        "ru": "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        "uz": "üìä <b>Analitika</b>\n\nHisobot turini tanlang:",
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_analytics_reports_keyboard(language),
        parse_mode="HTML",
    )


# ===========================================
# Broadcast Messages
# ===========================================


@router.message(F.text.in_(["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ Xabar yuborish"]))
@admin_only
async def button_broadcast(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show broadcast menu.
    """
    await state.clear()

    texts = {
        "ru": (
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        ),
        "uz": (
            "üì¢ <b>Xabar yuborish</b>\n\n"
            "Xabar yuborish uchun maqsadli auditoriyani tanlang:"
        ),
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_broadcast_target_keyboard(language),
        parse_mode="HTML",
    )

    await state.set_state(BroadcastStates.waiting_for_target_selection)


# ===========================================
# System Configuration
# ===========================================


@router.message(F.text.in_(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Sozlamalar"]))
@admin_only
async def button_config(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show system configuration menu.
    """
    await state.clear()

    texts = {
        "ru": "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "uz": "‚öôÔ∏è <b>Tizim sozlamalari</b>\n\nKategoriyani tanlang:",
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=admin_keyboards.get_config_categories_keyboard(language),
        parse_mode="HTML",
    )


# ===========================================
# Logs Viewer
# ===========================================


@router.message(F.text.in_(["üìù –õ–æ–≥–∏", "üìù Loglar"]))
@admin_only
async def button_logs(
    message: Message,
    user_role: str,
    language: str,
):
    """
    Show system logs (placeholder).
    """
    texts = {
        "ru": (
            "üìù <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>docker-compose logs -f bot-gateway</code>"
        ),
        "uz": (
            "üìù <b>Tizim loglari</b>\n\n"
            "Loglarni ko'rish funksiyasi keyingi versiyada mavjud bo'ladi.\n\n"
            "Loglarni ko'rish uchun buyruqdan foydalaning:\n"
            "<code>docker-compose logs -f bot-gateway</code>"
        ),
    }

    await message.answer(texts.get(language, texts["ru"]), parse_mode="HTML")
