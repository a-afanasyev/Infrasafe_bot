"""
Bot Gateway Service - Shift Management Handlers
UK Management Bot

Handlers for shift viewing, assignment, release, and availability management.
"""

from datetime import date, datetime, timedelta
from typing import Optional
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.integrations.shift_client import ShiftServiceClient
from app.keyboards import shifts as shift_keyboards
from app.keyboards.common import get_cancel_keyboard, get_main_menu_keyboard
from app.states.shift_states import (
    ShiftViewingStates,
    ShiftTakingStates,
    ShiftReleaseStates,
    AvailabilityStates,
)

logger = logging.getLogger(__name__)

# Create router
router = Router(name="shifts")

# Initialize Shift Service client
shift_client = ShiftServiceClient()


# ===========================================
# Main Shift Menu
# ===========================================


@router.message(F.text.in_(["üìÖ –°–º–µ–Ω—ã", "üìÖ Smenalar"]))
@router.message(Command("shifts"))
async def cmd_shifts_menu(
    message: Message,
    user_role: str,
    language: str,
    state: FSMContext,
):
    """
    Show main shift management menu.

    Available for: executor, manager, admin
    """
    await state.clear()

    texts = {
        "ru": (
            "üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "‚Ä¢ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b> - –í–∞—à–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã\n"
            "‚Ä¢ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã</b> - –°–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å\n"
            "‚Ä¢ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n"
            "‚Ä¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</b> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é\n"
            "‚Ä¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"
        ),
        "uz": (
            "üìÖ <b>Smenalarni boshqarish</b>\n\n"
            "Amalni tanlang:\n\n"
            "‚Ä¢ <b>Mening smenalarim</b> - Sizga tayinlangan smenalar\n"
            "‚Ä¢ <b>Mavjud smenalar</b> - Olish mumkin bo'lgan smenalar\n"
            "‚Ä¢ <b>Jadval</b> - Hafta/oy jadvali\n"
            "‚Ä¢ <b>Mavjudlik</b> - Mavjudlikni boshqarish\n"
            "‚Ä¢ <b>Statistika</b> - Davr statistikasi"
        ),
    }

    await message.answer(
        text=texts.get(language, texts["ru"]),
        reply_markup=shift_keyboards.get_shift_menu_keyboard(user_role, language),
        parse_mode="HTML",
    )


# ===========================================
# My Shifts
# ===========================================


@router.message(F.text.in_(["üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã", "üìÖ Mening smenalarim"]))
async def button_my_shifts(
    message: Message,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Show user's assigned shifts.
    """
    await state.clear()

    texts = {
        "ru": {
            "loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ —Å–º–µ–Ω—ã...",
            "header": "üìÖ <b>–ú–æ–∏ —Å–º–µ–Ω—ã</b>\n\n",
            "no_shifts": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω.",
            "shift_template": (
                "üìÖ <b>–°–º–µ–Ω–∞ {date}</b>\n"
                "üïí –í—Ä–µ–º—è: {time_from} - {time_to}\n"
                "üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}\n"
                "üìç –û–±—ä–µ–∫—Ç—ã: {buildings}\n"
                "üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            ),
            "error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        },
        "uz": {
            "loading": "‚è≥ Smenalaringiz yuklanmoqda...",
            "header": "üìÖ <b>Mening smenalarim</b>\n\n",
            "no_shifts": "Sizda hali tayinlangan smenalar yo'q.",
            "shift_template": (
                "üìÖ <b>Smena {date}</b>\n"
                "üïí Vaqt: {time_from} - {time_to}\n"
                "üîß Mutaxassislik: {specialization}\n"
                "üìç Obyektlar: {buildings}\n"
                "üìä Holat: {status}\n"
            ),
            "error": "‚ùå Smenalarni yuklashda xatolik. Keyinroq urinib ko'ring.",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    # Show loading message
    loading_msg = await message.answer(lang_texts["loading"])

    try:
        # Get shifts from Shift Service
        result = await shift_client.get_my_shifts(
            token=token, date_from=date.today(), limit=10
        )

        await loading_msg.delete()

        shifts = result.get("items", [])

        if not shifts:
            await message.answer(lang_texts["no_shifts"])
            return

        # Display shifts
        response = lang_texts["header"]

        for shift in shifts[:5]:  # Show first 5
            shift_date = shift.get("date", "N/A")
            time_from = shift.get("time_from", "N/A")
            time_to = shift.get("time_to", "N/A")
            specialization = shift.get("specialization", "N/A")
            buildings = ", ".join(shift.get("building_ids", []))
            status = shift.get("status", "N/A")

            response += lang_texts["shift_template"].format(
                date=shift_date,
                time_from=time_from,
                time_to=time_to,
                specialization=specialization,
                buildings=buildings or "–ù–µ —É–∫–∞–∑–∞–Ω—ã",
                status=status,
            )
            response += "\n"

            # Add action buttons for this shift
            shift_id = shift.get("id")
            is_assigned = True  # User requested their shifts
            await message.answer(
                "‚û°Ô∏è",
                reply_markup=shift_keyboards.get_shift_actions_keyboard(
                    shift_id=shift_id,
                    shift_status=status,
                    is_assigned_to_me=is_assigned,
                    user_role="executor",
                    language=language,
                ),
            )

        # Show total count
        total = result.get("total", 0)
        if total > 5:
            response += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∏–∑ {total} —Å–º–µ–Ω</i>"

        await message.answer(response, parse_mode="HTML")

        # Offer filter options
        await message.answer(
            "üîç –§–∏–ª—å—Ç—Ä—ã:" if language == "ru" else "üîç Filtrlar:",
            reply_markup=shift_keyboards.get_shift_filter_keyboard(language),
        )

    except Exception as e:
        logger.error(f"Error loading shifts: {e}")
        await loading_msg.delete()
        await message.answer(lang_texts["error"])


# ===========================================
# Available Shifts
# ===========================================


@router.message(F.text.in_(["üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã", "üîç Mavjud smenalar"]))
async def button_available_shifts(
    message: Message,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Show available shifts that user can take.
    """
    await state.clear()

    texts = {
        "ru": {
            "loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã...",
            "header": "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–µ–Ω—ã</b>\n\n",
            "no_shifts": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            "prompt": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        },
        "uz": {
            "loading": "‚è≥ Mavjud smenalar yuklanmoqda...",
            "header": "üîç <b>Mavjud smenalar</b>\n\n",
            "no_shifts": "Yaqin vaqtda mavjud smenalar yo'q.",
            "prompt": "Filtrlash uchun davr yoki mutaxassislikni tanlang:",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    # Show loading
    loading_msg = await message.answer(lang_texts["loading"])

    try:
        # Get available shifts
        result = await shift_client.get_available_shifts(
            token=token, date_from=date.today(), limit=10
        )

        await loading_msg.delete()

        shifts = result.get("items", [])

        if not shifts:
            await message.answer(lang_texts["no_shifts"])
            return

        response = lang_texts["header"]

        for shift in shifts[:5]:
            shift_date = shift.get("date", "N/A")
            time_from = shift.get("time_from", "N/A")
            time_to = shift.get("time_to", "N/A")
            specialization = shift.get("specialization", "N/A")

            response += (
                f"üìÖ {shift_date} | üïí {time_from}-{time_to} | üîß {specialization}\n"
            )

            # Action buttons
            shift_id = shift.get("id")
            await message.answer(
                "‚û°Ô∏è",
                reply_markup=shift_keyboards.get_shift_actions_keyboard(
                    shift_id=shift_id,
                    shift_status="available",
                    is_assigned_to_me=False,
                    user_role="executor",
                    language=language,
                ),
            )

        await message.answer(response, parse_mode="HTML")

        # Filter options
        await message.answer(
            lang_texts["prompt"],
            reply_markup=shift_keyboards.get_shift_filter_keyboard(language),
        )

    except Exception as e:
        logger.error(f"Error loading available shifts: {e}")
        await loading_msg.delete()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")


# ===========================================
# Schedule View
# ===========================================


@router.message(F.text.in_(["üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìÜ Jadval"]))
async def button_schedule(
    message: Message,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Show shift schedule.
    """
    await state.clear()

    texts = {
        "ru": {
            "prompt": "üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        },
        "uz": {
            "prompt": "üìÜ <b>Smenalar jadvali</b>\n\nKo'rish uchun davrni tanlang:",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await message.answer(
        lang_texts["prompt"],
        reply_markup=shift_keyboards.get_date_range_keyboard(language),
        parse_mode="HTML",
    )

    await state.set_state(ShiftViewingStates.waiting_for_date_range)


@router.callback_query(F.data.startswith("date:"), ShiftViewingStates.waiting_for_date_range)
async def callback_schedule_date(
    callback: CallbackQuery,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Handle date selection for schedule.
    """
    await callback.answer()

    data_parts = callback.data.split(":")
    if len(data_parts) < 3:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    date_from_str = data_parts[1]
    date_to_str = data_parts[2]

    try:
        date_from = date.fromisoformat(date_from_str)
        date_to = date.fromisoformat(date_to_str)

        # Get schedule
        result = await shift_client.get_schedule(
            token=token, date_from=date_from, date_to=date_to
        )

        schedule_data = result.get("schedule", {})

        if not schedule_data:
            await callback.message.answer(
                "üìÜ –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–º–µ–Ω –Ω–µ—Ç"
                if language == "ru"
                else "üìÜ Tanlangan davrda smenalar yo'q"
            )
            await state.clear()
            return

        response = f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {date_from} - {date_to}</b>\n\n"

        for date_key, shifts in schedule_data.items():
            response += f"üìÖ <b>{date_key}</b>\n"
            for shift in shifts:
                time_from = shift.get("time_from")
                time_to = shift.get("time_to")
                spec = shift.get("specialization")
                response += f"  üïí {time_from}-{time_to} | üîß {spec}\n"
            response += "\n"

        await callback.message.answer(response, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        logger.error(f"Error loading schedule: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await state.clear()


# ===========================================
# Take Shift
# ===========================================


@router.callback_query(F.data.startswith("shift:take:"))
async def callback_take_shift(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    Handle shift take action.
    """
    shift_id = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "confirm": "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç—É —Å–º–µ–Ω—É?",
            "success": "‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å —Å–º–µ–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.",
        },
        "uz": {
            "confirm": "‚ùì Ushbu smenani olmoqchimisiz?",
            "success": "‚úÖ Smena sizga tayinlandi!",
            "error": "‚ùå Smenani olishda xatolik. Ehtimol u band.",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    # Show confirmation
    await callback.message.answer(
        lang_texts["confirm"],
        reply_markup=shift_keyboards.get_confirmation_keyboard("take", shift_id, language),
    )

    await callback.answer()


@router.callback_query(F.data.startswith("take:confirm:"))
async def callback_take_confirm(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    Confirm shift take.
    """
    shift_id = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "processing": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
            "success": "‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å!",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å —Å–º–µ–Ω—É.",
        },
        "uz": {
            "processing": "‚è≥ Qayta ishlanyapti...",
            "success": "‚úÖ Smena sizga tayinlandi!",
            "error": "‚ùå Smenani olishda xatolik.",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.answer(lang_texts["processing"])

    try:
        result = await shift_client.take_shift(shift_id=shift_id, token=token)

        await callback.message.answer(lang_texts["success"])

    except Exception as e:
        logger.error(f"Error taking shift: {e}")
        await callback.message.answer(lang_texts["error"])


# ===========================================
# Release Shift
# ===========================================


@router.callback_query(F.data.startswith("shift:release:"))
async def callback_release_shift(
    callback: CallbackQuery,
    language: str,
    state: FSMContext,
):
    """
    Handle shift release request.
    """
    shift_id = callback.data.split(":")[-1]

    texts = {
        "ru": {
            "prompt": (
                "‚ùì <b>–û—Ç–∫–∞–∑ –æ—Ç —Å–º–µ–Ω—ã</b>\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–º–µ–Ω—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
            ),
        },
        "uz": {
            "prompt": (
                "‚ùì <b>Smenadan voz kechish</b>\n\n"
                "Smenadan voz kechish sababini kiriting (majburiy emas):\n\n"
                "Yoki o'tkazib yuborish uchun /skip bosing."
            ),
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.message.answer(lang_texts["prompt"], parse_mode="HTML")

    await state.update_data(shift_id=shift_id)
    await state.set_state(ShiftReleaseStates.waiting_for_reason)

    await callback.answer()


@router.message(ShiftReleaseStates.waiting_for_reason)
@router.message(Command("skip"), ShiftReleaseStates.waiting_for_reason)
async def process_release_reason(
    message: Message,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Process release reason and confirm.
    """
    data = await state.get_data()
    shift_id = data.get("shift_id")

    reason = None if message.text.startswith("/skip") else message.text.strip()

    texts = {
        "ru": {"confirm": "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–∞–∑ –æ—Ç —Å–º–µ–Ω—ã?"},
        "uz": {"confirm": "‚ùì Smenadan voz kechishni tasdiqlaysizmi?"},
    }

    lang_texts = texts.get(language, texts["ru"])

    await message.answer(
        lang_texts["confirm"],
        reply_markup=shift_keyboards.get_confirmation_keyboard("release", shift_id, language),
    )

    await state.update_data(reason=reason)
    await state.set_state(ShiftReleaseStates.waiting_for_confirmation)


@router.callback_query(F.data.startswith("release:confirm:"))
async def callback_release_confirm(
    callback: CallbackQuery,
    token: str,
    language: str,
    state: FSMContext,
):
    """
    Confirm shift release.
    """
    shift_id = callback.data.split(":")[-1]
    data = await state.get_data()
    reason = data.get("reason")

    texts = {
        "ru": {
            "processing": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
            "success": "‚úÖ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–º–µ–Ω—ã.",
            "error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–º–µ–Ω—ã.",
        },
        "uz": {
            "processing": "‚è≥ Qayta ishlanyapti...",
            "success": "‚úÖ Siz smenadan voz kechtingiz.",
            "error": "‚ùå Smenadan voz kechishda xatolik.",
        },
    }

    lang_texts = texts.get(language, texts["ru"])

    await callback.answer(lang_texts["processing"])

    try:
        result = await shift_client.release_shift(
            shift_id=shift_id, reason=reason, token=token
        )

        await callback.message.answer(lang_texts["success"])
        await state.clear()

    except Exception as e:
        logger.error(f"Error releasing shift: {e}")
        await callback.message.answer(lang_texts["error"])
        await state.clear()


# ===========================================
# Availability Management
# ===========================================


@router.message(F.text.in_(["‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "‚è∞ Mavjudlik"]))
async def button_availability(
    message: Message,
    language: str,
    state: FSMContext,
):
    """
    Show availability management menu.
    """
    await state.clear()

    texts = {
        "ru": (
            "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–≥–¥–∞ –≤—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–º–µ–Ω—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        "uz": (
            "‚è∞ <b>Mavjudlikni boshqarish</b>\n\n"
            "Smenalarga tayinlanish uchun qachon mavjudligingizni sozlang.\n\n"
            "Amalni tanlang:"
        ),
    }

    await message.answer(
        texts.get(language, texts["ru"]),
        reply_markup=shift_keyboards.get_availability_actions_keyboard(language),
        parse_mode="HTML",
    )


# ===========================================
# Statistics
# ===========================================


@router.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä Statistika"]))
async def button_statistics(
    message: Message,
    token: str,
    language: str,
):
    """
    Show shift statistics.
    """
    texts = {
        "ru": {"loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."},
        "uz": {"loading": "‚è≥ Statistika yuklanmoqda..."},
    }

    lang_texts = texts.get(language, texts["ru"])

    loading_msg = await message.answer(lang_texts["loading"])

    try:
        # Get statistics
        result = await shift_client.get_shift_statistics(token=token)

        await loading_msg.delete()

        total = result.get("total_shifts", 0)
        completed = result.get("completed_shifts", 0)
        cancelled = result.get("cancelled_shifts", 0)
        hours = result.get("total_hours", 0.0)

        response = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω</b>\n\n"
            f"üìã –í—Å–µ–≥–æ —Å–º–µ–Ω: {total}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
            f"‚è± –ß–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours:.1f}\n"
        )

        specs = result.get("specializations", {})
        if specs:
            response += "\n<b>–ü–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:</b>\n"
            for spec, count in specs.items():
                response += f"  üîß {spec}: {count}\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error loading statistics: {e}")
        await loading_msg.delete()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


# ===========================================
# View Shift Details
# ===========================================


@router.callback_query(F.data.startswith("shift:view:"))
async def callback_view_shift(
    callback: CallbackQuery,
    token: str,
    language: str,
):
    """
    View detailed shift information.
    """
    shift_id = callback.data.split(":")[-1]

    try:
        shift = await shift_client.get_shift_by_id(shift_id=shift_id, token=token)

        response = (
            f"üìÖ <b>–°–º–µ–Ω–∞ {shift.get('date')}</b>\n\n"
            f"üïí –í—Ä–µ–º—è: {shift.get('time_from')} - {shift.get('time_to')}\n"
            f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {shift.get('specialization')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {shift.get('status')}\n"
            f"üìç –û–±—ä–µ–∫—Ç—ã: {', '.join(shift.get('building_ids', []))}\n"
        )

        executor_id = shift.get("executor_id")
        if executor_id:
            response += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_id}\n"

        notes = shift.get("notes")
        if notes:
            response += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"

        await callback.message.answer(response, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.error(f"Error loading shift details: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã")
        await callback.answer()
