version: '3.8'

services:
  # Request Service
  request-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: request-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql+asyncpg://request_user:request_pass@request-db:5432/request_db
      - REDIS_URL=redis://request-redis:6379/3
      - AUTH_SERVICE_URL=http://auth-service:8001
      - USER_SERVICE_URL=http://user-service:8002
      - MEDIA_SERVICE_URL=http://media-service:8004
      - NOTIFICATION_SERVICE_URL=http://notification-service:8005
      - DEBUG=true
      - LOG_LEVEL=INFO
    depends_on:
      request-db:
        condition: service_healthy
      request-redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - request-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  request-db:
    image: postgres:15-alpine
    container_name: request-db
    environment:
      POSTGRES_USER: request_user
      POSTGRES_PASSWORD: request_pass
      POSTGRES_DB: request_db
    ports:
      - "5435:5432"  # Different port to avoid conflicts
    volumes:
      - request_db_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - request-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U request_user -d request_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  request-redis:
    image: redis:7-alpine
    container_name: request-redis
    ports:
      - "6382:6379"  # Different port to avoid conflicts
    volumes:
      - request_redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - request-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Service
  request-migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: request-migrations
    environment:
      - DATABASE_URL=postgresql+asyncpg://request_user:request_pass@request-db:5432/request_db
    depends_on:
      request-db:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    networks:
      - request-network
    volumes:
      - .:/app
    profiles:
      - migration

volumes:
  request_db_data:
    driver: local
  request_redis_data:
    driver: local

networks:
  request-network:
    driver: bridge
  microservices-network:
    external: true