"""
–¢–µ—Å—Ç—ã –¥–ª—è ProfileService
"""
import pytest
import json
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from uk_management_bot.database.session import Base
from uk_management_bot.database.models.user import User
from uk_management_bot.services.profile_service import ProfileService

# –°–æ–∑–¥–∞–µ–º in-memory –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
engine = create_engine("sqlite:///:memory:?test_profile_db")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@pytest.fixture
def db_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    Base.metadata.create_all(bind=engine)
    session = SessionLocal()
    try:
        yield session
    finally:
        session.close()

@pytest.fixture
def sample_user(db_session):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = User(
        telegram_id=123456789,
        username="testuser",
        first_name="–¢–µ—Å—Ç",
        last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        roles=json.dumps(["applicant", "executor"]),
        active_role="executor",
        status="approved",
        language="ru",
        phone="+998901234567",
        home_address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
        apartment_address="–∫–≤. 10",
        yard_address="–î–≤–æ—Ä –ê; –î–≤–æ—Ä –ë; –î–≤–æ—Ä –í",
        specialization="electricity,plumbing"
    )
    db_session.add(user)
    db_session.commit()
    db_session.refresh(user)
    return user

def test_get_user_profile_data_success(db_session, sample_user):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(123456789)
    
    assert profile_data is not None
    assert profile_data['telegram_id'] == 123456789
    assert profile_data['username'] == "testuser"
    assert profile_data['first_name'] == "–¢–µ—Å—Ç"
    assert profile_data['last_name'] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    assert profile_data['roles'] == ["applicant", "executor"]
    assert profile_data['active_role'] == "executor"
    assert profile_data['status'] == "approved"
    assert profile_data['phone'] == "+998901234567"
    assert profile_data['home_address'] == "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1"
    assert profile_data['apartment_address'] == "–∫–≤. 10"
    assert profile_data['yards'] == ["–î–≤–æ—Ä –ê", "–î–≤–æ—Ä –ë", "–î–≤–æ—Ä –í"]
    assert profile_data['specializations'] == ["electricity", "plumbing"]

def test_get_user_profile_data_not_found(db_session):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(999999999)
    
    assert profile_data is None

def test_get_user_profile_data_with_defaults(db_session):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = User(
        telegram_id=987654321,
        username="minimal_user"
    )
    db_session.add(user)
    db_session.commit()
    
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(987654321)
    
    assert profile_data is not None
    assert profile_data['roles'] == ["applicant"]  # –¥–µ—Ñ–æ–ª—Ç
    assert profile_data['active_role'] == "applicant"  # –¥–µ—Ñ–æ–ª—Ç
    assert profile_data['status'] == "pending"  # –¥–µ—Ñ–æ–ª—Ç
    assert profile_data['language'] == "ru"  # –¥–µ—Ñ–æ–ª—Ç
    assert profile_data['phone'] is None
    assert profile_data['yards'] == []
    assert profile_data['specializations'] == []

def test_format_profile_text_ru(db_session, sample_user):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(123456789)
    
    profile_text = service.format_profile_text(profile_data, language="ru")
    
    assert "üë§ –ü—Ä–æ—Ñ–∏–ª—å" in profile_text
    assert "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in profile_text
    assert "@testuser" in profile_text
    assert "‚úÖ –û–¥–æ–±—Ä–µ–Ω" in profile_text
    assert "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in profile_text
    assert "–ñ–∏—Ç–µ–ª—å, –°–æ—Ç—Ä—É–¥–Ω–∏–∫" in profile_text
    assert "+998901234567" in profile_text
    assert "–≠–ª–µ–∫—Ç—Ä–∏–∫, –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫" in profile_text
    assert "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1" in profile_text
    assert "–∫–≤. 10" in profile_text
    assert "–ù–µ—Å–∫–æ–ª—å–∫–æ –¥–≤–æ—Ä–æ–≤" in profile_text
    assert "1. –î–≤–æ—Ä –ê" in profile_text
    assert "2. –î–≤–æ—Ä –ë" in profile_text
    assert "3. –î–≤–æ—Ä –í" in profile_text

def test_format_profile_text_uz(db_session, sample_user):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ"""
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(123456789)
    
    profile_text = service.format_profile_text(profile_data, language="uz")
    
    assert "üë§ Profil" in profile_text
    assert "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" in profile_text
    assert "‚úÖ Tasdiqlangan" in profile_text
    assert "Xodim" in profile_text
    assert "Elektrik, Santexnik" in profile_text

def test_format_profile_text_minimal_user(db_session):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = User(
        telegram_id=111111111,
        first_name="–ú–∏–Ω–∏–º—É–º"
    )
    db_session.add(user)
    db_session.commit()
    
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(111111111)
    profile_text = service.format_profile_text(profile_data, language="ru")
    
    assert "üë§ –ü—Ä–æ—Ñ–∏–ª—å" in profile_text
    assert "–ú–∏–Ω–∏–º—É–º" in profile_text
    assert "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è" in profile_text
    assert "–ñ–∏—Ç–µ–ª—å" in profile_text
    assert "–Ω–µ —É–∫–∞–∑–∞–Ω" in profile_text  # —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
    assert "–Ω–µ —É–∫–∞–∑–∞–Ω–∞" in profile_text  # —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞

def test_validate_profile_data_success(db_session, sample_user):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    service = ProfileService(db_session)
    profile_data = service.get_user_profile_data(123456789)
    
    issues = service.validate_profile_data(profile_data)
    
    assert issues == []  # –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º

def test_validate_profile_data_issues(db_session):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    service = ProfileService(db_session)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    invalid_data = {
        'telegram_id': None,  # –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        'roles': "invalid",  # –Ω–µ —Å–ø–∏—Å–æ–∫
        'active_role': "manager",  # –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ roles
        'status': "invalid_status",  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        'phone': "123"  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    }
    
    issues = service.validate_profile_data(invalid_data)
    
    assert len(issues) >= 4  # –º–∏–Ω–∏–º—É–º 4 –ø—Ä–æ–±–ª–µ–º—ã
    assert any("telegram_id" in issue for issue in issues)
    assert any("—Ä–æ–ª–∏" in issue for issue in issues)
    assert any("–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å" in issue for issue in issues)
    assert any("—Å—Ç–∞—Ç—É—Å" in issue for issue in issues)

def test_validate_profile_data_none(db_session):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    service = ProfileService(db_session)
    
    issues = service.validate_profile_data(None)
    
    assert len(issues) == 1
    assert "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" in issues[0]

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
