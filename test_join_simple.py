"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /join
"""
import json

def test_invite_data_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω–≤–∞–π—Ç–∞"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç–∞
    invite_data = {
        "role": "executor",
        "specialization": "plumber,electrician",
        "created_by": 987654321,
        "nonce": "test_nonce_123"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–æ–ª–∏
    role = invite_data["role"]
    assert role == "executor"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if role == "executor" and invite_data.get("specialization"):
        specializations = invite_data["specialization"].split(",")
        assert len(specializations) == 2
        assert "plumber" in specializations
        assert "electrician" in specializations
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ roles JSON
    current_roles = []
    if role not in current_roles:
        current_roles.append(role)
    
    roles_json = json.dumps(current_roles)
    assert roles_json == '["executor"]'
    
    print("‚úÖ test_invite_data_processing - PASSED")


def test_role_localization_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    role_mapping = {
        "applicant": "–ó–∞—è–≤–∏—Ç–µ–ª—å",
        "executor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
        "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ–ª–∏
    for role_key, role_name in role_mapping.items():
        assert len(role_name) > 0
        assert role_name != role_key  # –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
    
    print("‚úÖ test_role_localization_mapping - PASSED")


def test_error_handling_scenarios():
    """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    error_scenarios = [
        ("Token has expired", "expired"),
        ("Token already used", "used"),
        ("Invalid token signature", "invalid"),
        ("Invalid token format", "invalid")
    ]
    
    for error_message, expected_type in error_scenarios:
        error_msg_lower = error_message.lower()
        
        if "expired" in error_msg_lower:
            result_type = "expired"
        elif "already used" in error_msg_lower:
            result_type = "used"
        else:
            result_type = "invalid"
        
        assert result_type == expected_type, f"Failed for: {error_message}"
    
    print("‚úÖ test_error_handling_scenarios - PASSED")


def test_rate_limiter_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ rate limiting"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è rate limiter storage
    storage = {}
    window = 600  # 10 –º–∏–Ω—É—Ç
    max_attempts = 3
    
    def is_allowed(user_id: int, current_time: float) -> bool:
        key = f"join_{user_id}"
        attempts = storage.get(key, [])
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        attempts = [t for t in attempts if current_time - t < window]
        
        if len(attempts) >= max_attempts:
            return False
        
        attempts.append(current_time)
        storage[key] = attempts
        return True
    
    user_id = 123456789
    current_time = 1000000000.0
    
    # –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
    assert is_allowed(user_id, current_time) == True
    assert is_allowed(user_id, current_time + 1) == True
    assert is_allowed(user_id, current_time + 2) == True
    
    # 4-—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    assert is_allowed(user_id, current_time + 3) == False
    
    # –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–∫–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç—å—Å—è
    assert is_allowed(user_id, current_time + window + 1) == True
    
    print("‚úÖ test_rate_limiter_logic - PASSED")


def test_user_data_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ join"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = {
        "telegram_id": 123456789,
        "roles": '["applicant"]',
        "active_role": "applicant",
        "status": "approved"
    }
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–≤–∞–π—Ç–∞
    invite_data = {
        "role": "executor",
        "specialization": "plumber"
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
    current_roles = json.loads(existing_user["roles"])
    new_role = invite_data["role"]
    
    if new_role not in current_roles:
        current_roles.append(new_role)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert len(current_roles) == 2
    assert "applicant" in current_roles
    assert "executor" in current_roles
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_user = existing_user.copy()
    updated_user["roles"] = json.dumps(current_roles)
    updated_user["specialization"] = invite_data["specialization"]
    updated_user["status"] = "pending"  # –î–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    
    assert updated_user["specialization"] == "plumber"
    assert updated_user["status"] == "pending"
    
    print("‚úÖ test_user_data_update - PASSED")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ /join...")
    
    test_invite_data_processing()
    test_role_localization_mapping()
    test_error_handling_scenarios()
    test_rate_limiter_logic()
    test_user_data_update()
    
    print("\nüéâ –í—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã /join –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
